prompt,code
"एक पाइथन स्क्रिप्ट बनाओ जो कमांड-लाइन से एक नाम ले और उसे ग्रीट करे","import sys\nif len(sys.argv) > 1:\n    name = sys.argv[1]\n    print(f'Hello, {name}')"
"एक कमांड-लाइन कैलकुलेटर बनाओ जो दो नंबरों को जोड़े","import sys\nnum1 = int(sys.argv[1])\nnum2 = int(sys.argv[2])\nprint(num1 + num2)"
"`argparse` का उपयोग करके एक कमांड-लाइन टूल बनाओ","import argparse\nparser = argparse.ArgumentParser()\nparser.add_argument('filename')\nargs = parser.parse_args()"
"एक फाइल में लाइनों, शब्दों और कैरेक्टर्स की गिनती करने वाली स्क्रिप्ट","import sys\nfilename = sys.argv[1]\nlines, words, chars = 0, 0, 0\nwith open(filename, 'r') as f:\n    for line in f:\n        lines += 1\n        words += len(line.split())\n        chars += len(line)\nprint(f'Lines: {lines}, Words: {words}, Chars: {chars}')"
"पाइथन से एक सिंपल HTTP सर्वर शुरू करो","import http.server\nimport socketserver\nPORT = 8000\nHandler = http.server.SimpleHTTPRequestHandler\nwith socketserver.TCPServer(('', PORT), Handler) as httpd:\n    httpd.serve_forever()"
"एक फोल्डर की सभी '.jpg' फाइलों को '.jpeg' में रीनेम करो","import os\nfor filename in os.listdir('.'):\n    if filename.endswith('.jpg'):\n        os.rename(filename, filename[:-4] + '.jpeg')"
"एक स्क्रिप्ट बनाओ जो एक डायरेक्टरी में 1MB से बड़ी सभी फाइलों को ढूंढे","import os\nfor filename in os.listdir('.'):\n    if os.path.getsize(filename) > 1024 * 1024:\n        print(filename)"
"एक CSV फाइल को JSON में बदलने के लिए एक स्क्रिप्ट लिखो","import csv, json\ndata = []\nwith open('data.csv', 'r') as f:\n    for row in csv.DictReader(f):\n        data.append(row)\nwith open('data.json', 'w') as f:\n    json.dump(data, f, indent=4)"
"लॉग्स को एक फाइल में लिखो","import logging\nlogging.basicConfig(filename='app.log', level=logging.INFO)\nlogging.info('Program started')"
"`subprocess` मॉड्यूल का उपयोग करके एक शेल कमांड चलाओ","import subprocess\nsubprocess.run(['ls', '-l'])"
"एक फोल्डर को ज़िप (zip) करने के लिए एक स्क्रिप्ट लिखो","import shutil\nshutil.make_archive('my_archive', 'zip', 'folder_to_zip')"
"एक ज़िप फाइल को अनज़िप करो","import shutil\nshutil.unpack_archive('archive.zip', 'destination_folder')"
"पाइथन में एक एनवायरनमेंट वेरिएबल को पढ़ो","import os\napi_key = os.environ.get('API_KEY')"
"एक डायरेक्टरी ट्री को वॉक (walk) करो","import os\nfor dirpath, dirnames, filenames in os.walk('.'):\n    print(f'Directory: {dirpath}')\n    for file_name in filenames:\n        print(f'  {file_name}')"
"एक टेक्स्ट फाइल में एक शब्द को दूसरे से बदलो","with open('file.txt', 'r') as f: content = f.read()\nnew_content = content.replace('old', 'new')\nwith open('file.txt', 'w') as f: f.write(new_content)"
"एक डायरेक्टरी के सभी डुप्लीकेट फाइलों को ढूंढो (hash का उपयोग करके)","import hashlib, os\n# ... logic to calculate hashes and find duplicates ... "
"एक पासवर्ड जेनरेटर कमांड-लाइन टूल बनाओ","import random, string, argparse\nparser = argparse.ArgumentParser()\nparser.add_argument('length', type=int)\nargs = parser.parse_args()\npassword = ''.join(random.choice(string.ascii_letters) for _ in range(args.length))\nprint(password)"
"`platform` मॉड्यूल का उपयोग करके ऑपरेटिंग सिस्टम की जानकारी प्राप्त करो","import platform\nprint(f'OS: {platform.system()}, Version: {platform.version()}')"
"`pickle` का उपयोग करके एक पाइथन ऑब्जेक्ट को सेव करो","import pickle\nmy_data = {'a': 1}\nwith open('data.pkl', 'wb') as f:\n    pickle.dump(my_data, f)"
"`pickle` का उपयोग करके एक पाइथन ऑब्जेक्ट को लोड करो","import pickle\nwith open('data.pkl', 'rb') as f:\n    loaded_data = pickle.load(f)"
"`getpass` का उपयोग करके यूज़र से सुरक्षित रूप से पासवर्ड पूछो","import getpass\npassword = getpass.getpass('Enter your password: ')"
"पाइथन स्क्रिप्ट को 10 सेकंड के लिए रोको (sleep)","import time\nprint('Waiting...')\ntime.sleep(10)\nprint('Done waiting.')"
"एक स्क्रिप्ट के एक्सीक्यूशन समय को मापो","import time\nstart_time = time.time()\n# ... your long process ...\nend_time = time.time()\nprint(f'Duration: {end_time - start_time} seconds')"
"एक सिंपल API सर्वर बनाओ जो FastAPI کا उपयोग करे","from fastapi import FastAPI\napp = FastAPI()\n@app.get('/')\ndef read_root(): return {'Hello': 'World'}"
"पाइथन में एक SQLite डेटाबेस से कनेक्ट करो","import sqlite3\nconn = sqlite3.connect('my_database.db')"
"SQLite डेटाबेस में एक टेबल बनाओ","import sqlite3\nconn = sqlite3.connect('db.db')\nc = conn.cursor()\nc.execute('CREATE TABLE users (id INT, name TEXT)')\nconn.commit()\nconn.close()"
"SQLite टेबल में डेटा इंसर्ट करो","import sqlite3\nconn = sqlite3.connect('db.db')\nc = conn.cursor()\nc.execute('''INSERT INTO users VALUES (1, 'Amit')''')\nconn.commit()\nconn.close()"
"SQLite टेबल से डेटा सिलेक्ट करो","import sqlite3\nconn = sqlite3.connect('db.db')\nc = conn.cursor()\nfor row in c.execute('SELECT * FROM users'):\n    print(row)"
"एक Temporary Directory बनाओ","import tempfile\nwith tempfile.TemporaryDirectory() as tmpdir:\n    print('Created temporary directory', tmpdir)"
"एक टेक्स्ट फाइल की आखिरी N लाइनों को पढ़ो","def read_last_n_lines(filename, n):\n    with open(filename, 'r') as f:\n        return f.readlines()[-n:]"
"एक URL से एक फाइल डाउनलोड करो और प्रोग्रेस बार दिखाओ (tqdm)","from tqdm import tqdm\nimport requests\n# ... code to download a large file with a progress bar using tqdm ..."
"एक सिंपल कमांड-लाइन To-Do ऐप बनाओ (स्यूडो-कोड)","import sys\n# ... logic for a simple CLI to-do app that reads/writes to a file ..."
"`configparser` का उपयोग करके एक कॉन्फ़िगरेशन फाइल पढ़ो","import configparser\nconfig = configparser.ConfigParser()\nconfig.read('settings.ini')"
"एक पाइथन स्क्रिप्ट को बैकग्राउंड में चलाओ (daemonize)","import os\n# ... code for daemonizing a process using fork()..."
"पाइथन में मल्टीथ्रेडिंग का एक बेसिक उदाहरण","import threading\ndef task(): print('Task running')\n\nthread = threading.Thread(target=task)\nthread.start()"
"पाइथन में मल्टीप्रोसेसिंग का एक बेसिक उदाहरण","import multiprocessing\ndef worker(): print('Worker process')\n\nprocess = multiprocessing.Process(target=worker)\nprocess.start()"
"एक क्यू (Queue) का उपयोग करके थ्रेड्स के बीच डेटा शेयर करो","import queue, threading\nq = queue.Queue()\ndef producer(): q.put('hello')\ndef consumer(): item = q.get()\n\nt1 = threading.Thread(target=producer)\nt2 = threading.Thread(target=consumer)"
"एक पाइथन स्क्रिप्ट को एग्जीक्यूटेबल (executable) बनाओ (PyInstaller)","pyinstaller --onefile my_script.py"
"पाइथन से एक वेब ब्राउज़र खोलो","import webbrowser\nwebbrowser.open('https://google.com')"
"डाउनलोड फोल्डर में फाइलों को उनके एक्सटेंशन के आधार पर व्यवस्थित करो","import os, shutil\n# ... script to organize files in the Downloads folder ..."
"एक पाइथन स्क्रिप्ट जो एक वेबसाइट के डाउन होने पर अलर्ट भेजे","import requests, time\nwhile True:\n    try:\n        r = requests.get('http://example.com')\n        if r.status_code != 200:\n            print('Site is down!')\n    except:\n        print('Site is down!')\n    time.sleep(60)"
"एक इमेज का साइज़ बदलो (Pillow)","from PIL import Image\nimg = Image.open('in.jpg')\nresized = img.resize((200, 200))\nresized.save('out.jpg')"
"एक वॉटरमार्क को एक इमेज पर लगाओ","from PIL import Image, ImageDraw, ImageFont\n# ... code to add a text watermark to an image ..."
"एक डायरेक्टरी की सभी इमेजेज को कंप्रेस करो","import os\nfrom PIL import Image\n# ... script to loop through images and save with lower quality ..."
"एक MP3 फाइल से मेटाडेटा (ID3 tags) पढ़ो","from mutagen.mp3 import MP3\naudio = MP3('song.mp3')\nprint(audio.info.length)"
"एक PDF फाइल से टेक्स्ट निकालो (PyPDF2)","import PyPDF2\npdfFileObj = open('doc.pdf', 'rb')\npdfReader = PyPDF2.PdfReader(pdfFileObj)"
"कई PDF फाइलों को एक में मर्ज करो","from PyPDF2 import PdfMerger\nmerger = PdfMerger()\nfor pdf in ['file1.pdf', 'file2.pdf']:\n    merger.append(pdf)\nmerger.write('merged.pdf')"
"पाइथन से एक QR कोड बनाओ","import qrcode\nimg = qrcode.make('Some data to encode')\nimg.save('qrcode.png')"
"पाइथन से वाई-फाई नेटवर्क के लिए एक QR कोड बनाओ","import qrcode\n# ... code to generate a Wi-Fi QR code ..."
"Chart.js लाइब्रेरी को HTML में शामिल करो","<script src='https://cdn.jsdelivr.net/npm/chart.js'></script>"
"एक बार चार्ट (bar chart) बनाने के लिए एक कैनवास एलिमेंट बनाओ","<div style='width: 400px;'><canvas id='myBarChart'></canvas></div>"
"Chart.js का उपयोग करके एक सिंपल बार चार्ट बनाओ","<canvas id='c1'></canvas><script>new Chart(document.getElementById('c1'),{type:'bar',data:{labels:['January','February'], datasets:[{label:'Monthly Sales', data:[65, 59]}]}});</script>"
"Chart.js का उपयोग करके एक सिंपल लाइन चार्ट बनाओ","<canvas id='c2'></canvas><script>new Chart(document.getElementById('c2'),{type:'line',data:{labels:['Day 1','Day 2'], datasets:[{label:'Website Traffic', data:[100,150], fill:false, borderColor:'rgb(75, 192, 192)'}]}});</script>"
"Chart.js का उपयोग करके एक सिंपल पाई चार्ट बनाओ","<canvas id='c3'></canvas><script>new Chart(document.getElementById('c3'),{type:'pie',data:{labels:['Red','Blue','Yellow'], datasets:[{data:[300,50,100], backgroundColor:['Red','Blue','Yellow']}]}});</script>"
"Chart.js का उपयोग करके एक डोनट चार्ट (doughnut chart) बनाओ","<canvas id='c4'></canvas><script>new Chart(document.getElementById('c4'),{type:'doughnut',data:{...}});</script>"
"Chart.js का उपयोग करके एक रडार चार्ट (radar chart) बनाओ","<canvas id='c5'></canvas><script>new Chart(document.getElementById('c5'),{type:'radar',data:{labels:['Coding','Eating','Sleeping'], datasets:[{label:'My Skills', data:[9,7,8]}]}});</script>"
"Chart.js का उपयोग करके एक पोलर एरिया चार्ट (polar area chart) बनाओ","<canvas id='c6'></canvas><script>new Chart(document.getElementById('c6'),{type:'polarArea',data:{...}});</script>"
"एक चार्ट में टाइटल जोड़ो","options: { plugins: { title: { display: true, text: 'Custom Chart Title' } } }"
"एक चार्ट में लीजेंड (legend) को छिपाओ","options: { plugins: { legend: { display: false } } }"
"एक बार चार्ट के बार्स का रंग बदलो","datasets: [{ label: 'Data', data: [12, 19], backgroundColor: ['rgba(255, 99, 132, 0.2)', 'rgba(54, 162, 235, 0.2)'] }]"
"एक लाइन चार्ट की लाइन का रंग और मोटाई बदलो","datasets: [{ label: 'Data', data: [10, 20], borderColor: 'green', borderWidth: 3 }]"
"AJAX का उपयोग करके एक चार्ट का डेटा डायनामिक रूप से लोड करो","<script>fetch('/api/chart-data').then(res => res.json()).then(chartData => { new Chart(..., { data: chartData }); });</script>"
"एक बटन क्लिक पर चार्ट को अपडेट करो","<script>myChart.data.datasets[0].data = [50, 60, 70]; myChart.update();</script>"
"D3.js लाइब्रेरी को HTML में शामिल करो","<script src='https://d3js.org/d3.v7.min.js'></script>"
"D3.js का उपयोग करके एक सिंपल SVG एलिमेंट बनाओ","<div id='d3-container'></div><script>const svg = d3.select('#d3-container').append('svg').attr('width', 200).attr('height', 100);</script>"
"D3.js का उपयोग करके एक सर्किल बनाओ","<script>/*...after creating svg...*/ svg.append('circle').attr('cx', 50).attr('cy', 50).attr('r', 40).style('fill', 'blue');</script>"
"D3.js का उपयोग करके एक रेक्टेंगल बनाओ","<script>/*...after creating svg...*/ svg.append('rect').attr('x', 10).attr('y', 10).attr('width', 80).attr('height', 80).style('fill','green');</script>"
"D3.js में डेटा के आधार पर कई बार्स बनाओ","<script>const data=[10, 40, 32, 68]; const svg = d3.select('svg'); svg.selectAll('rect').data(data).enter().append('rect').attr('height', d=>d);</script>"
"D3.js में एक लीनियर स्केल (scale) बनाओ","<script>const xScale = d3.scaleLinear().domain([0, 100]).range([0, 500]);</script>"
"D3.js में एक एक्सिस (axis) बनाओ","<script>const xAxis = d3.axisBottom(xScale); svg.append('g').attr('transform', 'translate(0, 100)').call(xAxis);</script>"
"D3.js में एक ट्रांजीशन (transition) का उपयोग करो","<script>d3.select('circle').transition().duration(1000).attr('r', 10).style('fill', 'red');</script>"
"D3.js में एक माउसओवर इवेंट जोड़ो","<script>d3.selectAll('rect').on('mouseover', function(){ d3.select(this).style('fill', 'orange'); }).on('mouseout', function(){ d3.select(this).style('fill', 'green'); });</script>"
"D3.js का उपयोग करके एक CSV फाइल लोड करो","<script>d3.csv('my_data.csv').then(function(data) { console.log(data[0]); });</script>"
"D3.js का उपयोग करके एक JSON फाइल लोड करो","<script>d3.json('my_data.json').then(function(data) { console.log(data); });</script>"
"Chart.js में एक हॉरिजॉन्टल बार चार्ट बनाओ","<script>new Chart(ctx, {type:'bar', data: data, options: { indexAxis: 'y' }});</script>"
"Chart.js में एक स्टैक्ड बार चार्ट (stacked bar chart) बनाओ","<script>new Chart(ctx, {type:'bar', data: data, options: { scales: { x: { stacked: true }, y: { stacked: true } } }});</script>"
"Chart.js में एक बबल चार्ट (bubble chart) बनाओ","<script>new Chart(ctx, {type:'bubble', data: { datasets: [{label:'My Data', data:[{x:10,y:20,r:15}, {x:15,y:10,r:25}]}] }});</script>"
"Chart.js में एक स्कैटर चार्ट (scatter chart) बनाओ","<script>new Chart(ctx, {type:'scatter', data: { datasets: [{label:'Scatter Data', data:[{x:1,y:2},{x:3,y:4},{x:2,y:5}]}] }});</script>"
"एक चार्ट के टूलटिप्स (tooltips) को कस्टमाइज करो","options: { plugins: { tooltip: { callbacks: { label: function(context){ return `Value: ${context.parsed.y}`; } } } } }"
"एक चार्ट के एक्सिस लेबल्स को बदलो","options: { scales: { y: { title: { display: true, text: 'Total Sales ($)' } } } }"
"D3.js में एक पाई चार्ट का लेआउट बनाओ","<script>const pieGenerator = d3.pie(); const data_ready_for_pie = pieGenerator([10,20,30]);</script>"
"D3.js में एक आर्क (arc) जेनरेटर बनाओ","<script>const arcGenerator = d3.arc().innerRadius(50).outerRadius(100);</script>"
"D3.js में एक फोर्स-डायरेक्टेड ग्राफ (force-directed graph) का ढाँचा","<script>const simulation = d3.forceSimulation(nodes).force('link', d3.forceLink(links).id(d => d.id)).force('charge', d3.forceManyBody());</script>"
"एक मैप (जैसे भारत का) बनाने के लिए TopoJSON और D3.js का उपयोग करो","<script>d3.json('india_topo.json').then(function(topology) { const geojson = topojson.feature(topology, topology.objects.india); /* draw map with d3.geoPath() */ });</script>"
"Google Charts का उपयोग करके एक गेज चार्ट (gauge chart) बनाओ","<script type='text/javascript' src='https://www.gstatic.com/charts/loader.js'></script><script>google.charts.load('current', {'packages':['gauge']}); google.charts.setOnLoadCallback(drawChart); function drawChart(){...}</script>"
"Highcharts का उपयोग करके एक 3D कॉलम चार्ट बनाओ","<script src='https://code.highcharts.com/highcharts.js'></script><script src='https://code.highcharts.com/highcharts-3d.js'></script><div id='container'></div><script>Highcharts.chart('container', {chart:{type:'column', options3d:{enabled:true}}, ...});</script>"
"Leaflet.js کا उपयोग करके एक इंटरैक्टिव मैप बनाओ","<link rel='stylesheet' href='https://unpkg.com/leaflet/dist/leaflet.css' /><script src='https://unpkg.com/leaflet/dist/leaflet.js'></script><div id='mapid' style='height: 200px;'></div><script>var mymap = L.map('mapid').setView([26.84, 80.94], 13); L.marker([26.84, 80.94]).addTo(mymap);</script>"
"एक Flask API बनाओ जो चार्ट के लिए डायनामिक डेटा लौटाए","@app.route('/api/monthly-sales')\ndef monthly_sales_data():\n    data = {'labels':['Jan','Feb'], 'values':[100,120]}\n    return jsonify(data)"
"Chart.js में एक मिक्सड-टाइप (mixed-type) चार्ट बनाओ (बार और लाइन)","<script>new Chart(ctx, {data: {datasets:[{type:'bar', label:'Bar Data', data:[10,20]},{type:'line', label:'Line Data', data:[15,15]}]}})</script>"
"एक चार्ट में एक बटन से नया डेटा जोड़ो","<script>function addDataToChart(chart, label, data) { chart.data.labels.push(label); chart.data.datasets.forEach((dataset) => { dataset.data.push(data); }); chart.update(); }</script>"
"एक चार्ट से डेटा को हटाओ","<script>function removeDataFromChart(chart) { chart.data.labels.pop(); chart.data.datasets.forEach((dataset) => { dataset.data.pop(); }); chart.update(); }</script>"
"D3.js में एक ब्रश करने योग्य (brushable) स्कैटर प्लॉट बनाओ","<script>const brush = d3.brush().extent([[0,0],[w,h]]).on('start brush end', brushed); svg.append('g').call(brush);</script>"
"एक चार्ट को responsive बनाओ","options: { responsive: true, maintainAspectRatio: false }"
"D3.js में एक ट्रीमैप (treemap) लेआउट बनाओ","<script>const root = d3.hierarchy(data).sum(d => d.value); const treemapLayout = d3.treemap().size([500, 500]).padding(1); treemapLayout(root);</script>"
"Plotly.js का उपयोग करके एक 3D सरफेस प्लॉट बनाओ","<script src='https://cdn.plot.ly/plotly-latest.min.js'></script><div id='myDiv3D'></div><script>Plotly.newPlot('myDiv3D', data, layout);</script>"
"Chart.js में एक टाइमलाइन चार्ट बनाओ","<script>new Chart(ctx, {type:'bar', options:{indexAxis:'y', ...}})</script>"
"एक स्पार्कलाइन (Sparkline) चार्ट बनाओ",""
"एक सनबर्स्ट (Sunburst) चार्ट का कॉन्सेप्ट","// A hierarchical chart, similar to a treemap, but represented by a radial layout. Each level of the hierarchy is a ring."
"एक प्रोडक्ट कार्ड कॉम्पोनेन्ट बनाओ","<div class='product-card' style='border:1px solid #ddd; width:200px; text-align:center;'><img src='product.jpg' width='100%' alt='Product'><h3 class='product-title'>Product Name</h3><p class='product-price'>$19.99</p><button>Add to Cart</button></div>"
"एक प्रोडक्ट ग्रिड लेआउट बनाओ","<div class='product-grid' style='display:grid; grid-template-columns:repeat(auto-fit, minmax(200px, 1fr)); gap:15px;'>...product cards here...</div>"
"एक 'Add to Cart' बटन बनाओ जो एक आइटम को कार्ट में जोड़े","<button onclick=""addToCart({id: 'prod123', name: 'Cool Laptop', price: 999.99})"">Add to Cart</button><script>let shoppingCart=[]; function addToCart(product){shoppingCart.push(product); console.log('Cart:', shoppingCart);}</script>"
"शॉपिंग कार्ट में आइटम्स की संख्या दिखाने वाला एक आइकन बनाओ","<div id='cart-icon-wrapper'>🛒 Cart (<span id='cart-item-count'>0</span>)</div>"
"शॉपिंग कार्ट का UI बनाओ जिसमें आइटम्स और टोटल हो","<div class='shopping-cart-summary'><h2>Your Cart</h2><ul id='cart-items-list'><li>Laptop - $999.99</li></ul><p style='font-weight:bold;'>Total: $<span id='cart-total-price'>999.99</span></p></div>"
"जावास्क्रिप्ट में शॉपिंग कार्ट के टोटल की गणना करो","function calculateCartTotal(){\n  let total = shoppingCart.reduce((sum, item) => sum + item.price, 0);\n  document.getElementById('cart-total-price').innerText = total.toFixed(2);\n}"
"एक प्रोडक्ट की मात्रा (quantity) को बदलने के लिए एक इनपुट बनाओ","<input type='number' value='1' min='1' onchange='updateProductQuantityInCart(123, this.value)'>"
"एक चेकआउट फॉर्म का ढाँचा बनाओ","<form id='checkout-form'><fieldset><legend>Shipping Address</legend><input placeholder='Full Name'>...</fieldset><fieldset><legend>Payment Details</legend><input placeholder='Card Number'>...</fieldset><button type='submit'>Place Order</button></form>"
"प्रोडक्ट्स को फ़िल्टर करने के लिए एक साइडबार बनाओ","<aside><h3>Filters</h3><div class='filter-group'><h4>Category</h4><input type='checkbox'> Electronics<br><input type='checkbox'> Books</div></aside>"
"एक प्रोडक्ट सर्च बार बनाओ","<input type='search' placeholder='Search for products...'>"
"एक प्रोडक्ट पेज पर इमेज थंबनेल गैलरी बनाओ","<img id='main-product-image' src='img-large-1.jpg' width='300'><div class='thumbnails'><img src='img-thumb-1.jpg' onclick=""document.getElementById('main-product-image').src='img-large-1.jpg'""> <img src='img-thumb-2.jpg' onclick=""document.getElementById('main-product-image').src='img-large-2.jpg'""></div>"
"एक स्टार रेटिंग डिस्प्ले कॉम्पोनेन्ट बनाओ (जैसे 4.5 स्टार्स)","<div class='star-rating' style='color:orange;'><span>★★★★</span><span style='color:grey'>★</span> (4.5)</div>"
"एक 'Sale' (बिक्री) बैज बनाओ","<div style='position:relative; display:inline-block;'><img src='product.jpg' width='150'><span style='position:absolute; top:10px; left:10px; background:red; color:white; padding:5px; border-radius:3px;'>SALE</span></div>"
"एक 'Out of Stock' (स्टॉक में नहीं) लेबल दिखाओ","<button disabled style='background:grey; color:white;'>Out of Stock</button>"
"एक इच्छा-सूची (wishlist) में जोड़ने के लिए एक बटन बनाओ","<button onclick='addToWishlist(123)'>❤️ Add to Wishlist</button>"
"प्रोडक्ट्स को कीमत के आधार पर सॉर्ट करने के लिए एक ड्रॉपडाउन","<label>Sort by:</label><select onchange='sortProductsBy(this.value)'><option value='price_asc'>Price: Low to High</option><option value='price_desc'>Price: High to Low</option></select>"
"एक प्रोडक्ट की तुलना (compare) करने के लिए चेकबॉक्स बनाओ","<label><input type='checkbox' onchange='compareProduct(123, this.checked)'> Compare</label>"
"एक 'Quick View' मोडल (modal) बनाओ","<button onclick=""showQuickViewModal(123)"">Quick View</button>"
"एक 'Related Products' (संबंधित उत्पाद) सेक्शन बनाओ","<section><h2>Related Products</h2><div class='product-grid'>...product cards...</div></section>"
"एक ई-कॉमर्स ब्रेडक्रंब (breadcrumb) नेविगेशन बनाओ","<nav aria-label='breadcrumb'>Home > Electronics > Laptops</nav>"
"एक डिस्काउंट कूपन अप्लाई करने के लिए एक इनपुट फील्ड बनाओ","<input placeholder='Enter Coupon Code'><button>Apply Coupon</button>"
"शिपिंग विकल्पों के लिए रेडियो बटन बनाओ","<div><label><input type='radio' name='shipping_option'> Standard Shipping ($5.00)</label></div><div><label><input type='radio' name='shipping_option'> Express Shipping ($15.00)</label></div>"
"एक प्रोडक्ट ज़ूम इफ़ेक्ट बनाओ जो होवर पर काम करे","<style>.zoom-image-container:hover img{transform:scale(1.2);}</style><div class='zoom-image-container' style='width:200px; overflow:hidden;'><img src='product.jpg' style='transition:transform 0.3s;'></div>"
"एक 'Recently Viewed' (हाल ही में देखे गए) प्रोडक्ट्स का सेक्शन बनाओ","<section><h2>Your Recently Viewed Items</h2><div id='recently-viewed-items-container'></div></section>"
"एक प्रोडक्ट के लिए कस्टमर रिव्यु (review) सेक्शन बनाओ","<div class='customer-reviews'><h3>Customer Reviews (4.5/5)</h3><div class='review'><strong>Amit</strong> - ★★★★☆ - <p>Great product!</p></div></div>"
"एक रिव्यु सबमिट करने के लिए एक फॉर्म बनाओ","<form><label>Your Rating:</label><select><option>1</option><option>2</option>...</select><br><label>Your Review:</label><textarea></textarea><br><button>Submit Review</button></form>"
"एक 'Best Sellers' (सबसे ज़्यादा बिकने वाले) सेक्शन बनाओ","<section><h2>Our Best Sellers</h2>...</section>"
"एक 'New Arrivals' (नए आगमन) सेक्शन बनाओ","<section><h2>New Arrivals</h2>...</section>"
"एक प्रोडक्ट के विभिन्न रंगों (color swatches) को दिखाओ","<div class='color-swatches'><span style='background:red; width:25px; height:25px; display:inline-block; border:1px solid #ccc; cursor:pointer;'></span> <span style='background:blue; ...'></span></div>"
"प्रोडक्ट के विभिन्न साइज़ चुनने के लिए बटन बनाओ","<div class='size-selector'><button>S</button> <button>M</button> <button>L</button> <button>XL</button></div>"
"एक 'Add to Cart' कन्फर्मेशन मैसेज दिखाओ","<div id='add-to-cart-confirmation' style='display:none; color:green;'>Product added to cart successfully!</div>"
"शॉपिंग कार्ट से एक आइटम को हटाने के लिए एक बटन","<li id='cart-item-123'>Laptop <button onclick=""document.getElementById('cart-item-123').remove()"">Remove</button></li>"
"चेकआउट पेज पर आर्डर का सारांश (order summary) दिखाओ","<div class='order-summary'><h3>Order Summary</h3><p>Subtotal: $999.99</p><p>Shipping: $5.00</p><strong>Total: $1004.99</strong></div>"
"एक 'Notify Me' फॉर्म बनाओ जब प्रोडक्ट स्टॉक में न हो","<p>This item is out of stock.</p><form><label>Enter your email to be notified:</label><input type='email'><button>Notify Me</button></form>"
"एक 'Size Chart' (साइज़ चार्ट) लिंक बनाओ जो एक मोडल खोले","<a href='#' onclick=""showSizeChartModal()"">View Size Chart</a>"
"एक 'Gift Wrap' (गिफ्ट रैप) विकल्प के लिए एक चेकबॉक्स","<label><input type='checkbox'> Add gift wrap (+$2.00)</label>"
"एक प्रोडक्ट की डिलीवरी की अनुमानित तारीख दिखाओ","<p style='color:green;'>Estimated delivery: October 15, 2025</p>"
"सोशल मीडिया पर एक प्रोडक्ट को शेयर करने के लिए बटन","<button>Share on Facebook</button> <button>Share on Twitter</button>"
"एक 'Customers who bought this also bought' सेक्शन","<section><h2>Customers also bought</h2>...</section>"
"एक प्रोडक्ट के लिए FAQ (प्रश्न-उत्तर) सेक्शन","<section><h2>Questions & Answers</h2><details><summary>Is this waterproof?</summary><p>No, it is water-resistant.</p></details></section>"
"एक 'Terms and Conditions' चेकबॉक्स जो चेकआउट पर ज़रूरी हो","<label><input type='checkbox' required> I have read and agree to the Terms and Conditions.</label>"
"पेमेंट मेथड (Credit Card, PayPal) चुनने के लिए आइकन","<div><img src='visa_icon.png' alt='Visa'> <img src='mastercard_icon.png' alt='Mastercard'> <img src='paypal_icon.png' alt='PayPal'></div>"
"एक 'Track Order' पेज का UI बनाओ","<form><label>Enter your Order ID:</label><input type='text' placeholder='eg. 12345'><button>Track Order</button></form>"
"एक 'My Account' पेज का डैशबोर्ड UI","<div class='account-dashboard'><h3>My Account</h3><ul><li><a href='/orders'>Order History</a></li><li><a href='/profile'>My Profile</a></li><li><a href='/logout'>Logout</a></li></ul></div>"
"एक 'Order History' टेबल बनाओ","<table border='1'><thead><tr><th>Order ID</th><th>Date</th><th>Total</th><th>Status</th></tr></thead><tbody><tr><td>#123</td><td>2025-10-01</td><td>$50</td><td>Shipped</td></tr></tbody></table>"
"एक 'Write a Review' बटन जो एक फॉर्म खोले","<button>Write a Review for this product</button>"
"एक इनवॉइस (invoice) का HTML टेम्पलेट बनाओ","<div class='invoice-box' style='border:1px solid; padding:20px;'><h1>Invoice</h1>...</div>"
"एक 'Abandoned Cart' ईमेल का कॉन्सेप्ट","// An automated email sent to a user who has added items to their shopping cart but did not complete the purchase, reminding them of their items."
"अपसेल (Upsell) और क्रॉस-सेल (Cross-sell) का कॉन्सेप्ट","// Upsell: Encouraging a customer to buy a more expensive, upgraded version of a product. Cross-sell: Encouraging a customer to buy related or complementary items."
"पेज लोड होने पर सभी ब्लॉग पोस्ट्स को फेच करो और दिखाओ","""<div id='posts-container'></div>\n<script>\nwindow.addEventListener('DOMContentLoaded', () => {\n  fetch('/api/posts').then(res => res.json()).then(posts => {\n    const container = document.getElementById('posts-container');\n    posts.forEach(post => {\n      container.innerHTML += `<h2><a href='#' onclick='fetchPost(${post.id})'>${post.title}</a></h2>`;\n    });\n  });\n});\n</script>"""
"एक लिंक पर क्लिक करके एक सिंगल पोस्ट का कंटेंट फेच करो और दिखाओ","""<div id='single-post-view'></div>\n<script>\nfunction fetchPost(id) {\n  fetch(`/api/posts/${id}`).then(res => res.json()).then(post => {\n    document.getElementById('single-post-view').innerHTML = `<h1>${post.title}</h1><p>${post.content}</p>`;\n  });\n}\n</script>"""
"एक नया ब्लॉग पोस्ट बनाने के लिए एक HTML फॉर्म बनाओ","""<form id='new-post-form'>\n  <input id='title-input' placeholder='Title' required>\n  <br><br>\n  <textarea id='content-input' placeholder='Content' required></textarea>\n  <br><br>\n  <button type='submit'>Create Post</button>\n</form>"""
"AJAX का उपयोग करके नया पोस्ट बनाने वाले फॉर्म को सबमिट करो","""<script>\ndocument.getElementById('new-post-form').addEventListener('submit', event => {\n  event.preventDefault();\n  const title = document.getElementById('title-input').value;\n  const content = document.getElementById('content-input').value;\n  fetch('/api/posts', {\n    method: 'POST',\n    headers: {'Content-Type': 'application/json'},\n    body: JSON.stringify({title: title, content: content})\n  }).then(res => res.json()).then(data => console.log('New post created with ID:', data.id));\n});\n</script>"""
"एक पोस्ट को डिलीट करने के लिए एक बटन बनाओ","""<button onclick=""deletePost(5)"">Delete Post 5</button>\n<script>\nfunction deletePost(id) {\n  if(confirm('Are you sure you want to delete this post?')){\n    fetch(`/api/posts/${id}`, { method: 'DELETE' }).then(() => alert('Post deleted'));\n  }\n}\n</script>"""
"एक पोस्ट को एडिट करने के लिए एक फॉर्म दिखाओ","""<button onclick=""showEditForm(5)"">Edit Post 5</button>\n<div id='edit-form-container'></div>\n<script>\nfunction showEditForm(id) {\n    // fetch post data and populate an edit form in the container\n}\n</script>"""
"जावास्क्रिप्ट से एक डायनामिक सर्च फंक्शन बनाओ","""<input placeholder='Search blog posts...' onkeyup=""fetch('/api/search?q='+this.value).then(res => res.json()).then(results => {\n  // ... code to display search results on the page ...\n});"">"""
"पेजिनेशन बटन्स (Next/Previous) के लिए जावास्क्रिप्ट लिखो","""let currentPage = 1;\nfunction loadPostsForPage(page) {\n  fetch(`/api/posts-paginated?page=${page}`).then(res => res.json()).then(data => {\n    // ... display posts for the given page ...\n    currentPage = page;\n  });\n}"""
"एक 'Load More' बटन बनाओ जो और पोस्ट्स लोड करे","""<button id='load-more-btn' onclick=""loadPostsForPage(currentPage + 1)"">Load More</button>"""
"एक पोस्ट पर कमेंट करने के लिए एक फॉर्म बनाओ","""<form onsubmit=""addCommentToPost(5, this.comment.value); return false;"">\n  <input name='comment' placeholder='Write a comment...'>\n  <button type='submit'>Submit Comment</button>\n</form>"""
"एक पोस्ट के सभी कमेंट्स को फेच करो और दिखाओ","""<ul id='comments-list-for-post-5'></ul>\n<script>\nfetch('/api/posts/5/comments').then(res => res.json()).then(comments => {\n  const list = document.getElementById('comments-list-for-post-5');\n  comments.forEach(comment => { list.innerHTML += `<li>${comment.text}</li>`; });\n});\n</script>"""
"एक 'Like' बटन बनाओ जो API को कॉल करे और लाइक काउंट अपडेट करे","""<p>Likes: <span id='like-count-for-post-5'>10</span></p>\n<button onclick=""fetch('/api/posts/5/like', {method:'POST'}).then(res=>res.json()).then(data=>document.getElementById('like-count-for-post-5').innerText=data.likes);"">👍 Like</button>"""
"यूज़र रजिस्ट्रेशन के लिए एक AJAX फॉर्म बनाओ","""<form id='registration-form'>...</form>\n<script>// JavaScript to submit registration form data as a JSON object via a fetch POST request</script>"""
"यूज़र लॉगइन के लिए एक AJAX फॉर्म बनाओ और JWT टोकन को localStorage में सेव करो","""<script>\n// ... inside form submit event listener ...\nfetch('/api/login', ...).then(res => res.json()).then(data => {\n  if (data.token) {\n    localStorage.setItem('jwt_token', data.token);\n    window.location.href = '/dashboard'; // redirect to dashboard\n  }\n});\n</script>"""
"हर प्रोटेक्टेड API रिक्वेस्ट के साथ JWT टोकन भेजो","""<script>\nconst token = localStorage.getItem('jwt_token');\nfetch('/api/protected-route', { \n    headers: {\n        'Authorization': `Bearer ${token}`\n    }\n});\n</script>"""
"एक लॉगआउट बटन बनाओ जो JWT टोकन को localStorage से हटाए","""<button onclick=""localStorage.removeItem('jwt_token'); window.location.href = '/login';"">Logout</button>"""
"Markdown कंटेंट को HTML में बदलने के लिए एक लाइब्रेरी (जैसे Showdown.js) का उपयोग करो","""<script src='https://cdnjs.cloudflare.com/ajax/libs/showdown/2.1.0/showdown.min.js'></script>\n<script>\n  const converter = new showdown.Converter();\n  const markdownText = '# Hello\\n**This is bold.**';\n  const html = converter.makeHtml(markdownText);\n</script>"""
"API से मिले Markdown कंटेंट को पेज पर रेंडर करो","""fetch('/api/posts/1').then(res => res.json()).then(post => {\n  const converter = new showdown.Converter();\n  const htmlContent = converter.makeHtml(post.content);\n  document.getElementById('post-content-div').innerHTML = htmlContent;\n});"""
"तारीख को एक रीडेबल फॉर्मेट में दिखाने के लिए एक जावास्क्रिप्ट फंक्शन","""function formatReadableDate(isoString) {\n  return new Date(isoString).toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' });\n}"""
"एक लोडिंग स्पिनर दिखाओ जब API कॉल चल रही हो","""function fetchDataWithLoader(){\n  document.getElementById('loader-spinner').style.display = 'block';\n  fetch('...').finally(() => {\n    document.getElementById('loader-spinner').style.display = 'none';\n  });\n}"""
"API से एरर आने पर यूज़र को एक एरर मैसेज दिखाओ","""<p id='error-display-area' style='color:red;'></p>\n<script>\nfetch('/api/invalid-endpoint').catch(error => {\n  document.getElementById('error-display-area').innerText = 'An error occurred while loading data.';\n});\n</script>"""
"एक 'Single Page Application' (SPA) का बेसिक राउटर बनाओ","""<script>\nwindow.onhashchange = function() {\n  const page = window.location.hash.substring(1);\n  // Logic to show content based on the 'page' variable (e.g., #/about, #/contact)\n}\n</script>"""
"वेबसाइट में एक सिंपल डार्क मोड टॉगल बनाओ","""<button onclick=""document.body.classList.toggle('dark-mode')"">Toggle Dark Mode</button>\n<style>.dark-mode { background: #333; color: white; }</style>"""
"एक ब्लॉग पोस्ट के लिए 'टैग्स' की लिस्ट दिखाओ","""// Assuming API returns post.tags = [{name:'tech'}, {name:'python'}]\nconst tagsHtml = post.tags.map(tag => `<span class='tag'>${tag.name}</span>`).join(' ');"""
"एक ब्लॉग पोस्ट के लेखक का नाम दिखाओ","""// Assuming API returns post.author = {username: 'Amit'}\ndocument.getElementById('author-name').innerText = `By ${post.author.username}`;"""
"एक नया पोस्ट बनाने के बाद पेज को री-रेंडर करो (बिना रीलोड किए)","""fetch('/api/posts', {method:'POST',...}).then(() => {\n  // Clear the form and call the function that fetches and renders all posts again\n  fetchAllPosts();\n});"""
"URL से पोस्ट ID निकालो और उस पोस्ट को फेच करो","""<script>\nconst pathParts = window.location.pathname.split('/');\nconst postId = pathParts[pathParts.length - 1];\nif(postId && !isNaN(postId)) {\n  fetchPost(postId);\n}\n</script>"""
"WebSocket کا उपयोग करके रियल-टाइम कमेंट्स दिखाओ","""<script>\nconst socket = io(); // from socket.io.js\nsocket.on('new_comment_for_post_5', function(comment) {\n  // Add the new comment to the comments list dynamically without reloading the page\n});\n</script>"""
"WebSocket से कनेक्ट करने के लिए जावास्क्रिप्ट कोड","""<script src='https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.0.1/socket.io.js'></script>\n<script>var socket = io.connect('http://' + document.domain + ':' + location.port);</script>"""
"यूज़र को एक पोस्ट एडिट करने के लिए एक इन-प्लेस एडिटर दो (`contenteditable`)","""<div id='content-div' ondblclick=""this.contentEditable=true; this.focus();"">Double click to edit this text.</div>"""
"फ्रंटएंड पर फॉर्म वैलिडेशन (ईमेल) करो","""<form onsubmit=""const email = this.email.value; if(!email.includes('@') || !email.includes('.')){alert('Please enter a valid email address'); return false;}""><input name='email' type='email'></form>"""
"API से मिले पेजिनेशन डेटा को हैंडल करो और बटन को डिसेबल करो","""// API returns { 'posts': [...], 'has_next': true, 'next_page': 3 }\nif (!data.has_next) {\n  document.getElementById('load-more-button').disabled = true;\n}"""
"एक इमेज अपलोड फॉर्म बनाओ जो `FormData` का उपयोग करे","""<input type='file' id='image-file-input'>\n<script>\nfunction uploadImage(){\n  const fileInput = document.getElementById('image-file-input');\n  if (fileInput.files.length > 0) {\n      const formData = new FormData();\n      formData.append('image', fileInput.files[0]);\n      fetch('/api/upload', {method:'POST', body:formData});\n  }\n}\n</script>"""
"एक 'infinite scroll' फीचर बनाओ","""<script>\nconst contentEl = document.getElementById('content');\nwindow.addEventListener('scroll', () => {\n  const { scrollTop, scrollHeight, clientHeight } = document.documentElement;\n  if (scrollTop + clientHeight >= scrollHeight - 5) {\n    // Load more posts when user is near the bottom\n  }\n});\n</script>"""
"एक 'debounce' फंक्शन का उपयोग करके सर्च API कॉल्स को ऑप्टिमाइज़ करो","""<script>\nfunction debounce(func, delay=300) {\n  let timeout;\n  return function(...args) {\n    clearTimeout(timeout);\n    timeout = setTimeout(() => { func.apply(this, args); }, delay);\n  };\n}\nconst efficientSearch = debounce(searchTerm => fetch('/api/search?q='+searchTerm));\n</script>"""
"एक 'throttle' फंक्शन का उपयोग करके स्क्रॉल इवेंट्स को ऑप्टिमाइज़ करो","""<script>\nfunction throttle(func, limit) { \n  let inThrottle;\n  return function() {\n    if (!inThrottle) {\n      func.apply(this, arguments);\n      inThrottle = true;\n      setTimeout(() => inThrottle = false, limit);\n    }\n  }\n}\nwindow.addEventListener('scroll', throttle(() => console.log('Scrolled!'), 100));\n</script>"""
"एक ब्राउज़र नोटिफिकेशन (Notification API) भेजो","""<button onclick=""Notification.requestPermission().then(permission => { if (permission === 'granted') { new Notification('New Blog Post Available!'); } });"">Enable Notifications</button>"""
"एक पोस्ट को शेयर करने के लिए Web Share API का उपयोग करो","""<button onclick=""if(navigator.share){navigator.share({title: 'My Awesome Blog Post', url: '/posts/1'})} else {alert('Share not supported')}"">Share Post</button>"""
"फ्रंटएंड पर एक JSON ऑब्जेक्ट को सुंदर तरीके से दिखाओ","""<pre id='json-display-output'></pre>\n<script>\nconst myJsonObject = { id: 1, name: 'Amit', is_active: true };\ndocument.getElementById('json-display-output').textContent = JSON.stringify(myJsonObject, null, 2);\n</script>"""
"एक पोस्ट को localStorage का उपयोग करके 'बुकमार्क' करो","""<button onclick=""localStorage.setItem('bookmarked_post_1', 'true')"">Bookmark Post 1</button>"""
"एक लोडिंग स्केलेटन (skeleton) स्क्रीन का HTML/CSS बनाओ","""<style>@keyframes pulse{...} .skeleton-box{animation: pulse 1.5s infinite; background:#e0e0e0;}</style><div class='post-skeleton'><div class='skeleton-box' style='height:150px;'></div><div class='skeleton-box' style='height:20px; margin-top:10px;'></div></div>"""
"एक पोस्ट के 'पढ़ने का समय' (reading time) कैलकुलेट करो","""<script>\nfunction calculateReadingTime(text) {\n  const wordsPerMinute = 225;\n  const wordCount = text.trim().split(/\s+/).length;\n  const readingTime = Math.ceil(wordCount / wordsPerMinute);\n  return `${readingTime} min read`;\n}\n</script>"""
"एक ब्लॉग पोस्ट के लिए एक 'Table of Contents' डायनामिक रूप से जेनरेट करो","""<nav><h4>Contents</h4><ul id='table-of-contents'></ul></nav>\n<script>\ndocument.querySelectorAll('main h2').forEach(heading => {\n  const id = heading.textContent.toLowerCase().replace(/ /g, '-');\n  heading.id = id;\n  document.getElementById('table-of-contents').innerHTML += `<li><a href='#${id}'>${heading.textContent}</a></li>`;\n});\n</script>"""
"यूज़र से एक कन्फर्मेशन डायलॉग (dialog) दिखाओ","""<button onclick=""if(confirm('Are you absolutely sure you want to delete this?')){ console.log('Deleting...'); }"">Delete Item</button>"""
"Fetch API में `AbortController` का उपयोग करके एक रिक्वेस्ट को कैंसिल करो","""<script>\nconst controller = new AbortController();\nconst signal = controller.signal;\nfetch('...', {signal});\n\n// To cancel the request, for example after a timeout:\n// controller.abort();\n</script>"""
"एक नया पोस्ट बनाने के बाद यूज़र को उस पोस्ट के पेज पर रीडायरेक्ट करो","""fetch('/api/posts', {method:'POST',...}).then(res => res.json()).then(data => {\n  // Redirect to the new post's page\n  window.location.href = `/posts/${data.id}`;\n});"""
"एक API कॉल के लिए एक टाइमआउट सेट करो","""<script>\nconst controller = new AbortController();\nconst timeoutId = setTimeout(() => controller.abort(), 5000); // 5 second timeout\n\nfetch('/api/slow-endpoint', {signal: controller.signal})\n  .catch(error => { if (error.name === 'AbortError') console.error('Request timed out!'); })\n  .finally(() => clearTimeout(timeoutId));\n</script>"""
"एक सिंपल WYSIWYG एडिटर का ढाँचा (Bold, Italic)","""<div id='editor' contenteditable='true' style='border:1px solid #ccc; height:150px; padding:5px;'>Type your text here...</div>\n<button onclick=""document.execCommand('bold')""><b>B</b></button>\n<button onclick=""document.execCommand('italic')""><i>I</i></button>"""
"एक ब्लॉग के लिए User और Post डेटाबेस मॉडल बनाओ","""# In models.py\nfrom flask_sqlalchemy import SQLAlchemy\ndb = SQLAlchemy()\n\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    username = db.Column(db.String(80), unique=True, nullable=False)\n\nclass Post(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    title = db.Column(db.String(120), nullable=False)\n    content = db.Column(db.Text, nullable=False)\n    author_id = db.Column(db.Integer, db.ForeignKey('user.id'))"""
"Flask ऐप को SQLAlchemy डेटाबेस के साथ कॉन्फ़िगर करो","""# In app.py\nfrom flask import Flask\nfrom models import db\n\napp = Flask(__name__)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///blog.db'\ndb.init_app(app)"""
"सभी ब्लॉग पोस्ट्स को लौटाने वाला एक API एंडपॉइंट बनाओ","""@app.route('/api/posts', methods=['GET'])\ndef get_all_posts():\n    posts = Post.query.all()\n    return jsonify([{'id': p.id, 'title': p.title} for p in posts])"""
"एक सिंगल ब्लॉग पोस्ट को ID से लौटाने वाला API बनाओ","""@app.route('/api/posts/<int:post_id>', methods=['GET'])\ndef get_post(post_id):\n    post = Post.query.get_or_404(post_id)\n    return jsonify({'title': post.title, 'content': post.content})"""
"एक नया ब्लॉग पोस्ट बनाने के लिए एक API एंडपॉइंट बनाओ","""@app.route('/api/posts', methods=['POST'])\ndef create_post():\n    data = request.json\n    new_post = Post(title=data['title'], content=data['content'])\n    db.session.add(new_post)\n    db.session.commit()\n    return jsonify({'id': new_post.id}), 201"""
"एक ब्लॉग पोस्ट को अपडेट करने के लिए एक API एंडपॉइंट बनाओ","""@app.route('/api/posts/<int:post_id>', methods=['PUT'])\ndef update_post(post_id):\n    post = Post.query.get_or_404(post_id)\n    data = request.json\n    post.title = data.get('title', post.title)\n    post.content = data.get('content', post.content)\n    db.session.commit()\n    return jsonify({'message': 'Post updated'})"""
"एक ब्लॉग पोस्ट को डिलीट करने के लिए एक API एंडपॉइंट बनाओ","""@app.route('/api/posts/<int:post_id>', methods=['DELETE'])\ndef delete_post(post_id):\n    post = Post.query.get_or_404(post_id)\n    db.session.delete(post)\n    db.session.commit()\n    return jsonify({'message': 'Post deleted'})"""
"Flask-Migrate کا उपयोग करके डेटाबेस माइग्रेशन सेटअप करो","""from flask_migrate import Migrate\nmigrate = Migrate(app, db)"""
"Alembic माइग्रेशन स्क्रिप्ट बनाओ","flask db migrate -m 'Initial migration.'"
"Alembic माइग्रेशन को डेटाबेस पर अप्लाई करो","flask db upgrade"
"एक Flask कमांड बनाओ जो डेटाबेस को इनिशियलाइज़ करे","""@app.cli.command('init-db')\ndef init_db_command():\n    db.create_all()\n    print('Initialized the database.')"""
"ब्लॉग के लिए एक 'Comment' मॉडल बनाओ","""class Comment(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    text = db.Column(db.String(200), nullable=False)\n    post_id = db.Column(db.Integer, db.ForeignKey('post.id'))"""
"एक पोस्ट के सभी कमेंट्स को लौटाने वाला API बनाओ","""@app.route('/api/posts/<int:post_id>/comments')\ndef get_comments(post_id):\n    comments = Comment.query.filter_by(post_id=post_id).all()\n    return jsonify([{'text': c.text} for c in comments])"""
"एक पोस्ट पर नया कमेंट करने के लिए API बनाओ","""@app.route('/api/posts/<int:post_id>/comments', methods=['POST'])\ndef add_comment(post_id):\n    new_comment = Comment(text=request.json['text'], post_id=post_id)\n    db.session.add(new_comment)\n    db.session.commit()\n    return jsonify({'id': new_comment.id})"""
"ब्लॉग पोस्ट मॉडल में एक 'created_at' फील्ड जोड़ो","""created_at = db.Column(db.DateTime, default=datetime.utcnow)"""
"पोस्ट्स को लेटेस्ट पहले के क्रम में क्वेरी करो","""posts = Post.query.order_by(Post.created_at.desc()).all()"""
"एक API बनाओ जो पोस्ट्स को पेजिनेट (paginate) करे","""@app.route('/api/posts-paginated')\ndef get_paginated_posts():\n    page = request.args.get('page', 1, type=int)\n    pagination = Post.query.paginate(page=page, per_page=5)\n    return jsonify([...]) # Return paginated data"""
"एक यूज़र रजिस्ट्रेशन के लिए API एंडपॉइंट","""@app.route('/api/register', methods=['POST'])\ndef register():\n    # ... create user and hash password ...\n    return jsonify({'message': 'User created'})"""
"एक यूज़र लॉगइन के लिए API एंडपॉइंट जो JWT टोकन लौटाए","""@app.route('/api/login', methods=['POST'])\ndef login():\n    # ... check credentials ...\n    # token = create_jwt_token(...)\n    return jsonify({'token': token})"""
"एक प्रोटेक्टेड API रूट बनाओ जो JWT टोकन की जाँच करे","""@app.route('/api/protected')\n@jwt_required()\ndef protected():\n    return jsonify({'message': 'This is a protected route'})"""
"ब्लॉग के लिए एक 'Tag' मॉडल बनाओ (Many-to-Many)","""tags = db.Table('tags', ...)\nclass Post(db.Model):\n    tags = db.relationship('Tag', secondary=tags, backref='posts')"""
"एक पोस्ट को उसके टैग्स के साथ लौटाने वाला API","""@app.route('/api/posts/<int:id>')\ndef get_post_with_tags(id):\n    post = Post.query.get(id)\n    return jsonify({'title': post.title, 'tags': [tag.name for tag in post.tags]})"""
"एक सर्च API बनाओ जो टाइटल और कंटेंट में खोजे","""@app.route('/api/search')\ndef search():\n    query = request.args.get('q')\n    results = Post.query.filter(Post.title.contains(query) | Post.content.contains(query)).all()\n    return jsonify([...])"""
"Flask-CORS का उपयोग करके API पर CORS इनेबल करो","""from flask_cors import CORS\nCORS(app, resources={r'/api/*': {'origins': '*'}})"""
"Flask-SQLAlchemy में रिलेशनशिप के लिए `back_populates` का उपयोग करो","""class User(db.Model):\n    posts = db.relationship('Post', back_populates='author')\n\nclass Post(db.Model):\n    author = db.relationship('User', back_populates='posts')"""
"एक ब्लॉग पोस्ट पर 'लाइक' करने के लिए API","""@app.route('/api/posts/<int:id>/like', methods=['POST'])\ndef like_post(id):\n    post = Post.query.get(id)\n    post.likes += 1\n    db.session.commit()\n    return jsonify({'likes': post.likes})"""
"ब्लॉग पोस्ट मॉडल में `likes` कॉलम जोड़ो","""likes = db.Column(db.Integer, default=0)"""
"ब्लॉग पोस्ट्स को लाइक्स की संख्या के आधार पर सॉर्ट करो","""popular_posts = Post.query.order_by(Post.likes.desc()).limit(5).all()"""
"Flask में यूनिट टेस्ट के लिए एक टेस्ट डेटाबेस कॉन्फ़िगर करो","""app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///:memory:'"""
"एक API एंडपॉइंट का pytest से टेस्ट लिखो","""def test_get_posts(client):\n    response = client.get('/api/posts')\n    assert response.status_code == 200"""
"ब्लूप्रिंट का उपयोग करके एडमिन सेक्शन बनाओ","""admin_bp = Blueprint('admin', __name__, url_prefix='/admin')"""
"एक API बनाओ जो YAML डेटा लौटाए","""import yaml\n@app.route('/api/data.yaml')\ndef get_yaml():\n    data = {'a': 1}\n    return Response(yaml.dump(data), mimetype='text/yaml')"""
"Flask में एक कस्टम CLI कमांड बनाओ","""@app.cli.command('create-user')\n@click.argument('name')\ndef create_user(name):\n    # ... logic to create user ..."""
"SQLAlchemy में eager लोडिंग का उपयोग करो","""posts = Post.query.options(db.joinedload(Post.author)).all()"""
"SQLAlchemy में lazy लोडिंग का उपयोग करो","""# This is the default behavior\npost = Post.query.get(1)\n# The author is fetched from the DB only when you access it:\nprint(post.author.name)"""
"एक API बनाओ जो एक फाइल डाउनलोड करवाए","""from flask import send_file\n@app.route('/download')\ndef download_file():\n    return send_file('my_file.zip', as_attachment=True)"""
"अपने Flask ऐप के लिए एक `config.py` फाइल बनाओ","""# config.py\nclass Config:\n    SECRET_KEY = os.environ.get('SECRET_KEY')\n    SQLALCHEMY_DATABASE_URI = os.environ.get('DATABASE_URI')"""
"फैक्ट्री पैटर्न का उपयोग करके Flask ऐप बनाओ","""def create_app(config_class=Config):\n    app = Flask(__name__)\n    app.config.from_object(config_class)\n    db.init_app(app)\n    return app"""
"ब्लॉग पोस्ट में Markdown कंटेंट को सपोर्ट करो","""import markdown\n@app.route('/posts/<int:id>')\ndef show_post(id):\n    post = Post.query.get(id)\n    post.content_html = markdown.markdown(post.content)\n    return render_template('post.html', post=post)"""
"एक API बनाओ जो इमेज अपलोड को हैंडल करे","""@app.route('/api/upload', methods=['POST'])\ndef upload_image():\n    file = request.files['image']\n    # ... save file securely ...\n    return jsonify({'url': file_url})"""
"ब्लॉग पोस्ट मॉडल में एक 'status' फील्ड (draft, published) जोड़ो","""status = db.Column(db.String(10), default='draft', nullable=False)"""
"सिर्फ पब्लिश हुए पोस्ट्स को दिखाने वाला एक API बनाओ","""@app.route('/api/published-posts')\ndef get_published_posts():\n    posts = Post.query.filter_by(status='published').all()\n    return jsonify([...])"""
"SQLAlchemy में एक हाइब्रिड प्रॉपर्टी बनाओ","""from sqlalchemy.ext.hybrid import hybrid_property\nclass User(db.Model):\n    # ... first_name, last_name columns ...\n    @hybrid_property\n    def full_name(self):\n        return self.first_name + ' ' + self.last_name"""
"API रिस्पॉन्स के लिए एक कस्टम JSON एन्कोडर बनाओ","""import json\nfrom datetime import date\nclass CustomJSONEncoder(json.JSONEncoder):\n    def default(self, obj):\n        if isinstance(obj, date):\n            return obj.isoformat()\n        return super().default(obj)"""
"Flask में एक WebSocket का उपयोग करके रियल-टाइम नोटिफिकेशन भेजो","""# Using Flask-SocketIO\n@socketio.on('new_post_created')\ndef handle_new_post_notification(data):\n    emit('notification', {'message': 'A new post was created!'}, broadcast=True)"""
"पाइथन में UUID का उपयोग करके एक यूनिक आईडी जेनरेट करो","""import uuid\npublic_id = str(uuid.uuid4())"""
"ब्लॉग पोस्ट मॉडल में एक स्लग (slug) फील्ड जोड़ो","""slug = db.Column(db.String(120), unique=True, nullable=False, index=True)"""
"एक फंक्शन बनाओ जो टाइटल से एक स्लग जेनरेट करे","""import re\ndef slugify(text):\n    text = text.lower().strip()\n    text = re.sub(r'[^\\w\\s-]', '', text)\n    text = re.sub(r'[\\s_-]+', '-', text)\n    return text"""
"एक API बनाओ जो XML डेटा लौटाए (Jinja2 टेम्पलेट का उपयोग करके)","""@app.route('/feed.xml')\ndef get_xml_feed():\n    # ... get posts from db ...\n    return Response(render_template('feed.xml', posts=posts), mimetype='application/xml')"""
"एक पाइथन स्क्रिप्ट बनाओ जो कमांड-लाइन से एक नाम ले और उसे ग्रीट करे","import sys\nif len(sys.argv) > 1:\n    name = sys.argv[1]\n    print(f'Hello, {name}')"
"एक कमांड-लाइन कैलकुलेटर बनाओ जो दो नंबरों को जोड़े","import sys\nnum1 = int(sys.argv[1])\nnum2 = int(sys.argv[2])\nprint(num1 + num2)"
"`argparse` का उपयोग करके एक कमांड-लाइन टूल बनाओ","import argparse\nparser = argparse.ArgumentParser()\nparser.add_argument('filename')\nargs = parser.parse_args()"
"एक फाइल में लाइनों, शब्दों और कैरेक्टर्स की गिनती करने वाली स्क्रिप्ट","import sys\nfilename = sys.argv[1]\nlines, words, chars = 0, 0, 0\nwith open(filename, 'r') as f:\n    for line in f:\n        lines += 1\n        words += len(line.split())\n        chars += len(line)\nprint(f'Lines: {lines}, Words: {words}, Chars: {chars}')"
"पाइथन से एक सिंपल HTTP सर्वर शुरू करो","import http.server\nimport socketserver\nPORT = 8000\nHandler = http.server.SimpleHTTPRequestHandler\nwith socketserver.TCPServer(('', PORT), Handler) as httpd:\n    httpd.serve_forever()"
"एक फोल्डर की सभी '.jpg' फाइलों को '.jpeg' में रीनेम करो","import os\nfor filename in os.listdir('.'):\n    if filename.endswith('.jpg'):\n        os.rename(filename, filename[:-4] + '.jpeg')"
"एक स्क्रिप्ट बनाओ जो एक डायरेक्टरी में 1MB से बड़ी सभी फाइलों को ढूंढे","import os\nfor filename in os.listdir('.'):\n    if os.path.getsize(filename) > 1024 * 1024:\n        print(filename)"
"एक CSV फाइल को JSON में बदलने के लिए एक स्क्रिप्ट लिखो","import csv, json\ndata = []\nwith open('data.csv', 'r') as f:\n    for row in csv.DictReader(f):\n        data.append(row)\nwith open('data.json', 'w') as f:\n    json.dump(data, f, indent=4)"
"लॉग्स को एक फाइल में लिखो","import logging\nlogging.basicConfig(filename='app.log', level=logging.INFO)\nlogging.info('Program started')"
"`subprocess` मॉड्यूल का उपयोग करके एक शेल कमांड चलाओ","import subprocess\nsubprocess.run(['ls', '-l'])"
"एक फोल्डर को ज़िप (zip) करने के लिए एक स्क्रिप्ट लिखो","import shutil\nshutil.make_archive('my_archive', 'zip', 'folder_to_zip')"
"एक ज़िप फाइल को अनज़िप करो","import shutil\nshutil.unpack_archive('archive.zip', 'destination_folder')"
"पाइथन में एक एनवायरनमेंट वेरिएबल को पढ़ो","import os\napi_key = os.environ.get('API_KEY')"
"एक डायरेक्टरी ट्री को वॉक (walk) करो","import os\nfor dirpath, dirnames, filenames in os.walk('.'):\n    print(f'Directory: {dirpath}')\n    for file_name in filenames:\n        print(f'  {file_name}')"
"एक टेक्स्ट फाइल में एक शब्द को दूसरे से बदलो","with open('file.txt', 'r') as f: content = f.read()\nnew_content = content.replace('old', 'new')\nwith open('file.txt', 'w') as f: f.write(new_content)"
"एक डायरेक्टरी के सभी डुप्लीकेट फाइलों को ढूंढो (hash का उपयोग करके)","import hashlib, os\n# ... logic to calculate hashes and find duplicates ... "
"एक पासवर्ड जेनरेटर कमांड-लाइन टूल बनाओ","import random, string, argparse\nparser = argparse.ArgumentParser()\nparser.add_argument('length', type=int)\nargs = parser.parse_args()\npassword = ''.join(random.choice(string.ascii_letters) for _ in range(args.length))\nprint(password)"
"`platform` मॉड्यूल का उपयोग करके ऑपरेटिंग सिस्टम की जानकारी प्राप्त करो","import platform\nprint(f'OS: {platform.system()}, Version: {platform.version()}')"
"`pickle` का उपयोग करके एक पाइथन ऑब्जेक्ट को सेव करो","import pickle\nmy_data = {'a': 1}\nwith open('data.pkl', 'wb') as f:\n    pickle.dump(my_data, f)"
"`pickle` का उपयोग करके एक पाइथन ऑब्जेक्ट को लोड करो","import pickle\nwith open('data.pkl', 'rb') as f:\n    loaded_data = pickle.load(f)"
"`getpass` का उपयोग करके यूज़र से सुरक्षित रूप से पासवर्ड पूछो","import getpass\npassword = getpass.getpass('Enter your password: ')"
"पाइथन स्क्रिप्ट को 10 सेकंड के लिए रोको (sleep)","import time\nprint('Waiting...')\ntime.sleep(10)\nprint('Done waiting.')"
"एक स्क्रिप्ट के एक्सीक्यूशन समय को मापो","import time\nstart_time = time.time()\n# ... your long process ...\nend_time = time.time()\nprint(f'Duration: {end_time - start_time} seconds')"
"एक सिंपल API सर्वर बनाओ जो FastAPI का उपयोग करे","from fastapi import FastAPI\napp = FastAPI()\n@app.get('/')\ndef read_root(): return {'Hello': 'World'}"
"पाइथन में एक SQLite डेटाबेस से कनेक्ट करो","import sqlite3\nconn = sqlite3.connect('my_database.db')"
"SQLite डेटाबेस में एक टेबल बनाओ","import sqlite3\nconn = sqlite3.connect('db.db')\nc = conn.cursor()\nc.execute('CREATE TABLE users (id INT, name TEXT)')\nconn.commit()\nconn.close()"
"SQLite टेबल में डेटा इंसर्ट करो","import sqlite3\nconn = sqlite3.connect('db.db')\nc = conn.cursor()\nc.execute('''INSERT INTO users VALUES (1, 'Amit')''')\nconn.commit()\nconn.close()"
"SQLite टेबल से डेटा सिलेक्ट करो","import sqlite3\nconn = sqlite3.connect('db.db')\nc = conn.cursor()\nfor row in c.execute('SELECT * FROM users'):\n    print(row)"
"एक Temporary Directory बनाओ","import tempfile\nwith tempfile.TemporaryDirectory() as tmpdir:\n    print('Created temporary directory', tmpdir)"
"एक टेक्स्ट फाइल की आखिरी N लाइनों को पढ़ो","def read_last_n_lines(filename, n):\n    with open(filename, 'r') as f:\n        return f.readlines()[-n:]"
"एक URL से एक फाइल डाउनलोड करो और प्रोग्रेस बार दिखाओ (tqdm)","from tqdm import tqdm\nimport requests\n# ... code to download a large file with a progress bar using tqdm ..."
"एक सिंपल कमांड-लाइन To-Do ऐप बनाओ (स्यूडो-कोड)","import sys\n# ... logic for a simple CLI to-do app that reads/writes to a file ..."
"`configparser` का उपयोग करके एक कॉन्फ़िगरेशन फाइल पढ़ो","import configparser\nconfig = configparser.ConfigParser()\nconfig.read('settings.ini')"
"एक पाइथन स्क्रिप्ट को बैकग्राउंड में चलाओ (daemonize)","import os\n# ... code for daemonizing a process using fork()..."
"पाइथन में मल्टीथ्रेडिंग का एक बेसिक उदाहरण","import threading\ndef task(): print('Task running')\n\nthread = threading.Thread(target=task)\nthread.start()"
"पाइथन में मल्टीप्रोसेसिंग का एक बेसिक उदाहरण","import multiprocessing\ndef worker(): print('Worker process')\n\nprocess = multiprocessing.Process(target=worker)\nprocess.start()"
"एक क्यू (Queue) का उपयोग करके थ्रेड्स के बीच डेटा शेयर करो","import queue, threading\nq = queue.Queue()\ndef producer(): q.put('hello')\ndef consumer(): item = q.get()\n\nt1 = threading.Thread(target=producer)\nt2 = threading.Thread(target=consumer)"
"एक पाइथन स्क्रिप्ट को एग्जीक्यूटेबल (executable) बनाओ (PyInstaller)","pyinstaller --onefile my_script.py"
"पाइथन से एक वेब ब्राउज़र खोलो","import webbrowser\nwebbrowser.open('https://google.com')"
"डाउनलोड फोल्डर में फाइलों को उनके एक्सटेंशन के आधार पर व्यवस्थित करो","import os, shutil\n# ... script to organize files in the Downloads folder ..."
"एक पाइथन स्क्रिप्ट जो एक वेबसाइट के डाउन होने पर अलर्ट भेजे","import requests, time\nwhile True:\n    try:\n        r = requests.get('http://example.com')\n        if r.status_code != 200:\n            print('Site is down!')\n    except:\n        print('Site is down!')\n    time.sleep(60)"
"एक इमेज का साइज़ बदलो (Pillow)","from PIL import Image\nimg = Image.open('in.jpg')\nresized = img.resize((200, 200))\nresized.save('out.jpg')"
"एक वॉटरमार्क को एक इमेज पर लगाओ","from PIL import Image, ImageDraw, ImageFont\n# ... code to add a text watermark to an image ..."
"एक डायरेक्टरी की सभी इमेजेज को कंप्रेस करो","import os\nfrom PIL import Image\n# ... script to loop through images and save with lower quality ..."
"एक MP3 फाइल से मेटाडेटा (ID3 tags) पढ़ो","from mutagen.mp3 import MP3\naudio = MP3('song.mp3')\nprint(audio.info.length)"
"एक PDF फाइल से टेक्स्ट निकालो (PyPDF2)","import PyPDF2\npdfFileObj = open('doc.pdf', 'rb')\npdfReader = PyPDF2.PdfReader(pdfFileObj)"
"कई PDF फाइलों को एक में मर्ज करो","from PyPDF2 import PdfMerger\nmerger = PdfMerger()\nfor pdf in ['file1.pdf', 'file2.pdf']:\n    merger.append(pdf)\nmerger.write('merged.pdf')"
"पाइथन से एक QR कोड बनाओ","import qrcode\nimg = qrcode.make('Some data to encode')\nimg.save('qrcode.png')"
"पाइथन से वाई-फाई नेटवर्क के लिए एक QR कोड बनाओ","import qrcode\n# ... code to generate a Wi-Fi QR code ..."
"Chart.js लाइब्रेरी को HTML में शामिल करो","<script src='https://cdn.jsdelivr.net/npm/chart.js'></script>"
"एक बार चार्ट (bar chart) बनाने के लिए एक कैनवास एलिमेंट बनाओ","<div style='width: 400px;'><canvas id='myBarChart'></canvas></div>"
"Chart.js का उपयोग करके एक सिंपल बार चार्ट बनाओ","<canvas id='c1'></canvas><script>new Chart(document.getElementById('c1'),{type:'bar',data:{labels:['January','February'], datasets:[{label:'Monthly Sales', data:[65, 59]}]}});</script>"
"Chart.js का उपयोग करके एक सिंपल लाइन चार्ट बनाओ","<canvas id='c2'></canvas><script>new Chart(document.getElementById('c2'),{type:'line',data:{labels:['Day 1','Day 2'], datasets:[{label:'Website Traffic', data:[100,150], fill:false, borderColor:'rgb(75, 192, 192)'}]}});</script>"
"Chart.js का उपयोग करके एक सिंपल पाई चार्ट बनाओ","<canvas id='c3'></canvas><script>new Chart(document.getElementById('c3'),{type:'pie',data:{labels:['Red','Blue','Yellow'], datasets:[{data:[300,50,100], backgroundColor:['Red','Blue','Yellow']}]}});</script>"
"Chart.js का उपयोग करके एक डोनट चार्ट (doughnut chart) बनाओ","<canvas id='c4'></canvas><script>new Chart(document.getElementById('c4'),{type:'doughnut',data:{...}});</script>"
"Chart.js का उपयोग करके एक रडार चार्ट (radar chart) बनाओ","<canvas id='c5'></canvas><script>new Chart(document.getElementById('c5'),{type:'radar',data:{labels:['Coding','Eating','Sleeping'], datasets:[{label:'My Skills', data:[9,7,8]}]}});</script>"
"Chart.js का उपयोग करके एक पोलर एरिया चार्ट (polar area chart) बनाओ","<canvas id='c6'></canvas><script>new Chart(document.getElementById('c6'),{type:'polarArea',data:{...}});</script>"
"एक चार्ट में टाइटल जोड़ो","options: { plugins: { title: { display: true, text: 'Custom Chart Title' } } }"
"एक चार्ट में लीजेंड (legend) को छिपाओ","options: { plugins: { legend: { display: false } } }"
"एक बार चार्ट के बार्स का रंग बदलो","datasets: [{ label: 'Data', data: [12, 19], backgroundColor: ['rgba(255, 99, 132, 0.2)', 'rgba(54, 162, 235, 0.2)'] }]"
"एक लाइन चार्ट की लाइन का रंग और मोटाई बदलो","datasets: [{ label: 'Data', data: [10, 20], borderColor: 'green', borderWidth: 3 }]"
"AJAX का उपयोग करके एक चार्ट का डेटा डायनामिक रूप से लोड करो","<script>fetch('/api/chart-data').then(res => res.json()).then(chartData => { new Chart(..., { data: chartData }); });</script>"
"एक बटन क्लिक पर चार्ट को अपडेट करो","<script>myChart.data.datasets[0].data = [50, 60, 70]; myChart.update();</script>"
"D3.js लाइब्रेरी को HTML में शामिल करो","<script src='https://d3js.org/d3.v7.min.js'></script>"
"D3.js का उपयोग करके एक सिंपल SVG एलिमेंट बनाओ","<div id='d3-container'></div><script>const svg = d3.select('#d3-container').append('svg').attr('width', 200).attr('height', 100);</script>"
"D3.js का उपयोग करके एक सर्किल बनाओ","<script>/*...after creating svg...*/ svg.append('circle').attr('cx', 50).attr('cy', 50).attr('r', 40).style('fill', 'blue');</script>"
"D3.js का उपयोग करके एक रेक्टेंगल बनाओ","<script>/*...after creating svg...*/ svg.append('rect').attr('x', 10).attr('y', 10).attr('width', 80).attr('height', 80).style('fill','green');</script>"
"D3.js में डेटा के आधार पर कई बार्स बनाओ","<script>const data=[10, 40, 32, 68]; const svg = d3.select('svg'); svg.selectAll('rect').data(data).enter().append('rect').attr('height', d=>d);</script>"
"D3.js में एक लीनियर स्केल (scale) बनाओ","<script>const xScale = d3.scaleLinear().domain([0, 100]).range([0, 500]);</script>"
"D3.js में एक एक्सिस (axis) बनाओ","<script>const xAxis = d3.axisBottom(xScale); svg.append('g').attr('transform', 'translate(0, 100)').call(xAxis);</script>"
"D3.js में एक ट्रांजीशन (transition) का उपयोग करो","<script>d3.select('circle').transition().duration(1000).attr('r', 10).style('fill', 'red');</script>"
"D3.js में एक माउसओवर इवेंट जोड़ो","<script>d3.selectAll('rect').on('mouseover', function(){ d3.select(this).style('fill', 'orange'); }).on('mouseout', function(){ d3.select(this).style('fill', 'green'); });</script>"
"D3.js का उपयोग करके एक CSV फाइल लोड करो","<script>d3.csv('my_data.csv').then(function(data) { console.log(data[0]); });</script>"
"D3.js का उपयोग करके एक JSON फाइल लोड करो","<script>d3.json('my_data.json').then(function(data) { console.log(data); });</script>"
"Chart.js में एक हॉरिजॉन्टल बार चार्ट बनाओ","<script>new Chart(ctx, {type:'bar', data: data, options: { indexAxis: 'y' }});</script>"
"Chart.js में एक स्टैक्ड बार चार्ट (stacked bar chart) बनाओ","<script>new Chart(ctx, {type:'bar', data: data, options: { scales: { x: { stacked: true }, y: { stacked: true } } }});</script>"
"Chart.js में एक बबल चार्ट (bubble chart) बनाओ","<script>new Chart(ctx, {type:'bubble', data: { datasets: [{label:'My Data', data:[{x:10,y:20,r:15}, {x:15,y:10,r:25}]}] }});</script>"
"Chart.js में एक स्कैटर चार्ट (scatter chart) बनाओ","<script>new Chart(ctx, {type:'scatter', data: { datasets: [{label:'Scatter Data', data:[{x:1,y:2},{x:3,y:4},{x:2,y:5}]}] }});</script>"
"एक चार्ट के टूलटिप्स (tooltips) को कस्टमाइज करो","options: { plugins: { tooltip: { callbacks: { label: function(context){ return `Value: ${context.parsed.y}`; } } } } }"
"एक चार्ट के एक्सिस लेबल्स को बदलो","options: { scales: { y: { title: { display: true, text: 'Total Sales ($)' } } } }"
"D3.js में एक पाई चार्ट का लेआउट बनाओ","<script>const pieGenerator = d3.pie(); const data_ready_for_pie = pieGenerator([10,20,30]);</script>"
"D3.js में एक आर्क (arc) जेनरेटर बनाओ","<script>const arcGenerator = d3.arc().innerRadius(50).outerRadius(100);</script>"
"D3.js में एक फोर्स-डायरेक्टेड ग्राफ (force-directed graph) का ढाँचा","<script>const simulation = d3.forceSimulation(nodes).force('link', d3.forceLink(links).id(d => d.id)).force('charge', d3.forceManyBody());</script>"
"एक मैप (जैसे भारत का) बनाने के लिए TopoJSON और D3.js का उपयोग करो","<script>d3.json('india_topo.json').then(function(topology) { const geojson = topojson.feature(topology, topology.objects.india); /* draw map with d3.geoPath() */ });</script>"
"Google Charts का उपयोग करके एक गेज चार्ट (gauge chart) बनाओ","<script type='text/javascript' src='https://www.gstatic.com/charts/loader.js'></script><script>google.charts.load('current', {'packages':['gauge']}); google.charts.setOnLoadCallback(drawChart); function drawChart(){...}</script>"
"Highcharts का उपयोग करके एक 3D कॉलम चार्ट बनाओ","<script src='https://code.highcharts.com/highcharts.js'></script><script src='https://code.highcharts.com/highcharts-3d.js'></script><div id='container'></div><script>Highcharts.chart('container', {chart:{type:'column', options3d:{enabled:true}}, ...});</script>"
"Leaflet.js का उपयोग करके एक इंटरैक्टिव मैप बनाओ","<link rel='stylesheet' href='https://unpkg.com/leaflet/dist/leaflet.css' /><script src='https://unpkg.com/leaflet/dist/leaflet.js'></script><div id='mapid' style='height: 200px;'></div><script>var mymap = L.map('mapid').setView([26.84, 80.94], 13); L.marker([26.84, 80.94]).addTo(mymap);</script>"
"एक Flask API बनाओ जो चार्ट के लिए डायनामिक डेटा लौटाए","@app.route('/api/monthly-sales')\ndef monthly_sales_data():\n    data = {'labels':['Jan','Feb'], 'values':[100,120]}\n    return jsonify(data)"
"Chart.js में एक मिक्सड-टाइप (mixed-type) चार्ट बनाओ (बार और लाइन)","<script>new Chart(ctx, {data: {datasets:[{type:'bar', label:'Bar Data', data:[10,20]},{type:'line', label:'Line Data', data:[15,15]}]}})</script>"
"एक चार्ट में एक बटन से नया डेटा जोड़ो","<script>function addDataToChart(chart, label, data) { chart.data.labels.push(label); chart.data.datasets.forEach((dataset) => { dataset.data.push(data); }); chart.update(); }</script>"
"एक चार्ट से डेटा को हटाओ","<script>function removeDataFromChart(chart) { chart.data.labels.pop(); chart.data.datasets.forEach((dataset) => { dataset.data.pop(); }); chart.update(); }</script>"
"D3.js में एक ब्रश करने योग्य (brushable) स्कैटर प्लॉट बनाओ","<script>const brush = d3.brush().extent([[0,0],[w,h]]).on('start brush end', brushed); svg.append('g').call(brush);</script>"
"एक चार्ट को responsive बनाओ","options: { responsive: true, maintainAspectRatio: false }"
"D3.js में एक ट्रीमैप (treemap) लेआउट बनाओ","<script>const root = d3.hierarchy(data).sum(d => d.value); const treemapLayout = d3.treemap().size([500, 500]).padding(1); treemapLayout(root);</script>"
"Plotly.js का उपयोग करके एक 3D सरफेस प्लॉट बनाओ","<script src='https://cdn.plot.ly/plotly-latest.min.js'></script><div id='myDiv3D'></div><script>Plotly.newPlot('myDiv3D', data, layout);</script>"
"Chart.js में एक टाइमलाइन चार्ट बनाओ","<script>new Chart(ctx, {type:'bar', options:{indexAxis:'y', ...}})</script>"
"एक स्पार्कलाइन (Sparkline) चार्ट बनाओ",""
"एक सनबर्स्ट (Sunburst) चार्ट का कॉन्सेप्ट","// A hierarchical chart, similar to a treemap, but represented by a radial layout. Each level of the hierarchy is a ring."
"एक प्रोडक्ट कार्ड कॉम्पोनेन्ट बनाओ","<div class='product-card' style='border:1px solid #ddd; width:200px; text-align:center;'><img src='product.jpg' width='100%' alt='Product'><h3 class='product-title'>Product Name</h3><p class='product-price'>$19.99</p><button>Add to Cart</button></div>"
"एक प्रोडक्ट ग्रिड लेआउट बनाओ","<div class='product-grid' style='display:grid; grid-template-columns:repeat(auto-fit, minmax(200px, 1fr)); gap:15px;'>...product cards here...</div>"
"एक 'Add to Cart' बटन बनाओ जो एक आइटम को कार्ट में जोड़े","<button onclick=""addToCart({id: 'prod123', name: 'Cool Laptop', price: 999.99})"">Add to Cart</button><script>let shoppingCart=[]; function addToCart(product){shoppingCart.push(product); console.log('Cart:', shoppingCart);}</script>"
"शॉपिंग कार्ट में आइटम्स की संख्या दिखाने वाला एक आइकन बनाओ","<div id='cart-icon-wrapper'>🛒 Cart (<span id='cart-item-count'>0</span>)</div>"
"शॉपिंग कार्ट का UI बनाओ जिसमें आइटम्स और टोटल हो","<div class='shopping-cart-summary'><h2>Your Cart</h2><ul id='cart-items-list'><li>Laptop - $999.99</li></ul><p style='font-weight:bold;'>Total: $<span id='cart-total-price'>999.99</span></p></div>"
"जावास्क्रिप्ट में शॉपिंग कार्ट के टोटल की गणना करो","function calculateCartTotal(){\n  let total = shoppingCart.reduce((sum, item) => sum + item.price, 0);\n  document.getElementById('cart-total-price').innerText = total.toFixed(2);\n}"
"एक प्रोडक्ट की मात्रा (quantity) को बदलने के लिए एक इनपुट बनाओ","<input type='number' value='1' min='1' onchange='updateProductQuantityInCart(123, this.value)'>"
"एक चेकआउट फॉर्म का ढाँचा बनाओ","<form id='checkout-form'><fieldset><legend>Shipping Address</legend><input placeholder='Full Name'>...</fieldset><fieldset><legend>Payment Details</legend><input placeholder='Card Number'>...</fieldset><button type='submit'>Place Order</button></form>"
"प्रोडक्ट्स को फ़िल्टर करने के लिए एक साइडबार बनाओ","<aside><h3>Filters</h3><div class='filter-group'><h4>Category</h4><input type='checkbox'> Electronics<br><input type='checkbox'> Books</div></aside>"
"एक प्रोडक्ट सर्च बार बनाओ","<input type='search' placeholder='Search for products...'>"
"एक प्रोडक्ट पेज पर इमेज थंबनेल गैलरी बनाओ","<img id='main-product-image' src='img-large-1.jpg' width='300'><div class='thumbnails'><img src='img-thumb-1.jpg' onclick=""document.getElementById('main-product-image').src='img-large-1.jpg'""> <img src='img-thumb-2.jpg' onclick=""document.getElementById('main-product-image').src='img-large-2.jpg'""></div>"
"एक स्टार रेटिंग डिस्प्ले कॉम्पोनेन्ट बनाओ (जैसे 4.5 स्टार्स)","<div class='star-rating' style='color:orange;'><span>★★★★</span><span style='color:grey'>★</span> (4.5)</div>"
"एक 'Sale' (बिक्री) बैज बनाओ","<div style='position:relative; display:inline-block;'><img src='product.jpg' width='150'><span style='position:absolute; top:10px; left:10px; background:red; color:white; padding:5px; border-radius:3px;'>SALE</span></div>"
"एक 'Out of Stock' (स्टॉक में नहीं) लेबल दिखाओ","<button disabled style='background:grey; color:white;'>Out of Stock</button>"
"एक इच्छा-सूची (wishlist) में जोड़ने के लिए एक बटन बनाओ","<button onclick='addToWishlist(123)'>❤️ Add to Wishlist</button>"
"प्रोडक्ट्स को कीमत के आधार पर सॉर्ट करने के लिए एक ड्रॉपडाउन","<label>Sort by:</label><select onchange='sortProductsBy(this.value)'><option value='price_asc'>Price: Low to High</option><option value='price_desc'>Price: High to Low</option></select>"
"एक प्रोडक्ट की तुलना (compare) करने के लिए चेकबॉक्स बनाओ","<label><input type='checkbox' onchange='compareProduct(123, this.checked)'> Compare</label>"
"एक 'Quick View' मोडल (modal) बनाओ","<button onclick=""showQuickViewModal(123)"">Quick View</button>"
"एक 'Related Products' (संबंधित उत्पाद) सेक्शन बनाओ","<section><h2>Related Products</h2><div class='product-grid'>...product cards...</div></section>"
"एक ई-कॉमर्स ब्रेडक्रंब (breadcrumb) नेविगेशन बनाओ","<nav aria-label='breadcrumb'>Home > Electronics > Laptops</nav>"
"एक डिस्काउंट कूपन अप्लाई करने के लिए एक इनपुट फील्ड बनाओ","<input placeholder='Enter Coupon Code'><button>Apply Coupon</button>"
"शिपिंग विकल्पों के लिए रेडियो बटन बनाओ","<div><label><input type='radio' name='shipping_option'> Standard Shipping ($5.00)</label></div><div><label><input type='radio' name='shipping_option'> Express Shipping ($15.00)</label></div>"
"एक प्रोडक्ट ज़ूम इफ़ेक्ट बनाओ जो होवर पर काम करे","<style>.zoom-image-container:hover img{transform:scale(1.2);}</style><div class='zoom-image-container' style='width:200px; overflow:hidden;'><img src='product.jpg' style='transition:transform 0.3s;'></div>"
"एक 'Recently Viewed' (हाल ही में देखे गए) प्रोडक्ट्स का सेक्शन बनाओ","<section><h2>Your Recently Viewed Items</h2><div id='recently-viewed-items-container'></div></section>"
"एक प्रोडक्ट के लिए कस्टमर रिव्यु (review) सेक्शन बनाओ","<div class='customer-reviews'><h3>Customer Reviews (4.5/5)</h3><div class='review'><strong>Amit</strong> - ★★★★☆ - <p>Great product!</p></div></div>"
"एक रिव्यु सबमिट करने के लिए एक फॉर्म बनाओ","<form><label>Your Rating:</label><select><option>1</option><option>2</option>...</select><br><label>Your Review:</label><textarea></textarea><br><button>Submit Review</button></form>"
"एक 'Best Sellers' (सबसे ज़्यादा बिकने वाले) सेक्शन बनाओ","<section><h2>Our Best Sellers</h2>...</section>"
"एक 'New Arrivals' (नए आगमन) सेक्शन बनाओ","<section><h2>New Arrivals</h2>...</section>"
"एक प्रोडक्ट के विभिन्न रंगों (color swatches) को दिखाओ","<div class='color-swatches'><span style='background:red; width:25px; height:25px; display:inline-block; border:1px solid #ccc; cursor:pointer;'></span> <span style='background:blue; ...'></span></div>"
"प्रोडक्ट के विभिन्न साइज़ चुनने के लिए बटन बनाओ","<div class='size-selector'><button>S</button> <button>M</button> <button>L</button> <button>XL</button></div>"
"एक 'Add to Cart' कन्फर्मेशन मैसेज दिखाओ","<div id='add-to-cart-confirmation' style='display:none; color:green;'>Product added to cart successfully!</div>"
"शॉपिंग कार्ट से एक आइटम को हटाने के लिए एक बटन","<li id='cart-item-123'>Laptop <button onclick=""document.getElementById('cart-item-123').remove()"">Remove</button></li>"
"चेकआउट पेज पर आर्डर का सारांश (order summary) दिखाओ","<div class='order-summary'><h3>Order Summary</h3><p>Subtotal: $999.99</p><p>Shipping: $5.00</p><strong>Total: $1004.99</strong></div>"
"एक 'Notify Me' फॉर्म बनाओ जब प्रोडक्ट स्टॉक में न हो","<p>This item is out of stock.</p><form><label>Enter your email to be notified:</label><input type='email'><button>Notify Me</button></form>"
"एक 'Size Chart' (साइज़ चार्ट) लिंक बनाओ जो एक मोडल खोले","<a href='#' onclick=""showSizeChartModal()"">View Size Chart</a>"
"एक 'Gift Wrap' (गिफ्ट रैप) विकल्प के लिए एक चेकबॉक्स","<label><input type='checkbox'> Add gift wrap (+$2.00)</label>"
"एक प्रोडक्ट की डिलीवरी की अनुमानित तारीख दिखाओ","<p style='color:green;'>Estimated delivery: October 15, 2025</p>"
"सोशल मीडिया पर एक प्रोडक्ट को शेयर करने के लिए बटन","<button>Share on Facebook</button> <button>Share on Twitter</button>"
"एक 'Customers who bought this also bought' सेक्शन","<section><h2>Customers also bought</h2>...</section>"
"एक प्रोडक्ट के लिए FAQ (प्रश्न-उत्तर) सेक्शन","<section><h2>Questions & Answers</h2><details><summary>Is this waterproof?</summary><p>No, it is water-resistant.</p></details></section>"
"एक 'Terms and Conditions' चेकबॉक्स जो चेकआउट पर ज़रूरी हो","<label><input type='checkbox' required> I have read and agree to the Terms and Conditions.</label>"
"पेमेंट मेथड (Credit Card, PayPal) चुनने के लिए आइकन","<div><img src='visa_icon.png' alt='Visa'> <img src='mastercard_icon.png' alt='Mastercard'> <img src='paypal_icon.png' alt='PayPal'></div>"
"एक 'Track Order' पेज का UI बनाओ","<form><label>Enter your Order ID:</label><input type='text' placeholder='eg. 12345'><button>Track Order</button></form>"
"एक 'My Account' पेज का डैशबोर्ड UI","<div class='account-dashboard'><h3>My Account</h3><ul><li><a href='/orders'>Order History</a></li><li><a href='/profile'>My Profile</a></li><li><a href='/logout'>Logout</a></li></ul></div>"
"एक 'Order History' टेबल बनाओ","<table border='1'><thead><tr><th>Order ID</th><th>Date</th><th>Total</th><th>Status</th></tr></thead><tbody><tr><td>#123</td><td>2025-10-01</td><td>$50</td><td>Shipped</td></tr></tbody></table>"
"एक 'Write a Review' बटन जो एक फॉर्म खोले","<button>Write a Review for this product</button>"
"एक इनवॉइस (invoice) का HTML टेम्पलेट बनाओ","<div class='invoice-box' style='border:1px solid; padding:20px;'><h1>Invoice</h1>...</div>"
"एक 'Abandoned Cart' ईमेल का कॉन्सेप्ट","// An automated email sent to a user who has added items to their shopping cart but did not complete the purchase, reminding them of their items."
"अपसेल (Upsell) और क्रॉस-सेल (Cross-sell) का कॉन्सेप्ट","// Upsell: Encouraging a customer to buy a more expensive, upgraded version of a product. Cross-sell: Encouraging a customer to buy related or complementary items."
"पेज लोड होने पर सभी ब्लॉग पोस्ट्स को फेच करो और दिखाओ","""<div id='posts-container'></div>\n<script>\nwindow.addEventListener('DOMContentLoaded', () => {\n  fetch('/api/posts').then(res => res.json()).then(posts => {\n    const container = document.getElementById('posts-container');\n    posts.forEach(post => {\n      container.innerHTML += `<h2><a href='#' onclick='fetchPost(${post.id})'>${post.title}</a></h2>`;\n    });\n  });\n});\n</script>"""
"एक लिंक पर क्लिक करके एक सिंगल पोस्ट का कंटेंट फेच करो और दिखाओ","""<div id='single-post-view'></div>\n<script>\nfunction fetchPost(id) {\n  fetch(`/api/posts/${id}`).then(res => res.json()).then(post => {\n    document.getElementById('single-post-view').innerHTML = `<h1>${post.title}</h1><p>${post.content}</p>`;\n  });\n}\n</script>"""
"एक नया ब्लॉग पोस्ट बनाने के लिए एक HTML फॉर्म बनाओ","""<form id='new-post-form'>\n  <input id='title-input' placeholder='Title' required>\n  <br><br>\n  <textarea id='content-input' placeholder='Content' required></textarea>\n  <br><br>\n  <button type='submit'>Create Post</button>\n</form>"""
"AJAX का उपयोग करके नया पोस्ट बनाने वाले फॉर्म को सबमिट करो","""<script>\ndocument.getElementById('new-post-form').addEventListener('submit', event => {\n  event.preventDefault();\n  const title = document.getElementById('title-input').value;\n  const content = document.getElementById('content-input').value;\n  fetch('/api/posts', {\n    method: 'POST',\n    headers: {'Content-Type': 'application/json'},\n    body: JSON.stringify({title: title, content: content})\n  }).then(res => res.json()).then(data => console.log('New post created with ID:', data.id));\n});\n</script>"""
"एक पोस्ट को डिलीट करने के लिए एक बटन बनाओ","""<button onclick=""deletePost(5)"">Delete Post 5</button>\n<script>\nfunction deletePost(id) {\n  if(confirm('Are you sure you want to delete this post?')){\n    fetch(`/api/posts/${id}`, { method: 'DELETE' }).then(() => alert('Post deleted'));\n  }\n}\n</script>"""
"एक पोस्ट को एडिट करने के लिए एक फॉर्म दिखाओ","""<button onclick=""showEditForm(5)"">Edit Post 5</button>\n<div id='edit-form-container'></div>\n<script>\nfunction showEditForm(id) {\n    // fetch post data and populate an edit form in the container\n}\n</script>"""
"जावास्क्रिप्ट से एक डायनामिक सर्च फंक्शन बनाओ","""<input placeholder='Search blog posts...' onkeyup=""fetch('/api/search?q='+this.value).then(res => res.json()).then(results => {\n  // ... code to display search results on the page ...\n});"">"""
"पेजिनेशन बटन्स (Next/Previous) के लिए जावास्क्रिप्ट लिखो","""let currentPage = 1;\nfunction loadPostsForPage(page) {\n  fetch(`/api/posts-paginated?page=${page}`).then(res => res.json()).then(data => {\n    // ... display posts for the given page ...\n    currentPage = page;\n  });\n}"""
"एक 'Load More' बटन बनाओ जो और पोस्ट्स लोड करे","""<button id='load-more-btn' onclick=""loadPostsForPage(currentPage + 1)"">Load More</button>"""
"एक पोस्ट पर कमेंट करने के लिए एक फॉर्म बनाओ","""<form onsubmit=""addCommentToPost(5, this.comment.value); return false;"">\n  <input name='comment' placeholder='Write a comment...'>\n  <button type='submit'>Submit Comment</button>\n</form>"""
"एक पोस्ट के सभी कमेंट्स को फेच करो और दिखाओ","""<ul id='comments-list-for-post-5'></ul>\n<script>\nfetch('/api/posts/5/comments').then(res => res.json()).then(comments => {\n  const list = document.getElementById('comments-list-for-post-5');\n  comments.forEach(comment => { list.innerHTML += `<li>${comment.text}</li>`; });\n});\n</script>"""
"एक 'Like' बटन बनाओ जो API को कॉल करे और लाइक काउंट अपडेट करे","""<p>Likes: <span id='like-count-for-post-5'>10</span></p>\n<button onclick=""fetch('/api/posts/5/like', {method:'POST'}).then(res=>res.json()).then(data=>document.getElementById('like-count-for-post-5').innerText=data.likes);"">👍 Like</button>"""
"यूज़र रजिस्ट्रेशन के लिए एक AJAX फॉर्म बनाओ","""<form id='registration-form'>...</form>\n<script>// JavaScript to submit registration form data as a JSON object via a fetch POST request</script>"""
"यूज़र लॉगइन के लिए एक AJAX फॉर्म बनाओ और JWT टोकन को localStorage में सेव करो","""<script>\n// ... inside form submit event listener ...\nfetch('/api/login', ...).then(res => res.json()).then(data => {\n  if (data.token) {\n    localStorage.setItem('jwt_token', data.token);\n    window.location.href = '/dashboard'; // redirect to dashboard\n  }\n});\n</script>"""
"हर प्रोटेक्टेड API रिक्वेस्ट के साथ JWT टोकन भेजो","""<script>\nconst token = localStorage.getItem('jwt_token');\nfetch('/api/protected-route', { \n    headers: {\n        'Authorization': `Bearer ${token}`\n    }\n});\n</script>"""
"एक लॉगआउट बटन बनाओ जो JWT टोकन को localStorage से हटाए","""<button onclick=""localStorage.removeItem('jwt_token'); window.location.href = '/login';"">Logout</button>"""
"Markdown कंटेंट को HTML में बदलने के लिए एक लाइब्रेरी (जैसे Showdown.js) का उपयोग करो","""<script src='https://cdnjs.cloudflare.com/ajax/libs/showdown/2.1.0/showdown.min.js'></script>\n<script>\n  const converter = new showdown.Converter();\n  const markdownText = '# Hello\\n**This is bold.**';\n  const html = converter.makeHtml(markdownText);\n</script>"""
"API से मिले Markdown कंटेंट को पेज पर रेंडर करो","""fetch('/api/posts/1').then(res => res.json()).then(post => {\n  const converter = new showdown.Converter();\n  const htmlContent = converter.makeHtml(post.content);\n  document.getElementById('post-content-div').innerHTML = htmlContent;\n});"""
"तारीख को एक रीडेबल फॉर्मेट में दिखाने के लिए एक जावास्क्रिप्ट फंक्शन","""function formatReadableDate(isoString) {\n  return new Date(isoString).toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' });\n}"""
"एक लोडिंग स्पिनर दिखाओ जब API कॉल चल रही हो","""function fetchDataWithLoader(){\n  document.getElementById('loader-spinner').style.display = 'block';\n  fetch('...').finally(() => {\n    document.getElementById('loader-spinner').style.display = 'none';\n  });\n}"""
"API से एरर आने पर यूज़र को एक एरर मैसेज दिखाओ","""<p id='error-display-area' style='color:red;'></p>\n<script>\nfetch('/api/invalid-endpoint').catch(error => {\n  document.getElementById('error-display-area').innerText = 'An error occurred while loading data.';\n});\n</script>"""
"एक 'Single Page Application' (SPA) का बेसिक राउटर बनाओ","""<script>\nwindow.onhashchange = function() {\n  const page = window.location.hash.substring(1);\n  // Logic to show content based on the 'page' variable (e.g., #/about, #/contact)\n}\n</script>"""
"वेबसाइट में एक सिंपल डार्क मोड टॉगल बनाओ","""<button onclick=""document.body.classList.toggle('dark-mode')"">Toggle Dark Mode</button>\n<style>.dark-mode { background: #333; color: white; }</style>"""
"एक ब्लॉग पोस्ट के लिए 'टैग्स' की लिस्ट दिखाओ","""// Assuming API returns post.tags = [{name:'tech'}, {name:'python'}]\nconst tagsHtml = post.tags.map(tag => `<span class='tag'>${tag.name}</span>`).join(' ');"""
"एक ब्लॉग पोस्ट के लेखक का नाम दिखाओ","""// Assuming API returns post.author = {username: 'Amit'}\ndocument.getElementById('author-name').innerText = `By ${post.author.username}`;"""
"एक नया पोस्ट बनाने के बाद पेज को री-रेंडर करो (बिना रीलोड किए)","""fetch('/api/posts', {method:'POST',...}).then(() => {\n  // Clear the form and call the function that fetches and renders all posts again\n  fetchAllPosts();\n});"""
"URL से पोस्ट ID निकालो और उस पोस्ट को फेच करो","""<script>\nconst pathParts = window.location.pathname.split('/');\nconst postId = pathParts[pathParts.length - 1];\nif(postId && !isNaN(postId)) {\n  fetchPost(postId);\n}\n</script>"""
"WebSocket का उपयोग करके रियल-टाइम कमेंट्स दिखाओ","""<script>\nconst socket = io(); // from socket.io.js\nsocket.on('new_comment_for_post_5', function(comment) {\n  // Add the new comment to the comments list dynamically without reloading the page\n});\n</script>"""
"WebSocket से कनेक्ट करने के लिए जावास्क्रिप्ट कोड","""<script src='https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.0.1/socket.io.js'></script>\n<script>var socket = io.connect('http://' + document.domain + ':' + location.port);</script>"""
"यूज़र को एक पोस्ट एडिट करने के लिए एक इन-प्लेस एडिटर दो (`contenteditable`)","""<div id='content-div' ondblclick=""this.contentEditable=true; this.focus();"">Double click to edit this text.</div>"""
"फ्रंटएंड पर फॉर्म वैलिडेशन (ईमेल) करो","""<form onsubmit=""const email = this.email.value; if(!email.includes('@') || !email.includes('.')){alert('Please enter a valid email address'); return false;}""><input name='email' type='email'></form>"""
"API से मिले पेजिनेशन डेटा को हैंडल करो और बटन को डिसेबल करो","""// API returns { 'posts': [...], 'has_next': true, 'next_page': 3 }\nif (!data.has_next) {\n  document.getElementById('load-more-button').disabled = true;\n}"""
"एक इमेज अपलोड फॉर्म बनाओ जो `FormData` का उपयोग करे","""<input type='file' id='image-file-input'>\n<script>\nfunction uploadImage(){\n  const fileInput = document.getElementById('image-file-input');\n  if (fileInput.files.length > 0) {\n      const formData = new FormData();\n      formData.append('image', fileInput.files[0]);\n      fetch('/api/upload', {method:'POST', body:formData});\n  }\n}\n</script>"""
"एक 'infinite scroll' फीचर बनाओ","""<script>\nconst contentEl = document.getElementById('content');\nwindow.addEventListener('scroll', () => {\n  const { scrollTop, scrollHeight, clientHeight } = document.documentElement;\n  if (scrollTop + clientHeight >= scrollHeight - 5) {\n    // Load more posts when user is near the bottom\n  }\n});\n</script>"""
"एक 'debounce' फंक्शन का उपयोग करके सर्च API कॉल्स को ऑप्टिमाइज़ करो","""<script>\nfunction debounce(func, delay=300) {\n  let timeout;\n  return function(...args) {\n    clearTimeout(timeout);\n    timeout = setTimeout(() => { func.apply(this, args); }, delay);\n  };\n}\nconst efficientSearch = debounce(searchTerm => fetch('/api/search?q='+searchTerm));\n</script>"""
"एक 'throttle' फंक्शन का उपयोग करके स्क्रॉल इवेंट्स को ऑप्टिमाइज़ करो","""<script>\nfunction throttle(func, limit) { \n  let inThrottle;\n  return function() {\n    if (!inThrottle) {\n      func.apply(this, arguments);\n      inThrottle = true;\n      setTimeout(() => inThrottle = false, limit);\n    }\n  }\n}\nwindow.addEventListener('scroll', throttle(() => console.log('Scrolled!'), 100));\n</script>"""
"एक ब्राउज़र नोटिफिकेशन (Notification API) भेजो","""<button onclick=""Notification.requestPermission().then(permission => { if (permission === 'granted') { new Notification('New Blog Post Available!'); } });"">Enable Notifications</button>"""
"एक पोस्ट को शेयर करने के लिए Web Share API का उपयोग करो","""<button onclick=""if(navigator.share){navigator.share({title: 'My Awesome Blog Post', url: '/posts/1'})} else {alert('Share not supported')}"">Share Post</button>"""
"फ्रंटएंड पर एक JSON ऑब्जेक्ट को सुंदर तरीके से दिखाओ","""<pre id='json-display-output'></pre>\n<script>\nconst myJsonObject = { id: 1, name: 'Amit', is_active: true };\ndocument.getElementById('json-display-output').textContent = JSON.stringify(myJsonObject, null, 2);\n</script>"""
"एक पोस्ट को localStorage का उपयोग करके 'बुकमार्क' करो","""<button onclick=""localStorage.setItem('bookmarked_post_1', 'true')"">Bookmark Post 1</button>"""
"एक लोडिंग स्केलेटन (skeleton) स्क्रीन का HTML/CSS बनाओ","""<style>@keyframes pulse{...} .skeleton-box{animation: pulse 1.5s infinite; background:#e0e0e0;}</style><div class='post-skeleton'><div class='skeleton-box' style='height:150px;'></div><div class='skeleton-box' style='height:20px; margin-top:10px;'></div></div>"""
"एक पोस्ट के 'पढ़ने का समय' (reading time) कैलकुलेट करो","""<script>\nfunction calculateReadingTime(text) {\n  const wordsPerMinute = 225;\n  const wordCount = text.trim().split(/\s+/).length;\n  const readingTime = Math.ceil(wordCount / wordsPerMinute);\n  return `${readingTime} min read`;\n}\n</script>"""
"एक ब्लॉग पोस्ट के लिए एक 'Table of Contents' डायनामिक रूप से जेनरेट करो","""<nav><h4>Contents</h4><ul id='table-of-contents'></ul></nav>\n<script>\ndocument.querySelectorAll('main h2').forEach(heading => {\n  const id = heading.textContent.toLowerCase().replace(/ /g, '-');\n  heading.id = id;\n  document.getElementById('table-of-contents').innerHTML += `<li><a href='#${id}'>${heading.textContent}</a></li>`;\n});\n</script>"""
"यूज़र से एक कन्फर्मेशन डायलॉग (dialog) दिखाओ","""<button onclick=""if(confirm('Are you absolutely sure you want to delete this?')){ console.log('Deleting...'); }"">Delete Item</button>"""
"Fetch API में `AbortController` का उपयोग करके एक रिक्वेस्ट को कैंसिल करो","""<script>\nconst controller = new AbortController();\nconst signal = controller.signal;\nfetch('...', {signal});\n\n// To cancel the request, for example after a timeout:\n// controller.abort();\n</script>"""
"एक नया पोस्ट बनाने के बाद यूज़र को उस पोस्ट के पेज पर रीडायरेक्ट करो","""fetch('/api/posts', {method:'POST',...}).then(res => res.json()).then(data => {\n  // Redirect to the new post's page\n  window.location.href = `/posts/${data.id}`;\n});"""
"एक API कॉल के लिए एक टाइमआउट सेट करो","""<script>\nconst controller = new AbortController();\nconst timeoutId = setTimeout(() => controller.abort(), 5000); // 5 second timeout\n\nfetch('/api/slow-endpoint', {signal: controller.signal})\n  .catch(error => { if (error.name === 'AbortError') console.error('Request timed out!'); })\n  .finally(() => clearTimeout(timeoutId));\n</script>"""
"एक सिंपल WYSIWYG एडिटर का ढाँचा (Bold, Italic)","""<div id='editor' contenteditable='true' style='border:1px solid #ccc; height:150px; padding:5px;'>Type your text here...</div>\n<button onclick=""document.execCommand('bold')""><b>B</b></button>\n<button onclick=""document.execCommand('italic')""><i>I</i></button>"""
"एक ब्लॉग के लिए User और Post डेटाबेस मॉडल बनाओ","""# In models.py\nfrom flask_sqlalchemy import SQLAlchemy\ndb = SQLAlchemy()\n\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    username = db.Column(db.String(80), unique=True, nullable=False)\n\nclass Post(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    title = db.Column(db.String(120), nullable=False)\n    content = db.Column(db.Text, nullable=False)\n    author_id = db.Column(db.Integer, db.ForeignKey('user.id'))"""
"Flask ऐप को SQLAlchemy डेटाबेस के साथ कॉन्फ़िगर करो","""# In app.py\nfrom flask import Flask\nfrom models import db\n\napp = Flask(__name__)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///blog.db'\ndb.init_app(app)"""
"सभी ब्लॉग पोस्ट्स को लौटाने वाला एक API एंडपॉइंट बनाओ","""@app.route('/api/posts', methods=['GET'])\ndef get_all_posts():\n    posts = Post.query.all()\n    return jsonify([{'id': p.id, 'title': p.title} for p in posts])"""
"एक सिंगल ब्लॉग पोस्ट को ID से लौटाने वाला API बनाओ","""@app.route('/api/posts/<int:post_id>', methods=['GET'])\ndef get_post(post_id):\n    post = Post.query.get_or_404(post_id)\n    return jsonify({'title': post.title, 'content': post.content})"""
"एक नया ब्लॉग पोस्ट बनाने के लिए एक API एंडपॉइंट बनाओ","""@app.route('/api/posts', methods=['POST'])\ndef create_post():\n    data = request.json\n    new_post = Post(title=data['title'], content=data['content'])\n    db.session.add(new_post)\n    db.session.commit()\n    return jsonify({'id': new_post.id}), 201"""
"एक ब्लॉग पोस्ट को अपडेट करने के लिए एक API एंडपॉइंट बनाओ","""@app.route('/api/posts/<int:post_id>', methods=['PUT'])\ndef update_post(post_id):\n    post = Post.query.get_or_404(post_id)\n    data = request.json\n    post.title = data.get('title', post.title)\n    post.content = data.get('content', post.content)\n    db.session.commit()\n    return jsonify({'message': 'Post updated'})"""
"एक ब्लॉग पोस्ट को डिलीट करने के लिए एक API एंडपॉइंट बनाओ","""@app.route('/api/posts/<int:post_id>', methods=['DELETE'])\ndef delete_post(post_id):\n    post = Post.query.get_or_404(post_id)\n    db.session.delete(post)\n    db.session.commit()\n    return jsonify({'message': 'Post deleted'})"""
"Flask-Migrate کا उपयोग करके डेटाबेस माइग्रेशन सेटअप करो","""from flask_migrate import Migrate\nmigrate = Migrate(app, db)"""
"Alembic माइग्रेशन स्क्रिप्ट बनाओ","flask db migrate -m 'Initial migration.'"
"Alembic माइग्रेशन को डेटाबेस पर अप्लाई करो","flask db upgrade"
"एक Flask कमांड बनाओ जो डेटाबेस को इनिशियलाइज़ करे","""@app.cli.command('init-db')\ndef init_db_command():\n    db.create_all()\n    print('Initialized the database.')"""
"ब्लॉग के लिए एक 'Comment' मॉडल बनाओ","""class Comment(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    text = db.Column(db.String(200), nullable=False)\n    post_id = db.Column(db.Integer, db.ForeignKey('post.id'))"""
"एक पोस्ट के सभी कमेंट्स को लौटाने वाला API बनाओ","""@app.route('/api/posts/<int:post_id>/comments')\ndef get_comments(post_id):\n    comments = Comment.query.filter_by(post_id=post_id).all()\n    return jsonify([{'text': c.text} for c in comments])"""
"एक पोस्ट पर नया कमेंट करने के लिए API बनाओ","""@app.route('/api/posts/<int:post_id>/comments', methods=['POST'])\ndef add_comment(post_id):\n    new_comment = Comment(text=request.json['text'], post_id=post_id)\n    db.session.add(new_comment)\n    db.session.commit()\n    return jsonify({'id': new_comment.id})"""
"ब्लॉग पोस्ट मॉडल में एक 'created_at' फील्ड जोड़ो","""created_at = db.Column(db.DateTime, default=datetime.utcnow)"""
"पोस्ट्स को लेटेस्ट पहले के क्रम में क्वेरी करो","""posts = Post.query.order_by(Post.created_at.desc()).all()"""
"एक API बनाओ जो पोस्ट्स को पेजिनेट (paginate) करे","""@app.route('/api/posts-paginated')\ndef get_paginated_posts():\n    page = request.args.get('page', 1, type=int)\n    pagination = Post.query.paginate(page=page, per_page=5)\n    return jsonify([...]) # Return paginated data"""
"एक यूज़र रजिस्ट्रेशन के लिए API एंडपॉइंट","""@app.route('/api/register', methods=['POST'])\ndef register():\n    # ... create user and hash password ...\n    return jsonify({'message': 'User created'})"""
"एक यूज़र लॉगइन के लिए API एंडपॉइंट जो JWT टोकन लौटाए","""@app.route('/api/login', methods=['POST'])\ndef login():\n    # ... check credentials ...\n    # token = create_jwt_token(...)\n    return jsonify({'token': token})"""
"एक प्रोटेक्टेड API रूट बनाओ जो JWT टोकन की जाँच करे","""@app.route('/api/protected')\n@jwt_required()\ndef protected():\n    return jsonify({'message': 'This is a protected route'})"""
"ब्लॉग के लिए एक 'Tag' मॉडल बनाओ (Many-to-Many)","""tags = db.Table('tags', ...)\nclass Post(db.Model):\n    tags = db.relationship('Tag', secondary=tags, backref='posts')"""
"एक पोस्ट को उसके टैग्स के साथ लौटाने वाला API","""@app.route('/api/posts/<int:id>')\ndef get_post_with_tags(id):\n    post = Post.query.get(id)\n    return jsonify({'title': post.title, 'tags': [tag.name for tag in post.tags]})"""
"एक सर्च API बनाओ जो टाइटल और कंटेंट में खोजे","""@app.route('/api/search')\ndef search():\n    query = request.args.get('q')\n    results = Post.query.filter(Post.title.contains(query) | Post.content.contains(query)).all()\n    return jsonify([...])"""
"Flask-CORS का उपयोग करके API पर CORS इनेबल करो","""from flask_cors import CORS\nCORS(app, resources={r'/api/*': {'origins': '*'}})"""
"Flask-SQLAlchemy में रिलेशनशिप के लिए `back_populates` का उपयोग करो","""class User(db.Model):\n    posts = db.relationship('Post', back_populates='author')\n\nclass Post(db.Model):\n    author = db.relationship('User', back_populates='posts')"""
"एक ब्लॉग पोस्ट पर 'लाइक' करने के लिए API","""@app.route('/api/posts/<int:id>/like', methods=['POST'])\ndef like_post(id):\n    post = Post.query.get(id)\n    post.likes += 1\n    db.session.commit()\n    return jsonify({'likes': post.likes})"""
"ब्लॉग पोस्ट मॉडल में `likes` कॉलम जोड़ो","""likes = db.Column(db.Integer, default=0)"""
"ब्लॉग पोस्ट्स को लाइक्स की संख्या के आधार पर सॉर्ट करो","""popular_posts = Post.query.order_by(Post.likes.desc()).limit(5).all()"""
"Flask में यूनिट टेस्ट के लिए एक टेस्ट डेटाबेस कॉन्फ़िगर करो","""app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///:memory:'"""
"एक API एंडपॉइंट का pytest से टेस्ट लिखो","""def test_get_posts(client):\n    response = client.get('/api/posts')\n    assert response.status_code == 200"""
"ब्लूप्रिंट का उपयोग करके एडमिन सेक्शन बनाओ","""admin_bp = Blueprint('admin', __name__, url_prefix='/admin')"""
"एक API बनाओ जो YAML डेटा लौटाए","""import yaml\n@app.route('/api/data.yaml')\ndef get_yaml():\n    data = {'a': 1}\n    return Response(yaml.dump(data), mimetype='text/yaml')"""
"Flask में एक कस्टम CLI कमांड बनाओ","""@app.cli.command('create-user')\n@click.argument('name')\ndef create_user(name):\n    # ... logic to create user ..."""
"SQLAlchemy में eager लोडिंग का उपयोग करो","""posts = Post.query.options(db.joinedload(Post.author)).all()"""
"SQLAlchemy में lazy लोडिंग का उपयोग करो","""# This is the default behavior\npost = Post.query.get(1)\n# The author is fetched from the DB only when you access it:\nprint(post.author.name)"""
"एक API बनाओ जो एक फाइल डाउनलोड करवाए","""from flask import send_file\n@app.route('/download')\ndef download_file():\n    return send_file('my_file.zip', as_attachment=True)"""
"अपने Flask ऐप के लिए एक `config.py` फाइल बनाओ","""# config.py\nclass Config:\n    SECRET_KEY = os.environ.get('SECRET_KEY')\n    SQLALCHEMY_DATABASE_URI = os.environ.get('DATABASE_URI')"""
"फैक्ट्री पैटर्न का उपयोग करके Flask ऐप बनाओ","""def create_app(config_class=Config):\n    app = Flask(__name__)\n    app.config.from_object(config_class)\n    db.init_app(app)\n    return app"""
"ब्लॉग पोस्ट में Markdown कंटेंट को सपोर्ट करो","""import markdown\n@app.route('/posts/<int:id>')\ndef show_post(id):\n    post = Post.query.get(id)\n    post.content_html = markdown.markdown(post.content)\n    return render_template('post.html', post=post)"""
"एक API बनाओ जो इमेज अपलोड को हैंडल करे","""@app.route('/api/upload', methods=['POST'])\ndef upload_image():\n    file = request.files['image']\n    # ... save file securely ...\n    return jsonify({'url': file_url})"""
"ब्लॉग पोस्ट मॉडल में एक 'status' फील्ड (draft, published) जोड़ो","""status = db.Column(db.String(10), default='draft', nullable=False)"""
"सिर्फ पब्लिश हुए पोस्ट्स को दिखाने वाला एक API बनाओ","""@app.route('/api/published-posts')\ndef get_published_posts():\n    posts = Post.query.filter_by(status='published').all()\n    return jsonify([...])"""
"SQLAlchemy में एक हाइब्रिड प्रॉपर्टी बनाओ","""from sqlalchemy.ext.hybrid import hybrid_property\nclass User(db.Model):\n    # ... first_name, last_name columns ...\n    @hybrid_property\n    def full_name(self):\n        return self.first_name + ' ' + self.last_name"""
"API रिस्पॉन्स के लिए एक कस्टम JSON एन्कोडर बनाओ","""import json\nfrom datetime import date\nclass CustomJSONEncoder(json.JSONEncoder):\n    def default(self, obj):\n        if isinstance(obj, date):\n            return obj.isoformat()\n        return super().default(obj)"""
"Flask में एक WebSocket का उपयोग करके रियल-टाइम नोटिफिकेशन भेजो","""# Using Flask-SocketIO\n@socketio.on('new_post_created')\ndef handle_new_post_notification(data):\n    emit('notification', {'message': 'A new post was created!'}, broadcast=True)"""
"पाइथन में UUID का उपयोग करके एक यूनिक आईडी जेनरेट करो","""import uuid\npublic_id = str(uuid.uuid4())"""
"ब्लॉग पोस्ट मॉडल में एक स्लग (slug) फील्ड जोड़ो","""slug = db.Column(db.String(120), unique=True, nullable=False, index=True)"""
"एक फंक्शन बनाओ जो टाइटल से एक स्लग जेनरेट करे","""import re\ndef slugify(text):\n    text = text.lower().strip()\n    text = re.sub(r'[^\\w\\s-]', '', text)\n    text = re.sub(r'[\\s_-]+', '-', text)\n    return text"""
"एक API बनाओ जो XML डेटा लौटाए (Jinja2 टेम्पलेट का उपयोग करके)","""@app.route('/feed.xml')\ndef get_xml_feed():\n    # ... get posts from db ...\n    return Response(render_template('feed.xml', posts=posts), mimetype='application/xml')"""
"एक पाइथन स्क्रिप्ट बनाओ जो कमांड-लाइन से एक नाम ले और उसे ग्रीट करे","import sys\nif len(sys.argv) > 1:\n    name = sys.argv[1]\n    print(f'Hello, {name}')"
"एक कमांड-लाइन कैलकुलेटर बनाओ जो दो नंबरों को जोड़े","import sys\nnum1 = int(sys.argv[1])\nnum2 = int(sys.argv[2])\nprint(num1 + num2)"
"`argparse` का उपयोग करके एक कमांड-लाइन टूल बनाओ","import argparse\nparser = argparse.ArgumentParser()\nparser.add_argument('filename')\nargs = parser.parse_args()"
"एक फाइल में लाइनों, शब्दों और कैरेक्टर्स की गिनती करने वाली स्क्रिप्ट","import sys\nfilename = sys.argv[1]\nlines, words, chars = 0, 0, 0\nwith open(filename, 'r') as f:\n    for line in f:\n        lines += 1\n        words += len(line.split())\n        chars += len(line)\nprint(f'Lines: {lines}, Words: {words}, Chars: {chars}')"
"पाइथन से एक सिंपल HTTP सर्वर शुरू करो","import http.server\nimport socketserver\nPORT = 8000\nHandler = http.server.SimpleHTTPRequestHandler\nwith socketserver.TCPServer(('', PORT), Handler) as httpd:\n    httpd.serve_forever()"
"एक फोल्डर की सभी '.jpg' फाइलों को '.jpeg' में रीनेम करो","import os\nfor filename in os.listdir('.'):\n    if filename.endswith('.jpg'):\n        os.rename(filename, filename[:-4] + '.jpeg')"
"एक स्क्रिप्ट बनाओ जो एक डायरेक्टरी में 1MB से बड़ी सभी फाइलों को ढूंढे","import os\nfor filename in os.listdir('.'):\n    if os.path.getsize(filename) > 1024 * 1024:\n        print(filename)"
"एक CSV फाइल को JSON में बदलने के लिए एक स्क्रिप्ट लिखो","import csv, json\ndata = []\nwith open('data.csv', 'r') as f:\n    for row in csv.DictReader(f):\n        data.append(row)\nwith open('data.json', 'w') as f:\n    json.dump(data, f, indent=4)"
"लॉग्स को एक फाइल में लिखो","import logging\nlogging.basicConfig(filename='app.log', level=logging.INFO)\nlogging.info('Program started')"
"`subprocess` मॉड्यूल का उपयोग करके एक शेल कमांड चलाओ","import subprocess\nsubprocess.run(['ls', '-l'])"
"एक फोल्डर को ज़िप (zip) करने के लिए एक स्क्रिप्ट लिखो","import shutil\nshutil.make_archive('my_archive', 'zip', 'folder_to_zip')"
"एक ज़िप फाइल को अनज़िप करो","import shutil\nshutil.unpack_archive('archive.zip', 'destination_folder')"
"पाइथन में एक एनवायरनमेंट वेरिएबल को पढ़ो","import os\napi_key = os.environ.get('API_KEY')"
"एक डायरेक्टरी ट्री को वॉक (walk) करो","import os\nfor dirpath, dirnames, filenames in os.walk('.'):\n    print(f'Directory: {dirpath}')\n    for file_name in filenames:\n        print(f'  {file_name}')"
"एक टेक्स्ट फाइल में एक शब्द को दूसरे से बदलो","with open('file.txt', 'r') as f: content = f.read()\nnew_content = content.replace('old', 'new')\nwith open('file.txt', 'w') as f: f.write(new_content)"
"एक डायरेक्टरी के सभी डुप्लीकेट फाइलों को ढूंढो (hash का उपयोग करके)","import hashlib, os\n# ... logic to calculate hashes and find duplicates ... "
"एक पासवर्ड जेनरेटर कमांड-लाइन टूल बनाओ","import random, string, argparse\nparser = argparse.ArgumentParser()\nparser.add_argument('length', type=int)\nargs = parser.parse_args()\npassword = ''.join(random.choice(string.ascii_letters) for _ in range(args.length))\nprint(password)"
"`platform` मॉड्यूल का उपयोग करके ऑपरेटिंग सिस्टम की जानकारी प्राप्त करो","import platform\nprint(f'OS: {platform.system()}, Version: {platform.version()}')"
"`pickle` का उपयोग करके एक पाइथन ऑब्जेक्ट को सेव करो","import pickle\nmy_data = {'a': 1}\nwith open('data.pkl', 'wb') as f:\n    pickle.dump(my_data, f)"
"`pickle` का उपयोग करके एक पाइथन ऑब्जेक्ट को लोड करो","import pickle\nwith open('data.pkl', 'rb') as f:\n    loaded_data = pickle.load(f)"
"`getpass` का उपयोग करके यूज़र से सुरक्षित रूप से पासवर्ड पूछो","import getpass\npassword = getpass.getpass('Enter your password: ')"
"पाइथन स्क्रिप्ट को 10 सेकंड के लिए रोको (sleep)","import time\nprint('Waiting...')\ntime.sleep(10)\nprint('Done waiting.')"
"एक स्क्रिप्ट के एक्सीक्यूशन समय को मापो","import time\nstart_time = time.time()\n# ... your long process ...\nend_time = time.time()\nprint(f'Duration: {end_time - start_time} seconds')"
"एक सिंपल API सर्वर बनाओ जो FastAPI का उपयोग करे","from fastapi import FastAPI\napp = FastAPI()\n@app.get('/')\ndef read_root(): return {'Hello': 'World'}"
"पाइथन में एक SQLite डेटाबेस से कनेक्ट करो","import sqlite3\nconn = sqlite3.connect('my_database.db')"
"SQLite डेटाबेस में एक टेबल बनाओ","import sqlite3\nconn = sqlite3.connect('db.db')\nc = conn.cursor()\nc.execute('CREATE TABLE users (id INT, name TEXT)')\nconn.commit()\nconn.close()"
"SQLite टेबल में डेटा इंसर्ट करो","import sqlite3\nconn = sqlite3.connect('db.db')\nc = conn.cursor()\nc.execute(\"INSERT INTO users VALUES (1, 'Amit')\")\nconn.commit()\nconn.close()"
"SQLite टेबल से डेटा सिलेक्ट करो","import sqlite3\nconn = sqlite3.connect('db.db')\nc = conn.cursor()\nfor row in c.execute('SELECT * FROM users'):\n    print(row)"
"एक Temporary Directory बनाओ","import tempfile\nwith tempfile.TemporaryDirectory() as tmpdir:\n    print('Created temporary directory', tmpdir)"
"एक टेक्स्ट फाइल की आखिरी N लाइनों को पढ़ो","def read_last_n_lines(filename, n):\n    with open(filename, 'r') as f:\n        return f.readlines()[-n:]"
"एक URL से एक फाइल डाउनलोड करो और प्रोग्रेस बार दिखाओ (tqdm)","from tqdm import tqdm\nimport requests\n# ... code to download a large file with a progress bar using tqdm ..."
"एक सिंपल कमांड-लाइन To-Do ऐप बनाओ (स्यूडो-कोड)","import sys\n# ... logic for a simple CLI to-do app that reads/writes to a file ..."
"`configparser` का उपयोग करके एक कॉन्फ़िगरेशन फाइल पढ़ो","import configparser\nconfig = configparser.ConfigParser()\nconfig.read('settings.ini')"
"एक पाइथन स्क्रिप्ट को बैकग्राउंड में चलाओ (daemonize)","import os\n# ... code for daemonizing a process using fork()..."
"पाइथन में मल्टीथ्रेडिंग का एक बेसिक उदाहरण","import threading\ndef task(): print('Task running')\n\nthread = threading.Thread(target=task)\nthread.start()"
"पाइथन में मल्टीप्रोसेसिंग का एक बेसिक उदाहरण","import multiprocessing\ndef worker(): print('Worker process')\n\nprocess = multiprocessing.Process(target=worker)\nprocess.start()"
"एक क्यू (Queue) का उपयोग करके थ्रेड्स के बीच डेटा शेयर करो","import queue, threading\nq = queue.Queue()\ndef producer(): q.put('hello')\ndef consumer(): item = q.get()\n\nt1 = threading.Thread(target=producer)\nt2 = threading.Thread(target=consumer)"
"एक पाइथन स्क्रिप्ट को एग्जीक्यूटेबल (executable) बनाओ (PyInstaller)","pyinstaller --onefile my_script.py"
"पाइथन से एक वेब ब्राउज़र खोलो","import webbrowser\nwebbrowser.open('https://google.com')"
"डाउनलोड फोल्डर में फाइलों को उनके एक्सटेंशन के आधार पर व्यवस्थित करो","import os, shutil\n# ... script to organize files in the Downloads folder ..."
"एक पाइथन स्क्रिप्ट जो एक वेबसाइट के डाउन होने पर अलर्ट भेजे","import requests, time\nwhile True:\n    try:\n        r = requests.get('http://example.com')\n        if r.status_code != 200:\n            print('Site is down!')\n    except:\n        print('Site is down!')\n    time.sleep(60)"
"एक इमेज का साइज़ बदलो (Pillow)","from PIL import Image\nimg = Image.open('in.jpg')\nresized = img.resize((200, 200))\nresized.save('out.jpg')"
"एक वॉटरमार्क को एक इमेज पर लगाओ","from PIL import Image, ImageDraw, ImageFont\n# ... code to add a text watermark to an image ..."
"एक डायरेक्टरी की सभी इमेजेज को कंप्रेस करो","import os\nfrom PIL import Image\n# ... script to loop through images and save with lower quality ..."
"एक MP3 फाइल से मेटाडेटा (ID3 tags) पढ़ो","from mutagen.mp3 import MP3\naudio = MP3('song.mp3')\nprint(audio.info.length)"
"एक PDF फाइल से टेक्स्ट निकालो (PyPDF2)","import PyPDF2\npdfFileObj = open('doc.pdf', 'rb')\npdfReader = PyPDF2.PdfReader(pdfFileObj)"
"कई PDF फाइलों को एक में मर्ज करो","from PyPDF2 import PdfMerger\nmerger = PdfMerger()\nfor pdf in ['file1.pdf', 'file2.pdf']:\n    merger.append(pdf)\nmerger.write('merged.pdf')"
"पाइथन से एक QR कोड बनाओ","import qrcode\nimg = qrcode.make('Some data to encode')\nimg.save('qrcode.png')"
"पाइथन से वाई-फाई नेटवर्क के लिए एक QR कोड बनाओ","import qrcode\n# ... code to generate a Wi-Fi QR code ..."
"Chart.js लाइब्रेरी को HTML में शामिल करो","<script src='https://cdn.jsdelivr.net/npm/chart.js'></script>"
"एक बार चार्ट (bar chart) बनाने के लिए एक कैनवास एलिमेंट बनाओ","<div style='width: 400px;'><canvas id='myBarChart'></canvas></div>"
"Chart.js का उपयोग करके एक सिंपल बार चार्ट बनाओ","<canvas id='c1'></canvas><script>new Chart(document.getElementById('c1'),{type:'bar',data:{labels:['January','February'], datasets:[{label:'Monthly Sales', data:[65, 59]}]}});</script>"
"Chart.js का उपयोग करके एक सिंपल लाइन चार्ट बनाओ","<canvas id='c2'></canvas><script>new Chart(document.getElementById('c2'),{type:'line',data:{labels:['Day 1','Day 2'], datasets:[{label:'Website Traffic', data:[100,150], fill:false, borderColor:'rgb(75, 192, 192)'}]}});</script>"
"Chart.js का उपयोग करके एक सिंपल पाई चार्ट बनाओ","<canvas id='c3'></canvas><script>new Chart(document.getElementById('c3'),{type:'pie',data:{labels:['Red','Blue','Yellow'], datasets:[{data:[300,50,100], backgroundColor:['Red','Blue','Yellow']}]}});</script>"
"Chart.js का उपयोग करके एक डोनट चार्ट (doughnut chart) बनाओ","<canvas id='c4'></canvas><script>new Chart(document.getElementById('c4'),{type:'doughnut',data:{...}});</script>"
"Chart.js का उपयोग करके एक रडार चार्ट (radar chart) बनाओ","<canvas id='c5'></canvas><script>new Chart(document.getElementById('c5'),{type:'radar',data:{labels:['Coding','Eating','Sleeping'], datasets:[{label:'My Skills', data:[9,7,8]}]}});</script>"
"Chart.js का उपयोग करके एक पोलर एरिया चार्ट (polar area chart) बनाओ","<canvas id='c6'></canvas><script>new Chart(document.getElementById('c6'),{type:'polarArea',data:{...}});</script>"
"एक चार्ट में टाइटल जोड़ो","options: { plugins: { title: { display: true, text: 'Custom Chart Title' } } }"
"एक चार्ट में लीजेंड (legend) को छिपाओ","options: { plugins: { legend: { display: false } } }"
"एक बार चार्ट के बार्स का रंग बदलो","datasets: [{ label: 'Data', data: [12, 19], backgroundColor: ['rgba(255, 99, 132, 0.2)', 'rgba(54, 162, 235, 0.2)'] }]"
"एक लाइन चार्ट की लाइन का रंग और मोटाई बदलो","datasets: [{ label: 'Data', data: [10, 20], borderColor: 'green', borderWidth: 3 }]"
"AJAX का उपयोग करके एक चार्ट का डेटा डायनामिक रूप से लोड करो","<script>fetch('/api/chart-data').then(res => res.json()).then(chartData => { new Chart(..., { data: chartData }); });</script>"
"एक बटन क्लिक पर चार्ट को अपडेट करो","<script>myChart.data.datasets[0].data = [50, 60, 70]; myChart.update();</script>"
"D3.js लाइब्रेरी को HTML में शामिल करो","<script src='https://d3js.org/d3.v7.min.js'></script>"
"D3.js का उपयोग करके एक सिंपल SVG एलिमेंट बनाओ","<div id='d3-container'></div><script>const svg = d3.select('#d3-container').append('svg').attr('width', 200).attr('height', 100);</script>"
"D3.js का उपयोग करके एक सर्किल बनाओ","<script>/*...after creating svg...*/ svg.append('circle').attr('cx', 50).attr('cy', 50).attr('r', 40).style('fill', 'blue');</script>"
"D3.js का उपयोग करके एक रेक्टेंगल बनाओ","<script>/*...after creating svg...*/ svg.append('rect').attr('x', 10).attr('y', 10).attr('width', 80).attr('height', 80).style('fill','green');</script>"
"D3.js में डेटा के आधार पर कई बार्स बनाओ","<script>const data=[10, 40, 32, 68]; const svg = d3.select('svg'); svg.selectAll('rect').data(data).enter().append('rect').attr('height', d=>d);</script>"
"D3.js में एक लीनियर स्केल (scale) बनाओ","<script>const xScale = d3.scaleLinear().domain([0, 100]).range([0, 500]);</script>"
"D3.js में एक एक्सिस (axis) बनाओ","<script>const xAxis = d3.axisBottom(xScale); svg.append('g').attr('transform', 'translate(0, 100)').call(xAxis);</script>"
"D3.js में एक ट्रांजीशन (transition) का उपयोग करो","<script>d3.select('circle').transition().duration(1000).attr('r', 10).style('fill', 'red');</script>"
"D3.js में एक माउसओवर इवेंट जोड़ो","<script>d3.selectAll('rect').on('mouseover', function(){ d3.select(this).style('fill', 'orange'); }).on('mouseout', function(){ d3.select(this).style('fill', 'green'); });</script>"
"D3.js का उपयोग करके एक CSV फाइल लोड करो","<script>d3.csv('my_data.csv').then(function(data) { console.log(data[0]); });</script>"
"D3.js का उपयोग करके एक JSON फाइल लोड करो","<script>d3.json('my_data.json').then(function(data) { console.log(data); });</script>"
"Chart.js में एक हॉरिजॉन्टल बार चार्ट बनाओ","<script>new Chart(ctx, {type:'bar', data: data, options: { indexAxis: 'y' }});</script>"
"Chart.js में एक स्टैक्ड बार चार्ट (stacked bar chart) बनाओ","<script>new Chart(ctx, {type:'bar', data: data, options: { scales: { x: { stacked: true }, y: { stacked: true } } }});</script>"
"Chart.js में एक बबल चार्ट (bubble chart) बनाओ","<script>new Chart(ctx, {type:'bubble', data: { datasets: [{label:'My Data', data:[{x:10,y:20,r:15}, {x:15,y:10,r:25}]}] }});</script>"
"Chart.js में एक स्कैटर चार्ट (scatter chart) बनाओ","<script>new Chart(ctx, {type:'scatter', data: { datasets: [{label:'Scatter Data', data:[{x:1,y:2},{x:3,y:4},{x:2,y:5}]}] }});</script>"
"एक चार्ट के टूलटिप्स (tooltips) को कस्टमाइज करो","options: { plugins: { tooltip: { callbacks: { label: function(context){ return `Value: ${context.parsed.y}`; } } } } }"
"एक चार्ट के एक्सिस लेबल्स को बदलो","options: { scales: { y: { title: { display: true, text: 'Total Sales ($)' } } } }"
"D3.js में एक पाई चार्ट का लेआउट बनाओ","<script>const pieGenerator = d3.pie(); const data_ready_for_pie = pieGenerator([10,20,30]);</script>"
"D3.js में एक आर्क (arc) जेनरेटर बनाओ","<script>const arcGenerator = d3.arc().innerRadius(50).outerRadius(100);</script>"
"D3.js में एक फोर्स-डायरेक्टेड ग्राफ (force-directed graph) का ढाँचा","<script>const simulation = d3.forceSimulation(nodes).force('link', d3.forceLink(links).id(d => d.id)).force('charge', d3.forceManyBody());</script>"
"एक मैप (जैसे भारत का) बनाने के लिए TopoJSON और D3.js का उपयोग करो","<script>d3.json('india_topo.json').then(function(topology) { const geojson = topojson.feature(topology, topology.objects.india); /* draw map with d3.geoPath() */ });</script>"
"Google Charts का उपयोग करके एक गेज चार्ट (gauge chart) बनाओ","<script type='text/javascript' src='https://www.gstatic.com/charts/loader.js'></script><script>google.charts.load('current', {'packages':['gauge']}); google.charts.setOnLoadCallback(drawChart); function drawChart(){...}</script>"
"Highcharts का उपयोग करके एक 3D कॉलम चार्ट बनाओ","<script src='https://code.highcharts.com/highcharts.js'></script><script src='https://code.highcharts.com/highcharts-3d.js'></script><div id='container'></div><script>Highcharts.chart('container', {chart:{type:'column', options3d:{enabled:true}}, ...});</script>"
"Leaflet.js का उपयोग करके एक इंटरैक्टिव मैप बनाओ","<link rel='stylesheet' href='https://unpkg.com/leaflet/dist/leaflet.css' /><script src='https://unpkg.com/leaflet/dist/leaflet.js'></script><div id='mapid' style='height: 200px;'></div><script>var mymap = L.map('mapid').setView([26.84, 80.94], 13); L.marker([26.84, 80.94]).addTo(mymap);</script>"
"एक Flask API बनाओ जो चार्ट के लिए डायनामिक डेटा लौटाए","@app.route('/api/monthly-sales')\ndef monthly_sales_data():\n    data = {'labels':['Jan','Feb'], 'values':[100,120]}\n    return jsonify(data)"
"Chart.js में एक मिक्सड-टाइप (mixed-type) चार्ट बनाओ (बार और लाइन)","<script>new Chart(ctx, {data: {datasets:[{type:'bar', label:'Bar Data', data:[10,20]},{type:'line', label:'Line Data', data:[15,15]}]}})</script>"
"एक चार्ट में एक बटन से नया डेटा जोड़ो","<script>function addDataToChart(chart, label, data) { chart.data.labels.push(label); chart.data.datasets.forEach((dataset) => { dataset.data.push(data); }); chart.update(); }</script>"
"एक चार्ट से डेटा को हटाओ","<script>function removeDataFromChart(chart) { chart.data.labels.pop(); chart.data.datasets.forEach((dataset) => { dataset.data.pop(); }); chart.update(); }</script>"
"D3.js में एक ब्रश करने योग्य (brushable) स्कैटर प्लॉट बनाओ","<script>const brush = d3.brush().extent([[0,0],[w,h]]).on('start brush end', brushed); svg.append('g').call(brush);</script>"
"एक चार्ट को responsive बनाओ","options: { responsive: true, maintainAspectRatio: false }"
"D3.js में एक ट्रीमैप (treemap) लेआउट बनाओ","<script>const root = d3.hierarchy(data).sum(d => d.value); const treemapLayout = d3.treemap().size([500, 500]).padding(1); treemapLayout(root);</script>"
"Plotly.js का उपयोग करके एक 3D सरफेस प्लॉट बनाओ","<script src='https://cdn.plot.ly/plotly-latest.min.js'></script><div id='myDiv3D'></div><script>Plotly.newPlot('myDiv3D', data, layout);</script>"
"Chart.js में एक टाइमलाइन चार्ट बनाओ","<script>new Chart(ctx, {type:'bar', options:{indexAxis:'y', ...}})</script>"
"एक स्पार्कलाइन (Sparkline) चार्ट बनाओ",""
"एक सनबर्स्ट (Sunburst) चार्ट का कॉन्सेप्ट","// A hierarchical chart, similar to a treemap, but represented by a radial layout. Each level of the hierarchy is a ring."
"एक प्रोडक्ट कार्ड कॉम्पोनेन्ट बनाओ","<div class='product-card' style='border:1px solid #ddd; width:200px; text-align:center;'><img src='product.jpg' width='100%' alt='Product'><h3 class='product-title'>Product Name</h3><p class='product-price'>$19.99</p><button>Add to Cart</button></div>"
"एक प्रोडक्ट ग्रिड लेआउट बनाओ","<div class='product-grid' style='display:grid; grid-template-columns:repeat(auto-fit, minmax(200px, 1fr)); gap:15px;'>...product cards here...</div>"
"एक 'Add to Cart' बटन बनाओ जो एक आइटम को कार्ट में जोड़े","<button onclick=""addToCart({id: 'prod123', name: 'Cool Laptop', price: 999.99})"">Add to Cart</button><script>let shoppingCart=[]; function addToCart(product){shoppingCart.push(product); console.log('Cart:', shoppingCart);}</script>"
"शॉपिंग कार्ट में आइटम्स की संख्या दिखाने वाला एक आइकन बनाओ","<div id='cart-icon-wrapper'>🛒 Cart (<span id='cart-item-count'>0</span>)</div>"
"शॉपिंग कार्ट का UI बनाओ जिसमें आइटम्स और टोटल हो","<div class='shopping-cart-summary'><h2>Your Cart</h2><ul id='cart-items-list'><li>Laptop - $999.99</li></ul><p style='font-weight:bold;'>Total: $<span id='cart-total-price'>999.99</span></p></div>"
"जावास्क्रिप्ट में शॉपिंग कार्ट के टोटल की गणना करो","function calculateCartTotal(){\n  let total = shoppingCart.reduce((sum, item) => sum + item.price, 0);\n  document.getElementById('cart-total-price').innerText = total.toFixed(2);\n}"
"एक प्रोडक्ट की मात्रा (quantity) को बदलने के लिए एक इनपुट बनाओ","<input type='number' value='1' min='1' onchange='updateProductQuantityInCart(123, this.value)'>"
"एक चेकआउट फॉर्म का ढाँचा बनाओ","<form id='checkout-form'><fieldset><legend>Shipping Address</legend><input placeholder='Full Name'>...</fieldset><fieldset><legend>Payment Details</legend><input placeholder='Card Number'>...</fieldset><button type='submit'>Place Order</button></form>"
"प्रोडक्ट्स को फ़िल्टर करने के लिए एक साइडबार बनाओ","<aside><h3>Filters</h3><div class='filter-group'><h4>Category</h4><input type='checkbox'> Electronics<br><input type='checkbox'> Books</div></aside>"
"एक प्रोडक्ट सर्च बार बनाओ","<input type='search' placeholder='Search for products...'>"
"एक प्रोडक्ट पेज पर इमेज थंबनेल गैलरी बनाओ","<img id='main-product-image' src='img-large-1.jpg' width='300'><div class='thumbnails'><img src='img-thumb-1.jpg' onclick=""document.getElementById('main-product-image').src='img-large-1.jpg'""> <img src='img-thumb-2.jpg' onclick=""document.getElementById('main-product-image').src='img-large-2.jpg'""></div>"
"एक स्टार रेटिंग डिस्प्ले कॉम्पोनेन्ट बनाओ (जैसे 4.5 स्टार्स)","<div class='star-rating' style='color:orange;'><span>★★★★</span><span style='color:grey'>★</span> (4.5)</div>"
"एक 'Sale' (बिक्री) बैज बनाओ","<div style='position:relative; display:inline-block;'><img src='product.jpg' width='150'><span style='position:absolute; top:10px; left:10px; background:red; color:white; padding:5px; border-radius:3px;'>SALE</span></div>"
"एक 'Out of Stock' (स्टॉक में नहीं) लेबल दिखाओ","<button disabled style='background:grey; color:white;'>Out of Stock</button>"
"एक इच्छा-सूची (wishlist) में जोड़ने के लिए एक बटन बनाओ","<button onclick='addToWishlist(123)'>❤️ Add to Wishlist</button>"
"प्रोडक्ट्स को कीमत के आधार पर सॉर्ट करने के लिए एक ड्रॉपडाउन","<label>Sort by:</label><select onchange='sortProductsBy(this.value)'><option value='price_asc'>Price: Low to High</option><option value='price_desc'>Price: High to Low</option></select>"
"एक प्रोडक्ट की तुलना (compare) करने के लिए चेकबॉक्स बनाओ","<label><input type='checkbox' onchange='compareProduct(123, this.checked)'> Compare</label>"
"एक 'Quick View' मोडल (modal) बनाओ","<button onclick=""showQuickViewModal(123)"">Quick View</button>"
"एक 'Related Products' (संबंधित उत्पाद) सेक्शन बनाओ","<section><h2>Related Products</h2><div class='product-grid'>...product cards...</div></section>"
"एक ई-कॉमर्स ब्रेडक्रंब (breadcrumb) नेविगेशन बनाओ","<nav aria-label='breadcrumb'>Home > Electronics > Laptops</nav>"
"एक डिस्काउंट कूपन अप्लाई करने के लिए एक इनपुट फील्ड बनाओ","<input placeholder='Enter Coupon Code'><button>Apply Coupon</button>"
"शिपिंग विकल्पों के लिए रेडियो बटन बनाओ","<div><label><input type='radio' name='shipping_option'> Standard Shipping ($5.00)</label></div><div><label><input type='radio' name='shipping_option'> Express Shipping ($15.00)</label></div>"
"एक प्रोडक्ट ज़ूम इफ़ेक्ट बनाओ जो होवर पर काम करे","<style>.zoom-image-container:hover img{transform:scale(1.2);}</style><div class='zoom-image-container' style='width:200px; overflow:hidden;'><img src='product.jpg' style='transition:transform 0.3s;'></div>"
"एक 'Recently Viewed' (हाल ही में देखे गए) प्रोडक्ट्स का सेक्शन बनाओ","<section><h2>Your Recently Viewed Items</h2><div id='recently-viewed-items-container'></div></section>"
"एक प्रोडक्ट के लिए कस्टमर रिव्यु (review) सेक्शन बनाओ","<div class='customer-reviews'><h3>Customer Reviews (4.5/5)</h3><div class='review'><strong>Amit</strong> - ★★★★☆ - <p>Great product!</p></div></div>"
"एक रिव्यु सबमिट करने के लिए एक फॉर्म बनाओ","<form><label>Your Rating:</label><select><option>1</option><option>2</option>...</select><br><label>Your Review:</label><textarea></textarea><br><button>Submit Review</button></form>"
"एक 'Best Sellers' (सबसे ज़्यादा बिकने वाले) सेक्शन बनाओ","<section><h2>Our Best Sellers</h2>...</section>"
"एक 'New Arrivals' (नए आगमन) सेक्शन बनाओ","<section><h2>New Arrivals</h2>...</section>"
"एक प्रोडक्ट के विभिन्न रंगों (color swatches) को दिखाओ","<div class='color-swatches'><span style='background:red; width:25px; height:25px; display:inline-block; border:1px solid #ccc; cursor:pointer;'></span> <span style='background:blue; ...'></span></div>"
"प्रोडक्ट के विभिन्न साइज़ चुनने के लिए बटन बनाओ","<div class='size-selector'><button>S</button> <button>M</button> <button>L</button> <button>XL</button></div>"
"एक 'Add to Cart' कन्फर्मेशन मैसेज दिखाओ","<div id='add-to-cart-confirmation' style='display:none; color:green;'>Product added to cart successfully!</div>"
"शॉपिंग कार्ट से एक आइटम को हटाने के लिए एक बटन","<li id='cart-item-123'>Laptop <button onclick=""document.getElementById('cart-item-123').remove()"">Remove</button></li>"
"चेकआउट पेज पर आर्डर का सारांश (order summary) दिखाओ","<div class='order-summary'><h3>Order Summary</h3><p>Subtotal: $999.99</p><p>Shipping: $5.00</p><strong>Total: $1004.99</strong></div>"
"एक 'Notify Me' फॉर्म बनाओ जब प्रोडक्ट स्टॉक में न हो","<p>This item is out of stock.</p><form><label>Enter your email to be notified:</label><input type='email'><button>Notify Me</button></form>"
"एक 'Size Chart' (साइज़ चार्ट) लिंक बनाओ जो एक मोडल खोले","<a href='#' onclick=""showSizeChartModal()"">View Size Chart</a>"
"एक 'Gift Wrap' (गिफ्ट रैप) विकल्प के लिए एक चेकबॉक्स","<label><input type='checkbox'> Add gift wrap (+$2.00)</label>"
"एक प्रोडक्ट की डिलीवरी की अनुमानित तारीख दिखाओ","<p style='color:green;'>Estimated delivery: October 15, 2025</p>"
"सोशल मीडिया पर एक प्रोडक्ट को शेयर करने के लिए बटन","<button>Share on Facebook</button> <button>Share on Twitter</button>"
"एक 'Customers who bought this also bought' सेक्शन","<section><h2>Customers also bought</h2>...</section>"
"एक प्रोडक्ट के लिए FAQ (प्रश्न-उत्तर) सेक्शन","<section><h2>Questions & Answers</h2><details><summary>Is this waterproof?</summary><p>No, it is water-resistant.</p></details></section>"
"एक 'Terms and Conditions' चेकबॉक्स जो चेकआउट पर ज़रूरी हो","<label><input type='checkbox' required> I have read and agree to the Terms and Conditions.</label>"
"पेमेंट मेथड (Credit Card, PayPal) चुनने के लिए आइकन","<div><img src='visa_icon.png' alt='Visa'> <img src='mastercard_icon.png' alt='Mastercard'> <img src='paypal_icon.png' alt='PayPal'></div>"
"एक 'Track Order' पेज का UI बनाओ","<form><label>Enter your Order ID:</label><input type='text' placeholder='eg. 12345'><button>Track Order</button></form>"
"एक 'My Account' पेज का डैशबोर्ड UI","<div class='account-dashboard'><h3>My Account</h3><ul><li><a href='/orders'>Order History</a></li><li><a href='/profile'>My Profile</a></li><li><a href='/logout'>Logout</a></li></ul></div>"
"एक 'Order History' टेबल बनाओ","<table border='1'><thead><tr><th>Order ID</th><th>Date</th><th>Total</th><th>Status</th></tr></thead><tbody><tr><td>#123</td><td>2025-10-01</td><td>$50</td><td>Shipped</td></tr></tbody></table>"
"एक 'Write a Review' बटन जो एक फॉर्म खोले","<button>Write a Review for this product</button>"
"एक इनवॉइस (invoice) का HTML टेम्पलेट बनाओ","<div class='invoice-box' style='border:1px solid; padding:20px;'><h1>Invoice</h1>...</div>"
"एक 'Abandoned Cart' ईमेल का कॉन्सेप्ट","// An automated email sent to a user who has added items to their shopping cart but did not complete the purchase, reminding them of their items."
"अपसेल (Upsell) और क्रॉस-सेल (Cross-sell) का कॉन्सेप्ट","// Upsell: Encouraging a customer to buy a more expensive, upgraded version of a product. Cross-sell: Encouraging a customer to buy related or complementary items."
"पेज लोड होने पर सभी ब्लॉग पोस्ट्स को फेच करो और दिखाओ","""<div id='posts-container'></div>\n<script>\nwindow.addEventListener('DOMContentLoaded', () => {\n  fetch('/api/posts').then(res => res.json()).then(posts => {\n    const container = document.getElementById('posts-container');\n    posts.forEach(post => {\n      container.innerHTML += `<h2><a href='#' onclick='fetchPost(${post.id})'>${post.title}</a></h2>`;\n    });\n  });\n});\n</script>"""
"एक लिंक पर क्लिक करके एक सिंगल पोस्ट का कंटेंट फेच करो और दिखाओ","""<div id='single-post-view'></div>\n<script>\nfunction fetchPost(id) {\n  fetch(`/api/posts/${id}`).then(res => res.json()).then(post => {\n    document.getElementById('single-post-view').innerHTML = `<h1>${post.title}</h1><p>${post.content}</p>`;\n  });\n}\n</script>"""
"एक नया ब्लॉग पोस्ट बनाने के लिए एक HTML फॉर्म बनाओ","""<form id='new-post-form'>\n  <input id='title-input' placeholder='Title' required>\n  <br><br>\n  <textarea id='content-input' placeholder='Content' required></textarea>\n  <br><br>\n  <button type='submit'>Create Post</button>\n</form>"""
"AJAX का उपयोग करके नया पोस्ट बनाने वाले फॉर्म को सबमिट करो","""<script>\ndocument.getElementById('new-post-form').addEventListener('submit', event => {\n  event.preventDefault();\n  const title = document.getElementById('title-input').value;\n  const content = document.getElementById('content-input').value;\n  fetch('/api/posts', {\n    method: 'POST',\n    headers: {'Content-Type': 'application/json'},\n    body: JSON.stringify({title: title, content: content})\n  }).then(res => res.json()).then(data => console.log('New post created with ID:', data.id));\n});\n</script>"""
"एक पोस्ट को डिलीट करने के लिए एक बटन बनाओ","""<button onclick=""deletePost(5)"">Delete Post 5</button>\n<script>\nfunction deletePost(id) {\n  if(confirm('Are you sure you want to delete this post?')){\n    fetch(`/api/posts/${id}`, { method: 'DELETE' }).then(() => alert('Post deleted'));\n  }\n}\n</script>"""
"एक पोस्ट को एडिट करने के लिए एक फॉर्म दिखाओ","""<button onclick=""showEditForm(5)"">Edit Post 5</button>\n<div id='edit-form-container'></div>\n<script>\nfunction showEditForm(id) {\n    // fetch post data and populate an edit form in the container\n}\n</script>"""
"जावास्क्रिप्ट से एक डायनामिक सर्च फंक्शन बनाओ","""<input placeholder='Search blog posts...' onkeyup=""fetch('/api/search?q='+this.value).then(res => res.json()).then(results => {\n  // ... code to display search results on the page ...\n});"">"""
"पेजिनेशन बटन्स (Next/Previous) के लिए जावास्क्रिप्ट लिखो","""let currentPage = 1;\nfunction loadPostsForPage(page) {\n  fetch(`/api/posts-paginated?page=${page}`).then(res => res.json()).then(data => {\n    // ... display posts for the given page ...\n    currentPage = page;\n  });\n}"""
"एक 'Load More' बटन बनाओ जो और पोस्ट्स लोड करे","""<button id='load-more-btn' onclick=""loadPostsForPage(currentPage + 1)"">Load More</button>"""
"एक पोस्ट पर कमेंट करने के लिए एक फॉर्म बनाओ","""<form onsubmit=""addCommentToPost(5, this.comment.value); return false;"">\n  <input name='comment' placeholder='Write a comment...'>\n  <button type='submit'>Submit Comment</button>\n</form>"""
"एक पोस्ट के सभी कमेंट्स को फेच करो और दिखाओ","""<ul id='comments-list-for-post-5'></ul>\n<script>\nfetch('/api/posts/5/comments').then(res => res.json()).then(comments => {\n  const list = document.getElementById('comments-list-for-post-5');\n  comments.forEach(comment => { list.innerHTML += `<li>${comment.text}</li>`; });\n});\n</script>"""
"एक 'Like' बटन बनाओ जो API को कॉल करे और लाइक काउंट अपडेट करे","""<p>Likes: <span id='like-count-for-post-5'>10</span></p>\n<button onclick=""fetch('/api/posts/5/like', {method:'POST'}).then(res=>res.json()).then(data=>document.getElementById('like-count-for-post-5').innerText=data.likes);"">👍 Like</button>"""
"यूज़र रजिस्ट्रेशन के लिए एक AJAX फॉर्म बनाओ","""<form id='registration-form'>...</form>\n<script>// JavaScript to submit registration form data as a JSON object via a fetch POST request</script>"""
"यूज़र लॉगइन के लिए एक AJAX फॉर्म बनाओ और JWT टोकन को localStorage में सेव करो","""<script>\n// ... inside form submit event listener ...\nfetch('/api/login', ...).then(res => res.json()).then(data => {\n  if (data.token) {\n    localStorage.setItem('jwt_token', data.token);\n    window.location.href = '/dashboard'; // redirect to dashboard\n  }\n});\n</script>"""
"हर प्रोटेक्टेड API रिक्वेस्ट के साथ JWT टोकन भेजो","""<script>\nconst token = localStorage.getItem('jwt_token');\nfetch('/api/protected-route', { \n    headers: {\n        'Authorization': `Bearer ${token}`\n    }\n});\n</script>"""
"एक लॉगआउट बटन बनाओ जो JWT टोकन को localStorage से हटाए","""<button onclick=""localStorage.removeItem('jwt_token'); window.location.href = '/login';"">Logout</button>"""
"Markdown कंटेंट को HTML में बदलने के लिए एक लाइब्रेरी (जैसे Showdown.js) का उपयोग करो","""<script src='https://cdnjs.cloudflare.com/ajax/libs/showdown/2.1.0/showdown.min.js'></script>\n<script>\n  const converter = new showdown.Converter();\n  const markdownText = '# Hello\\n**This is bold.**';\n  const html = converter.makeHtml(markdownText);\n</script>"""
"API से मिले Markdown कंटेंट को पेज पर रेंडर करो","""fetch('/api/posts/1').then(res => res.json()).then(post => {\n  const converter = new showdown.Converter();\n  const htmlContent = converter.makeHtml(post.content);\n  document.getElementById('post-content-div').innerHTML = htmlContent;\n});"""
"तारीख को एक रीडेबल फॉर्मेट में दिखाने के लिए एक जावास्क्रिप्ट फंक्शन","""function formatReadableDate(isoString) {\n  return new Date(isoString).toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' });\n}"""
"एक लोडिंग स्पिनर दिखाओ जब API कॉल चल रही हो","""function fetchDataWithLoader(){\n  document.getElementById('loader-spinner').style.display = 'block';\n  fetch('...').finally(() => {\n    document.getElementById('loader-spinner').style.display = 'none';\n  });\n}"""
"API से एरर आने पर यूज़र को एक एरर मैसेज दिखाओ","""<p id='error-display-area' style='color:red;'></p>\n<script>\nfetch('/api/invalid-endpoint').catch(error => {\n  document.getElementById('error-display-area').innerText = 'An error occurred while loading data.';\n});\n</script>"""
"एक 'Single Page Application' (SPA) का बेसिक राउटर बनाओ","""<script>\nwindow.onhashchange = function() {\n  const page = window.location.hash.substring(1);\n  // Logic to show content based on the 'page' variable (e.g., #/about, #/contact)\n}\n</script>"""
"वेबसाइट में एक सिंपल डार्क मोड टॉगल बनाओ","""<button onclick=""document.body.classList.toggle('dark-mode')"">Toggle Dark Mode</button>\n<style>.dark-mode { background: #333; color: white; }</style>"""
"एक ब्लॉग पोस्ट के लिए 'टैग्स' की लिस्ट दिखाओ","""// Assuming API returns post.tags = [{name:'tech'}, {name:'python'}]\nconst tagsHtml = post.tags.map(tag => `<span class='tag'>${tag.name}</span>`).join(' ');"""
"एक ब्लॉग पोस्ट के लेखक का नाम दिखाओ","""// Assuming API returns post.author = {username: 'Amit'}\ndocument.getElementById('author-name').innerText = `By ${post.author.username}`;"""
"एक नया पोस्ट बनाने के बाद पेज को री-रेंडर करो (बिना रीलोड किए)","""fetch('/api/posts', {method:'POST',...}).then(() => {\n  // Clear the form and call the function that fetches and renders all posts again\n  fetchAllPosts();\n});"""
"URL से पोस्ट ID निकालो और उस पोस्ट को फेच करो","""<script>\nconst pathParts = window.location.pathname.split('/');\nconst postId = pathParts[pathParts.length - 1];\nif(postId && !isNaN(postId)) {\n  fetchPost(postId);\n}\n</script>"""
"WebSocket का उपयोग करके रियल-टाइम कमेंट्स दिखाओ","""<script>\nconst socket = io(); // from socket.io.js\nsocket.on('new_comment_for_post_5', function(comment) {\n  // Add the new comment to the comments list dynamically without reloading the page\n});\n</script>"""
"WebSocket से कनेक्ट करने के लिए जावास्क्रिप्ट कोड","""<script src='https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.0.1/socket.io.js'></script>\n<script>var socket = io.connect('http://' + document.domain + ':' + location.port);</script>"""
"यूज़र को एक पोस्ट एडिट करने के लिए एक इन-प्लेस एडिटर दो (`contenteditable`)","""<div id='content-div' ondblclick=""this.contentEditable=true; this.focus();"">Double click to edit this text.</div>"""
"फ्रंटएंड पर फॉर्म वैलिडेशन (ईमेल) करो","""<form onsubmit=""const email = this.email.value; if(!email.includes('@') || !email.includes('.')){alert('Please enter a valid email address'); return false;}""><input name='email' type='email'></form>"""
"API से मिले पेजिनेशन डेटा को हैंडल करो और बटन को डिसेबल करो","""// API returns { 'posts': [...], 'has_next': true, 'next_page': 3 }\nif (!data.has_next) {\n  document.getElementById('load-more-button').disabled = true;\n}"""
"एक इमेज अपलोड फॉर्म बनाओ जो `FormData` का उपयोग करे","""<input type='file' id='image-file-input'>\n<script>\nfunction uploadImage(){\n  const fileInput = document.getElementById('image-file-input');\n  if (fileInput.files.length > 0) {\n      const formData = new FormData();\n      formData.append('image', fileInput.files[0]);\n      fetch('/api/upload', {method:'POST', body:formData});\n  }\n}\n</script>"""
"एक 'infinite scroll' फीचर बनाओ","""<script>\nconst contentEl = document.getElementById('content');\nwindow.addEventListener('scroll', () => {\n  const { scrollTop, scrollHeight, clientHeight } = document.documentElement;\n  if (scrollTop + clientHeight >= scrollHeight - 5) {\n    // Load more posts when user is near the bottom\n  }\n});\n</script>"""
"एक 'debounce' फंक्शन का उपयोग करके सर्च API कॉल्स को ऑप्टिमाइज़ करो","""<script>\nfunction debounce(func, delay=300) {\n  let timeout;\n  return function(...args) {\n    clearTimeout(timeout);\n    timeout = setTimeout(() => { func.apply(this, args); }, delay);\n  };\n}\nconst efficientSearch = debounce(searchTerm => fetch('/api/search?q='+searchTerm));\n</script>"""
"एक 'throttle' फंक्शन का उपयोग करके स्क्रॉल इवेंट्स को ऑप्टिमाइज़ करो","""<script>\nfunction throttle(func, limit) { \n  let inThrottle;\n  return function() {\n    if (!inThrottle) {\n      func.apply(this, arguments);\n      inThrottle = true;\n      setTimeout(() => inThrottle = false, limit);\n    }\n  }\n}\nwindow.addEventListener('scroll', throttle(() => console.log('Scrolled!'), 100));\n</script>"""
"एक ब्राउज़र नोटिफिकेशन (Notification API) भेजो","""<button onclick=""Notification.requestPermission().then(permission => { if (permission === 'granted') { new Notification('New Blog Post Available!'); } });"">Enable Notifications</button>"""
"एक पोस्ट को शेयर करने के लिए Web Share API का उपयोग करो","""<button onclick=""if(navigator.share){navigator.share({title: 'My Awesome Blog Post', url: '/posts/1'})} else {alert('Share not supported')}"">Share Post</button>"""
"फ्रंटएंड पर एक JSON ऑब्जेक्ट को सुंदर तरीके से दिखाओ","""<pre id='json-display-output'></pre>\n<script>\nconst myJsonObject = { id: 1, name: 'Amit', is_active: true };\ndocument.getElementById('json-display-output').textContent = JSON.stringify(myJsonObject, null, 2);\n</script>"""
"एक पोस्ट को localStorage का उपयोग करके 'बुकमार्क' करो","""<button onclick=""localStorage.setItem('bookmarked_post_1', 'true')"">Bookmark Post 1</button>"""
"एक लोडिंग स्केलेटन (skeleton) स्क्रीन का HTML/CSS बनाओ","""<style>@keyframes pulse{...} .skeleton-box{animation: pulse 1.5s infinite; background:#e0e0e0;}</style><div class='post-skeleton'><div class='skeleton-box' style='height:150px;'></div><div class='skeleton-box' style='height:20px; margin-top:10px;'></div></div>"""
"एक पोस्ट के 'पढ़ने का समय' (reading time) कैलकुलेट करो","""<script>\nfunction calculateReadingTime(text) {\n  const wordsPerMinute = 225;\n  const wordCount = text.trim().split(/\s+/).length;\n  const readingTime = Math.ceil(wordCount / wordsPerMinute);\n  return `${readingTime} min read`;\n}\n</script>"""
"एक ब्लॉग पोस्ट के लिए एक 'Table of Contents' डायनामिक रूप से जेनरेट करो","""<nav><h4>Contents</h4><ul id='table-of-contents'></ul></nav>\n<script>\ndocument.querySelectorAll('main h2').forEach(heading => {\n  const id = heading.textContent.toLowerCase().replace(/ /g, '-');\n  heading.id = id;\n  document.getElementById('table-of-contents').innerHTML += `<li><a href='#${id}'>${heading.textContent}</a></li>`;\n});\n</script>"""
"यूज़र से एक कन्फर्मेशन डायलॉग (dialog) दिखाओ","""<button onclick=""if(confirm('Are you absolutely sure you want to delete this?')){ console.log('Deleting...'); }"">Delete Item</button>"""
"Fetch API में `AbortController` का उपयोग करके एक रिक्वेस्ट को कैंसिल करो","""<script>\nconst controller = new AbortController();\nconst signal = controller.signal;\nfetch('...', {signal});\n\n// To cancel the request, for example after a timeout:\n// controller.abort();\n</script>"""
"एक नया पोस्ट बनाने के बाद यूज़र को उस पोस्ट के पेज पर रीडायरेक्ट करो","""fetch('/api/posts', {method:'POST',...}).then(res => res.json()).then(data => {\n  // Redirect to the new post's page\n  window.location.href = `/posts/${data.id}`;\n});"""
"एक API कॉल के लिए एक टाइमआउट सेट करो","""<script>\nconst controller = new AbortController();\nconst timeoutId = setTimeout(() => controller.abort(), 5000); // 5 second timeout\n\nfetch('/api/slow-endpoint', {signal: controller.signal})\n  .catch(error => { if (error.name === 'AbortError') console.error('Request timed out!'); })\n  .finally(() => clearTimeout(timeoutId));\n</script>"""
"एक सिंपल WYSIWYG एडिटर का ढाँचा (Bold, Italic)","""<div id='editor' contenteditable='true' style='border:1px solid #ccc; height:150px; padding:5px;'>Type your text here...</div>\n<button onclick=""document.execCommand('bold')""><b>B</b></button>\n<button onclick=""document.execCommand('italic')""><i>I</i></button>"""
"एक ब्लॉग के लिए User और Post डेटाबेस मॉडल बनाओ","""# In models.py\nfrom flask_sqlalchemy import SQLAlchemy\ndb = SQLAlchemy()\n\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    username = db.Column(db.String(80), unique=True, nullable=False)\n\nclass Post(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    title = db.Column(db.String(120), nullable=False)\n    content = db.Column(db.Text, nullable=False)\n    author_id = db.Column(db.Integer, db.ForeignKey('user.id'))"""
"Flask ऐप को SQLAlchemy डेटाबेस के साथ कॉन्फ़िगर करो","""# In app.py\nfrom flask import Flask\nfrom models import db\n\napp = Flask(__name__)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///blog.db'\ndb.init_app(app)"""
"सभी ब्लॉग पोस्ट्स को लौटाने वाला एक API एंडपॉइंट बनाओ","""@app.route('/api/posts', methods=['GET'])\ndef get_all_posts():\n    posts = Post.query.all()\n    return jsonify([{'id': p.id, 'title': p.title} for p in posts])"""
"एक सिंगल ब्लॉग पोस्ट को ID से लौटाने वाला API बनाओ","""@app.route('/api/posts/<int:post_id>', methods=['GET'])\ndef get_post(post_id):\n    post = Post.query.get_or_404(post_id)\n    return jsonify({'title': post.title, 'content': post.content})"""
"एक नया ब्लॉग पोस्ट बनाने के लिए एक API एंडपॉइंट बनाओ","""@app.route('/api/posts', methods=['POST'])\ndef create_post():\n    data = request.json\n    new_post = Post(title=data['title'], content=data['content'])\n    db.session.add(new_post)\n    db.session.commit()\n    return jsonify({'id': new_post.id}), 201"""
"एक ब्लॉग पोस्ट को अपडेट करने के लिए एक API एंडपॉइंट बनाओ","""@app.route('/api/posts/<int:post_id>', methods=['PUT'])\ndef update_post(post_id):\n    post = Post.query.get_or_404(post_id)\n    data = request.json\n    post.title = data.get('title', post.title)\n    post.content = data.get('content', post.content)\n    db.session.commit()\n    return jsonify({'message': 'Post updated'})"""
"एक ब्लॉग पोस्ट को डिलीट करने के लिए एक API एंडपॉइंट बनाओ","""@app.route('/api/posts/<int:post_id>', methods=['DELETE'])\ndef delete_post(post_id):\n    post = Post.query.get_or_404(post_id)\n    db.session.delete(post)\n    db.session.commit()\n    return jsonify({'message': 'Post deleted'})"""
"Flask-Migrate کا उपयोग करके डेटाबेस माइग्रेशन सेटअप करो","""from flask_migrate import Migrate\nmigrate = Migrate(app, db)"""
"Alembic माइग्रेशन स्क्रिप्ट बनाओ","flask db migrate -m 'Initial migration.'"
"Alembic माइग्रेशन को डेटाबेस पर अप्लाई करो","flask db upgrade"
"एक Flask कमांड बनाओ जो डेटाबेस को इनिशियलाइज़ करे","""@app.cli.command('init-db')\ndef init_db_command():\n    db.create_all()\n    print('Initialized the database.')"""
"ब्लॉग के लिए एक 'Comment' मॉडल बनाओ","""class Comment(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    text = db.Column(db.String(200), nullable=False)\n    post_id = db.Column(db.Integer, db.ForeignKey('post.id'))"""
"एक पोस्ट के सभी कमेंट्स को लौटाने वाला API बनाओ","""@app.route('/api/posts/<int:post_id>/comments')\ndef get_comments(post_id):\n    comments = Comment.query.filter_by(post_id=post_id).all()\n    return jsonify([{'text': c.text} for c in comments])"""
"एक पोस्ट पर नया कमेंट करने के लिए API बनाओ","""@app.route('/api/posts/<int:post_id>/comments', methods=['POST'])\ndef add_comment(post_id):\n    new_comment = Comment(text=request.json['text'], post_id=post_id)\n    db.session.add(new_comment)\n    db.session.commit()\n    return jsonify({'id': new_comment.id})"""
"ब्लॉग पोस्ट मॉडल में एक 'created_at' फील्ड जोड़ो","""created_at = db.Column(db.DateTime, default=datetime.utcnow)"""
"पोस्ट्स को लेटेस्ट पहले के क्रम में क्वेरी करो","""posts = Post.query.order_by(Post.created_at.desc()).all()"""
"एक API बनाओ जो पोस्ट्स को पेजिनेट (paginate) करे","""@app.route('/api/posts-paginated')\ndef get_paginated_posts():\n    page = request.args.get('page', 1, type=int)\n    pagination = Post.query.paginate(page=page, per_page=5)\n    return jsonify([...]) # Return paginated data"""
"एक यूज़र रजिस्ट्रेशन के लिए API एंडपॉइंट","""@app.route('/api/register', methods=['POST'])\ndef register():\n    # ... create user and hash password ...\n    return jsonify({'message': 'User created'})"""
"एक यूज़र लॉगइन के लिए API एंडपॉइंट जो JWT टोकन लौटाए","""@app.route('/api/login', methods=['POST'])\ndef login():\n    # ... check credentials ...\n    # token = create_jwt_token(...)\n    return jsonify({'token': token})"""
"एक प्रोटेक्टेड API रूट बनाओ जो JWT टोकन की जाँच करे","""@app.route('/api/protected')\n@jwt_required()\ndef protected():\n    return jsonify({'message': 'This is a protected route'})"""
"ब्लॉग के लिए एक 'Tag' मॉडल बनाओ (Many-to-Many)","""tags = db.Table('tags', ...)\nclass Post(db.Model):\n    tags = db.relationship('Tag', secondary=tags, backref='posts')"""
"एक पोस्ट को उसके टैग्स के साथ लौटाने वाला API","""@app.route('/api/posts/<int:id>')\ndef get_post_with_tags(id):\n    post = Post.query.get(id)\n    return jsonify({'title': post.title, 'tags': [tag.name for tag in post.tags]})"""
"एक सर्च API बनाओ जो टाइटल और कंटेंट में खोजे","""@app.route('/api/search')\ndef search():\n    query = request.args.get('q')\n    results = Post.query.filter(Post.title.contains(query) | Post.content.contains(query)).all()\n    return jsonify([...])"""
"Flask-CORS का उपयोग करके API पर CORS इनेबल करो","""from flask_cors import CORS\nCORS(app, resources={r'/api/*': {'origins': '*'}})"""
"Flask-SQLAlchemy में रिलेशनशिप के लिए `back_populates` का उपयोग करो","""class User(db.Model):\n    posts = db.relationship('Post', back_populates='author')\n\nclass Post(db.Model):\n    author = db.relationship('User', back_populates='posts')"""
"एक ब्लॉग पोस्ट पर 'लाइक' करने के लिए API","""@app.route('/api/posts/<int:id>/like', methods=['POST'])\ndef like_post(id):\n    post = Post.query.get(id)\n    post.likes += 1\n    db.session.commit()\n    return jsonify({'likes': post.likes})"""
"ब्लॉग पोस्ट मॉडल में `likes` कॉलम जोड़ो","""likes = db.Column(db.Integer, default=0)"""
"ब्लॉग पोस्ट्स को लाइक्स की संख्या के आधार पर सॉर्ट करो","""popular_posts = Post.query.order_by(Post.likes.desc()).limit(5).all()"""
"Flask में यूनिट टेस्ट के लिए एक टेस्ट डेटाबेस कॉन्फ़िगर करो","""app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///:memory:'"""
"एक API एंडपॉइंट का pytest से टेस्ट लिखो","""def test_get_posts(client):\n    response = client.get('/api/posts')\n    assert response.status_code == 200"""
"ब्लूप्रिंट का उपयोग करके एडमिन सेक्शन बनाओ","""admin_bp = Blueprint('admin', __name__, url_prefix='/admin')"""
"एक API बनाओ जो YAML डेटा लौटाए","""import yaml\n@app.route('/api/data.yaml')\ndef get_yaml():\n    data = {'a': 1}\n    return Response(yaml.dump(data), mimetype='text/yaml')"""
"Flask में एक कस्टम CLI कमांड बनाओ","""@app.cli.command('create-user')\n@click.argument('name')\ndef create_user(name):\n    # ... logic to create user ..."""
"SQLAlchemy में eager लोडिंग का उपयोग करो","""posts = Post.query.options(db.joinedload(Post.author)).all()"""
"SQLAlchemy में lazy लोडिंग का उपयोग करो","""# This is the default behavior\npost = Post.query.get(1)\n# The author is fetched from the DB only when you access it:\nprint(post.author.name)"""
"एक API बनाओ जो एक फाइल डाउनलोड करवाए","""from flask import send_file\n@app.route('/download')\ndef download_file():\n    return send_file('my_file.zip', as_attachment=True)"""
"अपने Flask ऐप के लिए एक `config.py` फाइल बनाओ","""# config.py\nclass Config:\n    SECRET_KEY = os.environ.get('SECRET_KEY')\n    SQLALCHEMY_DATABASE_URI = os.environ.get('DATABASE_URI')"""
"फैक्ट्री पैटर्न का उपयोग करके Flask ऐप बनाओ","""def create_app(config_class=Config):\n    app = Flask(__name__)\n    app.config.from_object(config_class)\n    db.init_app(app)\n    return app"""
"ब्लॉग पोस्ट में Markdown कंटेंट को सपोर्ट करो","""import markdown\n@app.route('/posts/<int:id>')\ndef show_post(id):\n    post = Post.query.get(id)\n    post.content_html = markdown.markdown(post.content)\n    return render_template('post.html', post=post)"""
"एक API बनाओ जो इमेज अपलोड को हैंडल करे","""@app.route('/api/upload', methods=['POST'])\ndef upload_image():\n    file = request.files['image']\n    # ... save file securely ...\n    return jsonify({'url': file_url})"""
"ब्लॉग पोस्ट मॉडल में एक 'status' फील्ड (draft, published) जोड़ो","""status = db.Column(db.String(10), default='draft', nullable=False)"""
"सिर्फ पब्लिश हुए पोस्ट्स को दिखाने वाला एक API बनाओ","""@app.route('/api/published-posts')\ndef get_published_posts():\n    posts = Post.query.filter_by(status='published').all()\n    return jsonify([...])"""
"SQLAlchemy में एक हाइब्रिड प्रॉपर्टी बनाओ","""from sqlalchemy.ext.hybrid import hybrid_property\nclass User(db.Model):\n    # ... first_name, last_name columns ...\n    @hybrid_property\n    def full_name(self):\n        return self.first_name + ' ' + self.last_name"""
"API रिस्पॉन्स के लिए एक कस्टम JSON एन्कोडर बनाओ","""import json\nfrom datetime import date\nclass CustomJSONEncoder(json.JSONEncoder):\n    def default(self, obj):\n        if isinstance(obj, date):\n            return obj.isoformat()\n        return super().default(obj)"""
"Flask में एक WebSocket का उपयोग करके रियल-टाइम नोटिफिकेशन भेजो","""# Using Flask-SocketIO\n@socketio.on('new_post_created')\ndef handle_new_post_notification(data):\n    emit('notification', {'message': 'A new post was created!'}, broadcast=True)"""
"पाइथन में UUID का उपयोग करके एक यूनिक आईडी जेनरेट करो","""import uuid\npublic_id = str(uuid.uuid4())"""
"ब्लॉग पोस्ट मॉडल में एक स्लग (slug) फील्ड जोड़ो","""slug = db.Column(db.String(120), unique=True, nullable=False, index=True)"""
"एक फंक्शन बनाओ जो टाइटल से एक स्लग जेनरेट करे","""import re\ndef slugify(text):\n    text = text.lower().strip()\n    text = re.sub(r'[^\\w\\s-]', '', text)\n    text = re.sub(r'[\\s_-]+', '-', text)\n    return text"""
"एक API बनाओ जो XML डेटा लौटाए (Jinja2 टेम्पलेट का उपयोग करके)","""@app.route('/feed.xml')\ndef get_xml_feed():\n    # ... get posts from db ...\n    return Response(render_template('feed.xml', posts=posts), mimetype='application/xml')"""
"एक पाइथन स्क्रिप्ट बनाओ जो कमांड-लाइन से एक नाम ले और उसे ग्रीट करे","import sys\nif len(sys.argv) > 1:\n    name = sys.argv[1]\n    print(f'Hello, {name}')"
"एक कमांड-लाइन कैलकुलेटर बनाओ जो दो नंबरों को जोड़े","import sys\nnum1 = int(sys.argv[1])\nnum2 = int(sys.argv[2])\nprint(num1 + num2)"
"`argparse` का उपयोग करके एक कमांड-लाइन टूल बनाओ","import argparse\nparser = argparse.ArgumentParser()\nparser.add_argument('filename')\nargs = parser.parse_args()"
"एक फाइल में लाइनों, शब्दों और कैरेक्टर्स की गिनती करने वाली स्क्रिप्ट","import sys\nfilename = sys.argv[1]\nlines, words, chars = 0, 0, 0\nwith open(filename, 'r') as f:\n    for line in f:\n        lines += 1\n        words += len(line.split())\n        chars += len(line)\nprint(f'Lines: {lines}, Words: {words}, Chars: {chars}')"
"पाइथन से एक सिंपल HTTP सर्वर शुरू करो","import http.server\nimport socketserver\nPORT = 8000\nHandler = http.server.SimpleHTTPRequestHandler\nwith socketserver.TCPServer(('', PORT), Handler) as httpd:\n    httpd.serve_forever()"
"एक फोल्डर की सभी '.jpg' फाइलों को '.jpeg' में रीनेम करो","import os\nfor filename in os.listdir('.'):\n    if filename.endswith('.jpg'):\n        os.rename(filename, filename[:-4] + '.jpeg')"
"एक स्क्रिप्ट बनाओ जो एक डायरेक्टरी में 1MB से बड़ी सभी फाइलों को ढूंढे","import os\nfor filename in os.listdir('.'):\n    if os.path.getsize(filename) > 1024 * 1024:\n        print(filename)"
"एक CSV फाइल को JSON में बदलने के लिए एक स्क्रिप्ट लिखो","import csv, json\ndata = []\nwith open('data.csv', 'r') as f:\n    for row in csv.DictReader(f):\n        data.append(row)\nwith open('data.json', 'w') as f:\n    json.dump(data, f, indent=4)"
"लॉग्स को एक फाइल में लिखो","import logging\nlogging.basicConfig(filename='app.log', level=logging.INFO)\nlogging.info('Program started')"
"`subprocess` मॉड्यूल का उपयोग करके एक शेल कमांड चलाओ","import subprocess\nsubprocess.run(['ls', '-l'])"
"एक फोल्डर को ज़िप (zip) करने के लिए एक स्क्रिप्ट लिखो","import shutil\nshutil.make_archive('my_archive', 'zip', 'folder_to_zip')"
"एक ज़िप फाइल को अनज़िप करो","import shutil\nshutil.unpack_archive('archive.zip', 'destination_folder')"
"पाइथन में एक एनवायरनमेंट वेरिएबल को पढ़ो","import os\napi_key = os.environ.get('API_KEY')"
"एक डायरेक्टरी ट्री को वॉक (walk) करो","import os\nfor dirpath, dirnames, filenames in os.walk('.'):\n    print(f'Directory: {dirpath}')\n    for file_name in filenames:\n        print(f'  {file_name}')"
"एक टेक्स्ट फाइल में एक शब्द को दूसरे से बदलो","with open('file.txt', 'r') as f: content = f.read()\nnew_content = content.replace('old', 'new')\nwith open('file.txt', 'w') as f: f.write(new_content)"
"एक डायरेक्टरी के सभी डुप्लीकेट फाइलों को ढूंढो (hash का उपयोग करके)","import hashlib, os\n# ... logic to calculate hashes and find duplicates ... "
"एक पासवर्ड जेनरेटर कमांड-लाइन टूल बनाओ","import random, string, argparse\nparser = argparse.ArgumentParser()\nparser.add_argument('length', type=int)\nargs = parser.parse_args()\npassword = ''.join(random.choice(string.ascii_letters) for _ in range(args.length))\nprint(password)"
"`platform` मॉड्यूल का उपयोग करके ऑपरेटिंग सिस्टम की जानकारी प्राप्त करो","import platform\nprint(f'OS: {platform.system()}, Version: {platform.version()}')"
"`pickle` का उपयोग करके एक पाइथन ऑब्जेक्ट को सेव करो","import pickle\nmy_data = {'a': 1}\nwith open('data.pkl', 'wb') as f:\n    pickle.dump(my_data, f)"
"`pickle` का उपयोग करके एक पाइथन ऑब्जेक्ट को लोड करो","import pickle\nwith open('data.pkl', 'rb') as f:\n    loaded_data = pickle.load(f)"
"`getpass` का उपयोग करके यूज़र से सुरक्षित रूप से पासवर्ड पूछो","import getpass\npassword = getpass.getpass('Enter your password: ')"
"पाइथन स्क्रिप्ट को 10 सेकंड के लिए रोको (sleep)","import time\nprint('Waiting...')\ntime.sleep(10)\nprint('Done waiting.')"
"एक स्क्रिप्ट के एक्सीक्यूशन समय को मापो","import time\nstart_time = time.time()\n# ... your long process ...\nend_time = time.time()\nprint(f'Duration: {end_time - start_time} seconds')"
"एक सिंपल API सर्वर बनाओ जो FastAPI का उपयोग करे","from fastapi import FastAPI\napp = FastAPI()\n@app.get('/')\ndef read_root(): return {'Hello': 'World'}"
"पाइथन में एक SQLite डेटाबेस से कनेक्ट करो","import sqlite3\nconn = sqlite3.connect('my_database.db')"
"SQLite डेटाबेस में एक टेबल बनाओ","import sqlite3\nconn = sqlite3.connect('db.db')\nc = conn.cursor()\nc.execute('CREATE TABLE users (id INT, name TEXT)')\nconn.commit()\nconn.close()"
"SQLite टेबल में डेटा इंसर्ट करो","import sqlite3\nconn = sqlite3.connect('db.db')\nc = conn.cursor()\nc.execute(\"INSERT INTO users VALUES (1, 'Amit')\")\nconn.commit()\nconn.close()"
"SQLite टेबल से डेटा सिलेक्ट करो","import sqlite3\nconn = sqlite3.connect('db.db')\nc = conn.cursor()\nfor row in c.execute('SELECT * FROM users'):\n    print(row)"
"एक Temporary Directory बनाओ","import tempfile\nwith tempfile.TemporaryDirectory() as tmpdir:\n    print('Created temporary directory', tmpdir)"
"एक टेक्स्ट फाइल की आखिरी N लाइनों को पढ़ो","def read_last_n_lines(filename, n):\n    with open(filename, 'r') as f:\n        return f.readlines()[-n:]"
"एक URL से एक फाइल डाउनलोड करो और प्रोग्रेस बार दिखाओ (tqdm)","from tqdm import tqdm\nimport requests\n# ... code to download a large file with a progress bar using tqdm ..."
"एक सिंपल कमांड-लाइन To-Do ऐप बनाओ (स्यूडो-कोड)","import sys\n# ... logic for a simple CLI to-do app that reads/writes to a file ..."
"`configparser` का उपयोग करके एक कॉन्फ़िगरेशन फाइल पढ़ो","import configparser\nconfig = configparser.ConfigParser()\nconfig.read('settings.ini')"
"एक पाइथन स्क्रिप्ट को बैकग्राउंड में चलाओ (daemonize)","import os\n# ... code for daemonizing a process using fork()..."
"पाइथन में मल्टीथ्रेडिंग का एक बेसिक उदाहरण","import threading\ndef task(): print('Task running')\n\nthread = threading.Thread(target=task)\nthread.start()"
"पाइथन में मल्टीप्रोसेसिंग का एक बेसिक उदाहरण","import multiprocessing\ndef worker(): print('Worker process')\n\nprocess = multiprocessing.Process(target=worker)\nprocess.start()"
"एक क्यू (Queue) का उपयोग करके थ्रेड्स के बीच डेटा शेयर करो","import queue, threading\nq = queue.Queue()\ndef producer(): q.put('hello')\ndef consumer(): item = q.get()\n\nt1 = threading.Thread(target=producer)\nt2 = threading.Thread(target=consumer)"
"एक पाइथन स्क्रिप्ट को एग्जीक्यूटेबल (executable) बनाओ (PyInstaller)","pyinstaller --onefile my_script.py"
"पाइथन से एक वेब ब्राउज़र खोलो","import webbrowser\nwebbrowser.open('https://google.com')"
"डाउनलोड फोल्डर में फाइलों को उनके एक्सटेंशन के आधार पर व्यवस्थित करो","import os, shutil\n# ... script to organize files in the Downloads folder ..."
"एक पाइथन स्क्रिप्ट जो एक वेबसाइट के डाउन होने पर अलर्ट भेजे","import requests, time\nwhile True:\n    try:\n        r = requests.get('http://example.com')\n        if r.status_code != 200:\n            print('Site is down!')\n    except:\n        print('Site is down!')\n    time.sleep(60)"
"एक इमेज का साइज़ बदलो (Pillow)","from PIL import Image\nimg = Image.open('in.jpg')\nresized = img.resize((200, 200))\nresized.save('out.jpg')"
"एक वॉटरमार्क को एक इमेज पर लगाओ","from PIL import Image, ImageDraw, ImageFont\n# ... code to add a text watermark to an image ..."
"एक डायरेक्टरी की सभी इमेजेज को कंप्रेस करो","import os\nfrom PIL import Image\n# ... script to loop through images and save with lower quality ..."
"एक MP3 फाइल से मेटाडेटा (ID3 tags) पढ़ो","from mutagen.mp3 import MP3\naudio = MP3('song.mp3')\nprint(audio.info.length)"
"एक PDF फाइल से टेक्स्ट निकालो (PyPDF2)","import PyPDF2\npdfFileObj = open('doc.pdf', 'rb')\npdfReader = PyPDF2.PdfReader(pdfFileObj)"
"कई PDF फाइलों को एक में मर्ज करो","from PyPDF2 import PdfMerger\nmerger = PdfMerger()\nfor pdf in ['file1.pdf', 'file2.pdf']:\n    merger.append(pdf)\nmerger.write('merged.pdf')"
"पाइथन से एक QR कोड बनाओ","import qrcode\nimg = qrcode.make('Some data to encode')\nimg.save('qrcode.png')"
"पाइथन से वाई-फाई नेटवर्क के लिए एक QR कोड बनाओ","import qrcode\n# ... code to generate a Wi-Fi QR code ..."
"Chart.js लाइब्रेरी को HTML में शामिल करो","<script src='https://cdn.jsdelivr.net/npm/chart.js'></script>"
"एक बार चार्ट (bar chart) बनाने के लिए एक कैनवास एलिमेंट बनाओ","<div style='width: 400px;'><canvas id='myBarChart'></canvas></div>"
"Chart.js का उपयोग करके एक सिंपल बार चार्ट बनाओ","<canvas id='c1'></canvas><script>new Chart(document.getElementById('c1'),{type:'bar',data:{labels:['January','February'], datasets:[{label:'Monthly Sales', data:[65, 59]}]}});</script>"
"Chart.js का उपयोग करके एक सिंपल लाइन चार्ट बनाओ","<canvas id='c2'></canvas><script>new Chart(document.getElementById('c2'),{type:'line',data:{labels:['Day 1','Day 2'], datasets:[{label:'Website Traffic', data:[100,150], fill:false, borderColor:'rgb(75, 192, 192)'}]}});</script>"
"Chart.js का उपयोग करके एक सिंपल पाई चार्ट बनाओ","<canvas id='c3'></canvas><script>new Chart(document.getElementById('c3'),{type:'pie',data:{labels:['Red','Blue','Yellow'], datasets:[{data:[300,50,100], backgroundColor:['Red','Blue','Yellow']}]}});</script>"
"Chart.js का उपयोग करके एक डोनट चार्ट (doughnut chart) बनाओ","<canvas id='c4'></canvas><script>new Chart(document.getElementById('c4'),{type:'doughnut',data:{...}});</script>"
"Chart.js का उपयोग करके एक रडार चार्ट (radar chart) बनाओ","<canvas id='c5'></canvas><script>new Chart(document.getElementById('c5'),{type:'radar',data:{labels:['Coding','Eating','Sleeping'], datasets:[{label:'My Skills', data:[9,7,8]}]}});</script>"
"Chart.js का उपयोग करके एक पोलर एरिया चार्ट (polar area chart) बनाओ","<canvas id='c6'></canvas><script>new Chart(document.getElementById('c6'),{type:'polarArea',data:{...}});</script>"
"एक चार्ट में टाइटल जोड़ो","options: { plugins: { title: { display: true, text: 'Custom Chart Title' } } }"
"एक चार्ट में लीजेंड (legend) को छिपाओ","options: { plugins: { legend: { display: false } } }"
"एक बार चार्ट के बार्स का रंग बदलो","datasets: [{ label: 'Data', data: [12, 19], backgroundColor: ['rgba(255, 99, 132, 0.2)', 'rgba(54, 162, 235, 0.2)'] }]"
"एक लाइन चार्ट की लाइन का रंग और मोटाई बदलो","datasets: [{ label: 'Data', data: [10, 20], borderColor: 'green', borderWidth: 3 }]"
"AJAX का उपयोग करके एक चार्ट का डेटा डायनामिक रूप से लोड करो","<script>fetch('/api/chart-data').then(res => res.json()).then(chartData => { new Chart(..., { data: chartData }); });</script>"
"एक बटन क्लिक पर चार्ट को अपडेट करो","<script>myChart.data.datasets[0].data = [50, 60, 70]; myChart.update();</script>"
"D3.js लाइब्रेरी को HTML में शामिल करो","<script src='https://d3js.org/d3.v7.min.js'></script>"
"D3.js का उपयोग करके एक सिंपल SVG एलिमेंट बनाओ","<div id='d3-container'></div><script>const svg = d3.select('#d3-container').append('svg').attr('width', 200).attr('height', 100);</script>"
"D3.js का उपयोग करके एक सर्किल बनाओ","<script>/*...after creating svg...*/ svg.append('circle').attr('cx', 50).attr('cy', 50).attr('r', 40).style('fill', 'blue');</script>"
"D3.js का उपयोग करके एक रेक्टेंगल बनाओ","<script>/*...after creating svg...*/ svg.append('rect').attr('x', 10).attr('y', 10).attr('width', 80).attr('height', 80).style('fill','green');</script>"
"D3.js में डेटा के आधार पर कई बार्स बनाओ","<script>const data=[10, 40, 32, 68]; const svg = d3.select('svg'); svg.selectAll('rect').data(data).enter().append('rect').attr('height', d=>d);</script>"
"D3.js में एक लीनियर स्केल (scale) बनाओ","<script>const xScale = d3.scaleLinear().domain([0, 100]).range([0, 500]);</script>"
"D3.js में एक एक्सिस (axis) बनाओ","<script>const xAxis = d3.axisBottom(xScale); svg.append('g').attr('transform', 'translate(0, 100)').call(xAxis);</script>"
"D3.js में एक ट्रांजीशन (transition) का उपयोग करो","<script>d3.select('circle').transition().duration(1000).attr('r', 10).style('fill', 'red');</script>"
"D3.js में एक माउसओवर इवेंट जोड़ो","<script>d3.selectAll('rect').on('mouseover', function(){ d3.select(this).style('fill', 'orange'); }).on('mouseout', function(){ d3.select(this).style('fill', 'green'); });</script>"
"D3.js का उपयोग करके एक CSV फाइल लोड करो","<script>d3.csv('my_data.csv').then(function(data) { console.log(data[0]); });</script>"
"D3.js का उपयोग करके एक JSON फाइल लोड करो","<script>d3.json('my_data.json').then(function(data) { console.log(data); });</script>"
"Chart.js में एक हॉरिजॉन्टल बार चार्ट बनाओ","<script>new Chart(ctx, {type:'bar', data: data, options: { indexAxis: 'y' }});</script>"
"Chart.js में एक स्टैक्ड बार चार्ट (stacked bar chart) बनाओ","<script>new Chart(ctx, {type:'bar', data: data, options: { scales: { x: { stacked: true }, y: { stacked: true } } }});</script>"
"Chart.js में एक बबल चार्ट (bubble chart) बनाओ","<script>new Chart(ctx, {type:'bubble', data: { datasets: [{label:'My Data', data:[{x:10,y:20,r:15}, {x:15,y:10,r:25}]}] }});</script>"
"Chart.js में एक स्कैटर चार्ट (scatter chart) बनाओ","<script>new Chart(ctx, {type:'scatter', data: { datasets: [{label:'Scatter Data', data:[{x:1,y:2},{x:3,y:4},{x:2,y:5}]}] }});</script>"
"एक चार्ट के टूलटिप्स (tooltips) को कस्टमाइज करो","options: { plugins: { tooltip: { callbacks: { label: function(context){ return `Value: ${context.parsed.y}`; } } } } }"
"एक चार्ट के एक्सिस लेबल्स को बदलो","options: { scales: { y: { title: { display: true, text: 'Total Sales ($)' } } } }"
"D3.js में एक पाई चार्ट का लेआउट बनाओ","<script>const pieGenerator = d3.pie(); const data_ready_for_pie = pieGenerator([10,20,30]);</script>"
"D3.js में एक आर्क (arc) जेनरेटर बनाओ","<script>const arcGenerator = d3.arc().innerRadius(50).outerRadius(100);</script>"
"D3.js में एक फोर्स-डायरेक्टेड ग्राफ (force-directed graph) का ढाँचा","<script>const simulation = d3.forceSimulation(nodes).force('link', d3.forceLink(links).id(d => d.id)).force('charge', d3.forceManyBody());</script>"
"एक मैप (जैसे भारत का) बनाने के लिए TopoJSON और D3.js का उपयोग करो","<script>d3.json('india_topo.json').then(function(topology) { const geojson = topojson.feature(topology, topology.objects.india); /* draw map with d3.geoPath() */ });</script>"
"Google Charts का उपयोग करके एक गेज चार्ट (gauge chart) बनाओ","<script type='text/javascript' src='https://www.gstatic.com/charts/loader.js'></script><script>google.charts.load('current', {'packages':['gauge']}); google.charts.setOnLoadCallback(drawChart); function drawChart(){...}</script>"
"Highcharts का उपयोग करके एक 3D कॉलम चार्ट बनाओ","<script src='https://code.highcharts.com/highcharts.js'></script><script src='https://code.highcharts.com/highcharts-3d.js'></script><div id='container'></div><script>Highcharts.chart('container', {chart:{type:'column', options3d:{enabled:true}}, ...});</script>"
"Leaflet.js का उपयोग करके एक इंटरैक्टिव मैप बनाओ","<link rel='stylesheet' href='https://unpkg.com/leaflet/dist/leaflet.css' /><script src='https://unpkg.com/leaflet/dist/leaflet.js'></script><div id='mapid' style='height: 200px;'></div><script>var mymap = L.map('mapid').setView([26.84, 80.94], 13); L.marker([26.84, 80.94]).addTo(mymap);</script>"
"एक Flask API बनाओ जो चार्ट के लिए डायनामिक डेटा लौटाए","@app.route('/api/monthly-sales')\ndef monthly_sales_data():\n    data = {'labels':['Jan','Feb'], 'values':[100,120]}\n    return jsonify(data)"
"Chart.js में एक मिक्सड-टाइप (mixed-type) चार्ट बनाओ (बार और लाइन)","<script>new Chart(ctx, {data: {datasets:[{type:'bar', label:'Bar Data', data:[10,20]},{type:'line', label:'Line Data', data:[15,15]}]}})</script>"
"एक चार्ट में एक बटन से नया डेटा जोड़ो","<script>function addDataToChart(chart, label, data) { chart.data.labels.push(label); chart.data.datasets.forEach((dataset) => { dataset.data.push(data); }); chart.update(); }</script>"
"एक चार्ट से डेटा को हटाओ","<script>function removeDataFromChart(chart) { chart.data.labels.pop(); chart.data.datasets.forEach((dataset) => { dataset.data.pop(); }); chart.update(); }</script>"
"D3.js में एक ब्रश करने योग्य (brushable) स्कैटर प्लॉट बनाओ","<script>const brush = d3.brush().extent([[0,0],[w,h]]).on('start brush end', brushed); svg.append('g').call(brush);</script>"
"एक चार्ट को responsive बनाओ","options: { responsive: true, maintainAspectRatio: false }"
"D3.js में एक ट्रीमैप (treemap) लेआउट बनाओ","<script>const root = d3.hierarchy(data).sum(d => d.value); const treemapLayout = d3.treemap().size([500, 500]).padding(1); treemapLayout(root);</script>"
"Plotly.js का उपयोग करके एक 3D सरफेस प्लॉट बनाओ","<script src='https://cdn.plot.ly/plotly-latest.min.js'></script><div id='myDiv3D'></div><script>Plotly.newPlot('myDiv3D', data, layout);</script>"
"Chart.js में एक टाइमलाइन चार्ट बनाओ","<script>new Chart(ctx, {type:'bar', options:{indexAxis:'y', ...}})</script>"
"एक स्पार्कलाइन (Sparkline) चार्ट बनाओ",""
"एक सनबर्स्ट (Sunburst) चार्ट का कॉन्सेप्ट","// A hierarchical chart, similar to a treemap, but represented by a radial layout. Each level of the hierarchy is a ring."
"एक प्रोडक्ट कार्ड कॉम्पोनेन्ट बनाओ","<div class='product-card' style='border:1px solid #ddd; width:200px; text-align:center;'><img src='product.jpg' width='100%' alt='Product'><h3 class='product-title'>Product Name</h3><p class='product-price'>$19.99</p><button>Add to Cart</button></div>"
"एक प्रोडक्ट ग्रिड लेआउट बनाओ","<div class='product-grid' style='display:grid; grid-template-columns:repeat(auto-fit, minmax(200px, 1fr)); gap:15px;'>...product cards here...</div>"
"एक 'Add to Cart' बटन बनाओ जो एक आइटम को कार्ट में जोड़े","<button onclick=""addToCart({id: 'prod123', name: 'Cool Laptop', price: 999.99})"">Add to Cart</button><script>let shoppingCart=[]; function addToCart(product){shoppingCart.push(product); console.log('Cart:', shoppingCart);}</script>"
"शॉपिंग कार्ट में आइटम्स की संख्या दिखाने वाला एक आइकन बनाओ","<div id='cart-icon-wrapper'>🛒 Cart (<span id='cart-item-count'>0</span>)</div>"
"शॉपिंग कार्ट का UI बनाओ जिसमें आइटम्स और टोटल हो","<div class='shopping-cart-summary'><h2>Your Cart</h2><ul id='cart-items-list'><li>Laptop - $999.99</li></ul><p style='font-weight:bold;'>Total: $<span id='cart-total-price'>999.99</span></p></div>"
"जावास्क्रिप्ट में शॉपिंग कार्ट के टोटल की गणना करो","function calculateCartTotal(){\n  let total = shoppingCart.reduce((sum, item) => sum + item.price, 0);\n  document.getElementById('cart-total-price').innerText = total.toFixed(2);\n}"
"एक प्रोडक्ट की मात्रा (quantity) को बदलने के लिए एक इनपुट बनाओ","<input type='number' value='1' min='1' onchange='updateProductQuantityInCart(123, this.value)'>"
"एक चेकआउट फॉर्म का ढाँचा बनाओ","<form id='checkout-form'><fieldset><legend>Shipping Address</legend><input placeholder='Full Name'>...</fieldset><fieldset><legend>Payment Details</legend><input placeholder='Card Number'>...</fieldset><button type='submit'>Place Order</button></form>"
"प्रोडक्ट्स को फ़िल्टर करने के लिए एक साइडबार बनाओ","<aside><h3>Filters</h3><div class='filter-group'><h4>Category</h4><input type='checkbox'> Electronics<br><input type='checkbox'> Books</div></aside>"
"एक प्रोडक्ट सर्च बार बनाओ","<input type='search' placeholder='Search for products...'>"
"एक प्रोडक्ट पेज पर इमेज थंबनेल गैलरी बनाओ","<img id='main-product-image' src='img-large-1.jpg' width='300'><div class='thumbnails'><img src='img-thumb-1.jpg' onclick=""document.getElementById('main-product-image').src='img-large-1.jpg'""> <img src='img-thumb-2.jpg' onclick=""document.getElementById('main-product-image').src='img-large-2.jpg'""></div>"
"एक स्टार रेटिंग डिस्प्ले कॉम्पोनेन्ट बनाओ (जैसे 4.5 स्टार्स)","<div class='star-rating' style='color:orange;'><span>★★★★</span><span style='color:grey'>★</span> (4.5)</div>"
"एक 'Sale' (बिक्री) बैज बनाओ","<div style='position:relative; display:inline-block;'><img src='product.jpg' width='150'><span style='position:absolute; top:10px; left:10px; background:red; color:white; padding:5px; border-radius:3px;'>SALE</span></div>"
"एक 'Out of Stock' (स्टॉक में नहीं) लेबल दिखाओ","<button disabled style='background:grey; color:white;'>Out of Stock</button>"
"एक इच्छा-सूची (wishlist) में जोड़ने के लिए एक बटन बनाओ","<button onclick='addToWishlist(123)'>❤️ Add to Wishlist</button>"
"प्रोडक्ट्स को कीमत के आधार पर सॉर्ट करने के लिए एक ड्रॉपडाउन","<label>Sort by:</label><select onchange='sortProductsBy(this.value)'><option value='price_asc'>Price: Low to High</option><option value='price_desc'>Price: High to Low</option></select>"
"एक प्रोडक्ट की तुलना (compare) करने के लिए चेकबॉक्स बनाओ","<label><input type='checkbox' onchange='compareProduct(123, this.checked)'> Compare</label>"
"एक 'Quick View' मोडल (modal) बनाओ","<button onclick=""showQuickViewModal(123)"">Quick View</button>"
"एक 'Related Products' (संबंधित उत्पाद) सेक्शन बनाओ","<section><h2>Related Products</h2><div class='product-grid'>...product cards...</div></section>"
"एक ई-कॉमर्स ब्रेडक्रंब (breadcrumb) नेविगेशन बनाओ","<nav aria-label='breadcrumb'>Home > Electronics > Laptops</nav>"
"एक डिस्काउंट कूपन अप्लाई करने के लिए एक इनपुट फील्ड बनाओ","<input placeholder='Enter Coupon Code'><button>Apply Coupon</button>"
"शिपिंग विकल्पों के लिए रेडियो बटन बनाओ","<div><label><input type='radio' name='shipping_option'> Standard Shipping ($5.00)</label></div><div><label><input type='radio' name='shipping_option'> Express Shipping ($15.00)</label></div>"
"एक प्रोडक्ट ज़ूम इफ़ेक्ट बनाओ जो होवर पर काम करे","<style>.zoom-image-container:hover img{transform:scale(1.2);}</style><div class='zoom-image-container' style='width:200px; overflow:hidden;'><img src='product.jpg' style='transition:transform 0.3s;'></div>"
"एक 'Recently Viewed' (हाल ही में देखे गए) प्रोडक्ट्स का सेक्शन बनाओ","<section><h2>Your Recently Viewed Items</h2><div id='recently-viewed-items-container'></div></section>"
"एक प्रोडक्ट के लिए कस्टमर रिव्यु (review) सेक्शन बनाओ","<div class='customer-reviews'><h3>Customer Reviews (4.5/5)</h3><div class='review'><strong>Amit</strong> - ★★★★☆ - <p>Great product!</p></div></div>"
"एक रिव्यु सबमिट करने के लिए एक फॉर्म बनाओ","<form><label>Your Rating:</label><select><option>1</option><option>2</option>...</select><br><label>Your Review:</label><textarea></textarea><br><button>Submit Review</button></form>"
"एक 'Best Sellers' (सबसे ज़्यादा बिकने वाले) सेक्शन बनाओ","<section><h2>Our Best Sellers</h2>...</section>"
"एक 'New Arrivals' (नए आगमन) सेक्शन बनाओ","<section><h2>New Arrivals</h2>...</section>"
"एक प्रोडक्ट के विभिन्न रंगों (color swatches) को दिखाओ","<div class='color-swatches'><span style='background:red; width:25px; height:25px; display:inline-block; border:1px solid #ccc; cursor:pointer;'></span> <span style='background:blue; ...'></span></div>"
"प्रोडक्ट के विभिन्न साइज़ चुनने के लिए बटन बनाओ","<div class='size-selector'><button>S</button> <button>M</button> <button>L</button> <button>XL</button></div>"
"एक 'Add to Cart' कन्फर्मेशन मैसेज दिखाओ","<div id='add-to-cart-confirmation' style='display:none; color:green;'>Product added to cart successfully!</div>"
"शॉपिंग कार्ट से एक आइटम को हटाने के लिए एक बटन","<li id='cart-item-123'>Laptop <button onclick=""document.getElementById('cart-item-123').remove()"">Remove</button></li>"
"चेकआउट पेज पर आर्डर का सारांश (order summary) दिखाओ","<div class='order-summary'><h3>Order Summary</h3><p>Subtotal: $999.99</p><p>Shipping: $5.00</p><strong>Total: $1004.99</strong></div>"
"एक 'Notify Me' फॉर्म बनाओ जब प्रोडक्ट स्टॉक में न हो","<p>This item is out of stock.</p><form><label>Enter your email to be notified:</label><input type='email'><button>Notify Me</button></form>"
"एक 'Size Chart' (साइज़ चार्ट) लिंक बनाओ जो एक मोडल खोले","<a href='#' onclick=""showSizeChartModal()"">View Size Chart</a>"
"एक 'Gift Wrap' (गिफ्ट रैप) विकल्प के लिए एक चेकबॉक्स","<label><input type='checkbox'> Add gift wrap (+$2.00)</label>"
"एक प्रोडक्ट की डिलीवरी की अनुमानित तारीख दिखाओ","<p style='color:green;'>Estimated delivery: October 15, 2025</p>"
"सोशल मीडिया पर एक प्रोडक्ट को शेयर करने के लिए बटन","<button>Share on Facebook</button> <button>Share on Twitter</button>"
"एक 'Customers who bought this also bought' सेक्शन","<section><h2>Customers also bought</h2>...</section>"
"एक प्रोडक्ट के लिए FAQ (प्रश्न-उत्तर) सेक्शन","<section><h2>Questions & Answers</h2><details><summary>Is this waterproof?</summary><p>No, it is water-resistant.</p></details></section>"
"एक 'Terms and Conditions' चेकबॉक्स जो चेकआउट पर ज़रूरी हो","<label><input type='checkbox' required> I have read and agree to the Terms and Conditions.</label>"
"पेमेंट मेथड (Credit Card, PayPal) चुनने के लिए आइकन","<div><img src='visa_icon.png' alt='Visa'> <img src='mastercard_icon.png' alt='Mastercard'> <img src='paypal_icon.png' alt='PayPal'></div>"
"एक 'Track Order' पेज का UI बनाओ","<form><label>Enter your Order ID:</label><input type='text' placeholder='eg. 12345'><button>Track Order</button></form>"
"एक 'My Account' पेज का डैशबोर्ड UI","<div class='account-dashboard'><h3>My Account</h3><ul><li><a href='/orders'>Order History</a></li><li><a href='/profile'>My Profile</a></li><li><a href='/logout'>Logout</a></li></ul></div>"
"एक 'Order History' टेबल बनाओ","<table border='1'><thead><tr><th>Order ID</th><th>Date</th><th>Total</th><th>Status</th></tr></thead><tbody><tr><td>#123</td><td>2025-10-01</td><td>$50</td><td>Shipped</td></tr></tbody></table>"
"एक 'Write a Review' बटन जो एक फॉर्म खोले","<button>Write a Review for this product</button>"
"एक इनवॉइस (invoice) का HTML टेम्पलेट बनाओ","<div class='invoice-box' style='border:1px solid; padding:20px;'><h1>Invoice</h1>...</div>"
"एक 'Abandoned Cart' ईमेल का कॉन्सेप्ट","// An automated email sent to a user who has added items to their shopping cart but did not complete the purchase, reminding them of their items."
"अपसेल (Upsell) और क्रॉस-सेल (Cross-sell) का कॉन्सेप्ट","// Upsell: Encouraging a customer to buy a more expensive, upgraded version of a product. Cross-sell: Encouraging a customer to buy related or complementary items."
"पेज लोड होने पर सभी ब्लॉग पोस्ट्स को फेच करो और दिखाओ","""<div id='posts-container'></div>\n<script>\nwindow.addEventListener('DOMContentLoaded', () => {\n  fetch('/api/posts').then(res => res.json()).then(posts => {\n    const container = document.getElementById('posts-container');\n    posts.forEach(post => {\n      container.innerHTML += `<h2><a href='#' onclick='fetchPost(${post.id})'>${post.title}</a></h2>`;\n    });\n  });\n});\n</script>"""
"एक लिंक पर क्लिक करके एक सिंगल पोस्ट का कंटेंट फेच करो और दिखाओ","""<div id='single-post-view'></div>\n<script>\nfunction fetchPost(id) {\n  fetch(`/api/posts/${id}`).then(res => res.json()).then(post => {\n    document.getElementById('single-post-view').innerHTML = `<h1>${post.title}</h1><p>${post.content}</p>`;\n  });\n}\n</script>"""
"एक नया ब्लॉग पोस्ट बनाने के लिए एक HTML फॉर्म बनाओ","""<form id='new-post-form'>\n  <input id='title-input' placeholder='Title' required>\n  <br><br>\n  <textarea id='content-input' placeholder='Content' required></textarea>\n  <br><br>\n  <button type='submit'>Create Post</button>\n</form>"""
"AJAX का उपयोग करके नया पोस्ट बनाने वाले फॉर्म को सबमिट करो","""<script>\ndocument.getElementById('new-post-form').addEventListener('submit', event => {\n  event.preventDefault();\n  const title = document.getElementById('title-input').value;\n  const content = document.getElementById('content-input').value;\n  fetch('/api/posts', {\n    method: 'POST',\n    headers: {'Content-Type': 'application/json'},\n    body: JSON.stringify({title: title, content: content})\n  }).then(res => res.json()).then(data => console.log('New post created with ID:', data.id));\n});\n</script>"""
"एक पोस्ट को डिलीट करने के लिए एक बटन बनाओ","""<button onclick=""deletePost(5)"">Delete Post 5</button>\n<script>\nfunction deletePost(id) {\n  if(confirm('Are you sure you want to delete this post?')){\n    fetch(`/api/posts/${id}`, { method: 'DELETE' }).then(() => alert('Post deleted'));\n  }\n}\n</script>"""
"एक पोस्ट को एडिट करने के लिए एक फॉर्म दिखाओ","""<button onclick=""showEditForm(5)"">Edit Post 5</button>\n<div id='edit-form-container'></div>\n<script>\nfunction showEditForm(id) {\n    // fetch post data and populate an edit form in the container\n}\n</script>"""
"जावास्क्रिप्ट से एक डायनामिक सर्च फंक्शन बनाओ","""<input placeholder='Search blog posts...' onkeyup=""fetch('/api/search?q='+this.value).then(res => res.json()).then(results => {\n  // ... code to display search results on the page ...\n});"">"""
"पेजिनेशन बटन्स (Next/Previous) के लिए जावास्क्रिप्ट लिखो","""let currentPage = 1;\nfunction loadPostsForPage(page) {\n  fetch(`/api/posts-paginated?page=${page}`).then(res => res.json()).then(data => {\n    // ... display posts for the given page ...\n    currentPage = page;\n  });\n}"""
"एक 'Load More' बटन बनाओ जो और पोस्ट्स लोड करे","""<button id='load-more-btn' onclick=""loadPostsForPage(currentPage + 1)"">Load More</button>"""
"एक पोस्ट पर कमेंट करने के लिए एक फॉर्म बनाओ","""<form onsubmit=""addCommentToPost(5, this.comment.value); return false;"">\n  <input name='comment' placeholder='Write a comment...'>\n  <button type='submit'>Submit Comment</button>\n</form>"""
"एक पोस्ट के सभी कमेंट्स को फेच करो और दिखाओ","""<ul id='comments-list-for-post-5'></ul>\n<script>\nfetch('/api/posts/5/comments').then(res => res.json()).then(comments => {\n  const list = document.getElementById('comments-list-for-post-5');\n  comments.forEach(comment => { list.innerHTML += `<li>${comment.text}</li>`; });\n});\n</script>"""
"एक 'Like' बटन बनाओ जो API को कॉल करे और लाइक काउंट अपडेट करे","""<p>Likes: <span id='like-count-for-post-5'>10</span></p>\n<button onclick=""fetch('/api/posts/5/like', {method:'POST'}).then(res=>res.json()).then(data=>document.getElementById('like-count-for-post-5').innerText=data.likes);"">👍 Like</button>"""
"यूज़र रजिस्ट्रेशन के लिए एक AJAX फॉर्म बनाओ","""<form id='registration-form'>...</form>\n<script>// JavaScript to submit registration form data as a JSON object via a fetch POST request</script>"""
"यूज़र लॉगइन के लिए एक AJAX फॉर्म बनाओ और JWT टोकन को localStorage में सेव करो","""<script>\n// ... inside form submit event listener ...\nfetch('/api/login', ...).then(res => res.json()).then(data => {\n  if (data.token) {\n    localStorage.setItem('jwt_token', data.token);\n    window.location.href = '/dashboard'; // redirect to dashboard\n  }\n});\n</script>"""
"हर प्रोटेक्टेड API रिक्वेस्ट के साथ JWT टोकन भेजो","""<script>\nconst token = localStorage.getItem('jwt_token');\nfetch('/api/protected-route', { \n    headers: {\n        'Authorization': `Bearer ${token}`\n    }\n});\n</script>"""
"एक लॉगआउट बटन बनाओ जो JWT टोकन को localStorage से हटाए","""<button onclick=""localStorage.removeItem('jwt_token'); window.location.href = '/login';"">Logout</button>"""
"Markdown कंटेंट को HTML में बदलने के लिए एक लाइब्रेरी (जैसे Showdown.js) का उपयोग करो","""<script src='https://cdnjs.cloudflare.com/ajax/libs/showdown/2.1.0/showdown.min.js'></script>\n<script>\n  const converter = new showdown.Converter();\n  const markdownText = '# Hello\\n**This is bold.**';\n  const html = converter.makeHtml(markdownText);\n</script>"""
"API से मिले Markdown कंटेंट को पेज पर रेंडर करो","""fetch('/api/posts/1').then(res => res.json()).then(post => {\n  const converter = new showdown.Converter();\n  const htmlContent = converter.makeHtml(post.content);\n  document.getElementById('post-content-div').innerHTML = htmlContent;\n});"""
"तारीख को एक रीडेबल फॉर्मेट में दिखाने के लिए एक जावास्क्रिप्ट फंक्शन","""function formatReadableDate(isoString) {\n  return new Date(isoString).toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' });\n}"""
"एक लोडिंग स्पिनर दिखाओ जब API कॉल चल रही हो","""function fetchDataWithLoader(){\n  document.getElementById('loader-spinner').style.display = 'block';\n  fetch('...').finally(() => {\n    document.getElementById('loader-spinner').style.display = 'none';\n  });\n}"""
"API से एरर आने पर यूज़र को एक एरर मैसेज दिखाओ","""<p id='error-display-area' style='color:red;'></p>\n<script>\nfetch('/api/invalid-endpoint').catch(error => {\n  document.getElementById('error-display-area').innerText = 'An error occurred while loading data.';\n});\n</script>"""
"एक 'Single Page Application' (SPA) का बेसिक राउटर बनाओ","""<script>\nwindow.onhashchange = function() {\n  const page = window.location.hash.substring(1);\n  // Logic to show content based on the 'page' variable (e.g., #/about, #/contact)\n}\n</script>"""
"वेबसाइट में एक सिंपल डार्क मोड टॉगल बनाओ","""<button onclick=""document.body.classList.toggle('dark-mode')"">Toggle Dark Mode</button>\n<style>.dark-mode { background: #333; color: white; }</style>"""
"एक ब्लॉग पोस्ट के लिए 'टैग्स' की लिस्ट दिखाओ","""// Assuming API returns post.tags = [{name:'tech'}, {name:'python'}]\nconst tagsHtml = post.tags.map(tag => `<span class='tag'>${tag.name}</span>`).join(' ');"""
"एक ब्लॉग पोस्ट के लेखक का नाम दिखाओ","""// Assuming API returns post.author = {username: 'Amit'}\ndocument.getElementById('author-name').innerText = `By ${post.author.username}`;"""
"एक नया पोस्ट बनाने के बाद पेज को री-रेंडर करो (बिना रीलोड किए)","""fetch('/api/posts', {method:'POST',...}).then(() => {\n  // Clear the form and call the function that fetches and renders all posts again\n  fetchAllPosts();\n});"""
"URL से पोस्ट ID निकालो और उस पोस्ट को फेच करो","""<script>\nconst pathParts = window.location.pathname.split('/');\nconst postId = pathParts[pathParts.length - 1];\nif(postId && !isNaN(postId)) {\n  fetchPost(postId);\n}\n</script>"""
"WebSocket का उपयोग करके रियल-टाइम कमेंट्स दिखाओ","""<script>\nconst socket = io(); // from socket.io.js\nsocket.on('new_comment_for_post_5', function(comment) {\n  // Add the new comment to the comments list dynamically without reloading the page\n});\n</script>"""
"WebSocket से कनेक्ट करने के लिए जावास्क्रिप्ट कोड","""<script src='https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.0.1/socket.io.js'></script>\n<script>var socket = io.connect('http://' + document.domain + ':' + location.port);</script>"""
"यूज़र को एक पोस्ट एडिट करने के लिए एक इन-प्लेस एडिटर दो (`contenteditable`)","""<div id='content-div' ondblclick=""this.contentEditable=true; this.focus();"">Double click to edit this text.</div>"""
"फ्रंटएंड पर फॉर्म वैलिडेशन (ईमेल) करो","""<form onsubmit=""const email = this.email.value; if(!email.includes('@') || !email.includes('.')){alert('Please enter a valid email address'); return false;}""><input name='email' type='email'></form>"""
"API से मिले पेजिनेशन डेटा को हैंडल करो और बटन को डिसेबल करो","""// API returns { 'posts': [...], 'has_next': true, 'next_page': 3 }\nif (!data.has_next) {\n  document.getElementById('load-more-button').disabled = true;\n}"""
"एक इमेज अपलोड फॉर्म बनाओ जो `FormData` का उपयोग करे","""<input type='file' id='image-file-input'>\n<script>\nfunction uploadImage(){\n  const fileInput = document.getElementById('image-file-input');\n  if (fileInput.files.length > 0) {\n      const formData = new FormData();\n      formData.append('image', fileInput.files[0]);\n      fetch('/api/upload', {method:'POST', body:formData});\n  }\n}\n</script>"""
"एक 'infinite scroll' फीचर बनाओ","""<script>\nconst contentEl = document.getElementById('content');\nwindow.addEventListener('scroll', () => {\n  const { scrollTop, scrollHeight, clientHeight } = document.documentElement;\n  if (scrollTop + clientHeight >= scrollHeight - 5) {\n    // Load more posts when user is near the bottom\n  }\n});\n</script>"""
"एक 'debounce' फंक्शन का उपयोग करके सर्च API कॉल्स को ऑप्टिमाइज़ करो","""<script>\nfunction debounce(func, delay=300) {\n  let timeout;\n  return function(...args) {\n    clearTimeout(timeout);\n    timeout = setTimeout(() => { func.apply(this, args); }, delay);\n  };\n}\nconst efficientSearch = debounce(searchTerm => fetch('/api/search?q='+searchTerm));\n</script>"""
"एक 'throttle' फंक्शन का उपयोग करके स्क्रॉल इवेंट्स को ऑप्टिमाइज़ करो","""<script>\nfunction throttle(func, limit) { \n  let inThrottle;\n  return function() {\n    if (!inThrottle) {\n      func.apply(this, arguments);\n      inThrottle = true;\n      setTimeout(() => inThrottle = false, limit);\n    }\n  }\n}\nwindow.addEventListener('scroll', throttle(() => console.log('Scrolled!'), 100));\n</script>"""
"एक ब्राउज़र नोटिफिकेशन (Notification API) भेजो","""<button onclick=""Notification.requestPermission().then(permission => { if (permission === 'granted') { new Notification('New Blog Post Available!'); } });"">Enable Notifications</button>"""
"एक पोस्ट को शेयर करने के लिए Web Share API का उपयोग करो","""<button onclick=""if(navigator.share){navigator.share({title: 'My Awesome Blog Post', url: '/posts/1'})} else {alert('Share not supported')}"">Share Post</button>"""
"फ्रंटएंड पर एक JSON ऑब्जेक्ट को सुंदर तरीके से दिखाओ","""<pre id='json-display-output'></pre>\n<script>\nconst myJsonObject = { id: 1, name: 'Amit', is_active: true };\ndocument.getElementById('json-display-output').textContent = JSON.stringify(myJsonObject, null, 2);\n</script>"""
"एक पोस्ट को localStorage का उपयोग करके 'बुकमार्क' करो","""<button onclick=""localStorage.setItem('bookmarked_post_1', 'true')"">Bookmark Post 1</button>"""
"एक लोडिंग स्केलेटन (skeleton) स्क्रीन का HTML/CSS बनाओ","""<style>@keyframes pulse{...} .skeleton-box{animation: pulse 1.5s infinite; background:#e0e0e0;}</style><div class='post-skeleton'><div class='skeleton-box' style='height:150px;'></div><div class='skeleton-box' style='height:20px; margin-top:10px;'></div></div>"""
"एक पोस्ट के 'पढ़ने का समय' (reading time) कैलकुलेट करो","""<script>\nfunction calculateReadingTime(text) {\n  const wordsPerMinute = 225;\n  const wordCount = text.trim().split(/\s+/).length;\n  const readingTime = Math.ceil(wordCount / wordsPerMinute);\n  return `${readingTime} min read`;\n}\n</script>"""
"एक ब्लॉग पोस्ट के लिए एक 'Table of Contents' डायनामिक रूप से जेनरेट करो","""<nav><h4>Contents</h4><ul id='table-of-contents'></ul></nav>\n<script>\ndocument.querySelectorAll('main h2').forEach(heading => {\n  const id = heading.textContent.toLowerCase().replace(/ /g, '-');\n  heading.id = id;\n  document.getElementById('table-of-contents').innerHTML += `<li><a href='#${id}'>${heading.textContent}</a></li>`;\n});\n</script>"""
"यूज़र से एक कन्फर्मेशन डायलॉग (dialog) दिखाओ","""<button onclick=""if(confirm('Are you absolutely sure you want to delete this?')){ console.log('Deleting...'); }"">Delete Item</button>"""
"Fetch API में `AbortController` का उपयोग करके एक रिक्वेस्ट को कैंसिल करो","""<script>\nconst controller = new AbortController();\nconst signal = controller.signal;\nfetch('...', {signal});\n\n// To cancel the request, for example after a timeout:\n// controller.abort();\n</script>"""
"एक नया पोस्ट बनाने के बाद यूज़र को उस पोस्ट के पेज पर रीडायरेक्ट करो","""fetch('/api/posts', {method:'POST',...}).then(res => res.json()).then(data => {\n  // Redirect to the new post's page\n  window.location.href = `/posts/${data.id}`;\n});"""
"एक API कॉल के लिए एक टाइमआउट सेट करो","""<script>\nconst controller = new AbortController();\nconst timeoutId = setTimeout(() => controller.abort(), 5000); // 5 second timeout\n\nfetch('/api/slow-endpoint', {signal: controller.signal})\n  .catch(error => { if (error.name === 'AbortError') console.error('Request timed out!'); })\n  .finally(() => clearTimeout(timeoutId));\n</script>"""
"एक सिंपल WYSIWYG एडिटर का ढाँचा (Bold, Italic)","""<div id='editor' contenteditable='true' style='border:1px solid #ccc; height:150px; padding:5px;'>Type your text here...</div>\n<button onclick=""document.execCommand('bold')""><b>B</b></button>\n<button onclick=""document.execCommand('italic')""><i>I</i></button>"""
"एक ब्लॉग के लिए User और Post डेटाबेस मॉडल बनाओ","""# In models.py\nfrom flask_sqlalchemy import SQLAlchemy\ndb = SQLAlchemy()\n\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    username = db.Column(db.String(80), unique=True, nullable=False)\n\nclass Post(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    title = db.Column(db.String(120), nullable=False)\n    content = db.Column(db.Text, nullable=False)\n    author_id = db.Column(db.Integer, db.ForeignKey('user.id'))"""
"Flask ऐप को SQLAlchemy डेटाबेस के साथ कॉन्फ़िगर करो","""# In app.py\nfrom flask import Flask\nfrom models import db\n\napp = Flask(__name__)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///blog.db'\ndb.init_app(app)"""
"सभी ब्लॉग पोस्ट्स को लौटाने वाला एक API एंडपॉइंट बनाओ","""@app.route('/api/posts', methods=['GET'])\ndef get_all_posts():\n    posts = Post.query.all()\n    return jsonify([{'id': p.id, 'title': p.title} for p in posts])"""
"एक सिंगल ब्लॉग पोस्ट को ID से लौटाने वाला API बनाओ","""@app.route('/api/posts/<int:post_id>', methods=['GET'])\ndef get_post(post_id):\n    post = Post.query.get_or_404(post_id)\n    return jsonify({'title': post.title, 'content': post.content})"""
"एक नया ब्लॉग पोस्ट बनाने के लिए एक API एंडपॉइंट बनाओ","""@app.route('/api/posts', methods=['POST'])\ndef create_post():\n    data = request.json\n    new_post = Post(title=data['title'], content=data['content'])\n    db.session.add(new_post)\n    db.session.commit()\n    return jsonify({'id': new_post.id}), 201"""
"एक ब्लॉग पोस्ट को अपडेट करने के लिए एक API एंडपॉइंट बनाओ","""@app.route('/api/posts/<int:post_id>', methods=['PUT'])\ndef update_post(post_id):\n    post = Post.query.get_or_404(post_id)\n    data = request.json\n    post.title = data.get('title', post.title)\n    post.content = data.get('content', post.content)\n    db.session.commit()\n    return jsonify({'message': 'Post updated'})"""
"एक ब्लॉग पोस्ट को डिलीट करने के लिए एक API एंडपॉइंट बनाओ","""@app.route('/api/posts/<int:post_id>', methods=['DELETE'])\ndef delete_post(post_id):\n    post = Post.query.get_or_404(post_id)\n    db.session.delete(post)\n    db.session.commit()\n    return jsonify({'message': 'Post deleted'})"""
"Flask-Migrate का उपयोग करके डेटाबेस माइग्रेशन सेटअप करो","""from flask_migrate import Migrate\nmigrate = Migrate(app, db)"""
"Alembic माइग्रेशन स्क्रिप्ट बनाओ","flask db migrate -m 'Initial migration.'"
"Alembic माइग्रेशन को डेटाबेस पर अप्लाई करो","flask db upgrade"
"एक Flask कमांड बनाओ जो डेटाबेस को इनिशियलाइज़ करे","""@app.cli.command('init-db')\ndef init_db_command():\n    db.create_all()\n    print('Initialized the database.')"""
"ब्लॉग के लिए एक 'Comment' मॉडल बनाओ","""class Comment(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    text = db.Column(db.String(200), nullable=False)\n    post_id = db.Column(db.Integer, db.ForeignKey('post.id'))"""
"एक पोस्ट के सभी कमेंट्स को लौटाने वाला API बनाओ","""@app.route('/api/posts/<int:post_id>/comments')\ndef get_comments(post_id):\n    comments = Comment.query.filter_by(post_id=post_id).all()\n    return jsonify([{'text': c.text} for c in comments])"""
"एक पोस्ट पर नया कमेंट करने के लिए API बनाओ","""@app.route('/api/posts/<int:post_id>/comments', methods=['POST'])\ndef add_comment(post_id):\n    new_comment = Comment(text=request.json['text'], post_id=post_id)\n    db.session.add(new_comment)\n    db.session.commit()\n    return jsonify({'id': new_comment.id})"""
"ब्लॉग पोस्ट मॉडल में एक 'created_at' फील्ड जोड़ो","""created_at = db.Column(db.DateTime, default=datetime.utcnow)"""
"पोस्ट्स को लेटेस्ट पहले के क्रम में क्वेरी करो","""posts = Post.query.order_by(Post.created_at.desc()).all()"""
"एक API बनाओ जो पोस्ट्स को पेजिनेट (paginate) करे","""@app.route('/api/posts-paginated')\ndef get_paginated_posts():\n    page = request.args.get('page', 1, type=int)\n    pagination = Post.query.paginate(page=page, per_page=5)\n    return jsonify([...]) # Return paginated data"""
"एक यूज़र रजिस्ट्रेशन के लिए API एंडपॉइंट","""@app.route('/api/register', methods=['POST'])\ndef register():\n    # ... create user and hash password ...\n    return jsonify({'message': 'User created'})"""
"एक यूज़र लॉगइन के लिए API एंडपॉइंट जो JWT टोकन लौटाए","""@app.route('/api/login', methods=['POST'])\ndef login():\n    # ... check credentials ...\n    # token = create_jwt_token(...)\n    return jsonify({'token': token})"""
"एक प्रोटेक्टेड API रूट बनाओ जो JWT टोकन की जाँच करे","""@app.route('/api/protected')\n@jwt_required()\ndef protected():\n    return jsonify({'message': 'This is a protected route'})"""
"ब्लॉग के लिए एक 'Tag' मॉडल बनाओ (Many-to-Many)","""tags = db.Table('tags', ...)\nclass Post(db.Model):\n    tags = db.relationship('Tag', secondary=tags, backref='posts')"""
"एक पोस्ट को उसके टैग्स के साथ लौटाने वाला API","""@app.route('/api/posts/<int:id>')\ndef get_post_with_tags(id):\n    post = Post.query.get(id)\n    return jsonify({'title': post.title, 'tags': [tag.name for tag in post.tags]})"""
"एक सर्च API बनाओ जो टाइटल और कंटेंट में खोजे","""@app.route('/api/search')\ndef search():\n    query = request.args.get('q')\n    results = Post.query.filter(Post.title.contains(query) | Post.content.contains(query)).all()\n    return jsonify([...])"""
"Flask-CORS का उपयोग करके API पर CORS इनेबल करो","""from flask_cors import CORS\nCORS(app, resources={r'/api/*': {'origins': '*'}})"""
"Flask-SQLAlchemy में रिलेशनशिप के लिए `back_populates` का उपयोग करो","""class User(db.Model):\n    posts = db.relationship('Post', back_populates='author')\n\nclass Post(db.Model):\n    author = db.relationship('User', back_populates='posts')"""
"एक ब्लॉग पोस्ट पर 'लाइक' करने के लिए API","""@app.route('/api/posts/<int:id>/like', methods=['POST'])\ndef like_post(id):\n    post = Post.query.get(id)\n    post.likes += 1\n    db.session.commit()\n    return jsonify({'likes': post.likes})"""
"ब्लॉग पोस्ट मॉडल में `likes` कॉलम जोड़ो","""likes = db.Column(db.Integer, default=0)"""
"ब्लॉग पोस्ट्स को लाइक्स की संख्या के आधार पर सॉर्ट करो","""popular_posts = Post.query.order_by(Post.likes.desc()).limit(5).all()"""
"Flask में यूनिट टेस्ट के लिए एक टेस्ट डेटाबेस कॉन्फ़िगर करो","""app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///:memory:'"""
"एक API एंडपॉइंट का pytest से टेस्ट लिखो","""def test_get_posts(client):\n    response = client.get('/api/posts')\n    assert response.status_code == 200"""
"ब्लूप्रिंट का उपयोग करके एडमिन सेक्शन बनाओ","""admin_bp = Blueprint('admin', __name__, url_prefix='/admin')"""
"एक API बनाओ जो YAML डेटा लौटाए","""import yaml\n@app.route('/api/data.yaml')\ndef get_yaml():\n    data = {'a': 1}\n    return Response(yaml.dump(data), mimetype='text/yaml')"""
"Flask में एक कस्टम CLI कमांड बनाओ","""@app.cli.command('create-user')\n@click.argument('name')\ndef create_user(name):\n    # ... logic to create user ..."""
"SQLAlchemy में eager लोडिंग का उपयोग करो","""posts = Post.query.options(db.joinedload(Post.author)).all()"""
"SQLAlchemy में lazy लोडिंग का उपयोग करो","""# This is the default behavior\npost = Post.query.get(1)\n# The author is fetched from the DB only when you access it:\nprint(post.author.name)"""
"एक API बनाओ जो एक फाइल डाउनलोड करवाए","""from flask import send_file\n@app.route('/download')\ndef download_file():\n    return send_file('my_file.zip', as_attachment=True)"""
"अपने Flask ऐप के लिए एक `config.py` फाइल बनाओ","""# config.py\nclass Config:\n    SECRET_KEY = os.environ.get('SECRET_KEY')\n    SQLALCHEMY_DATABASE_URI = os.environ.get('DATABASE_URI')"""
"फैक्ट्री पैटर्न का उपयोग करके Flask ऐप बनाओ","""def create_app(config_class=Config):\n    app = Flask(__name__)\n    app.config.from_object(config_class)\n    db.init_app(app)\n    return app"""
"ब्लॉग पोस्ट में Markdown कंटेंट को सपोर्ट करो","""import markdown\n@app.route('/posts/<int:id>')\ndef show_post(id):\n    post = Post.query.get(id)\n    post.content_html = markdown.markdown(post.content)\n    return render_template('post.html', post=post)"""
"एक API बनाओ जो इमेज अपलोड को हैंडल करे","""@app.route('/api/upload', methods=['POST'])\ndef upload_image():\n    file = request.files['image']\n    # ... save file securely ...\n    return jsonify({'url': file_url})"""
"ब्लॉग पोस्ट मॉडल में एक 'status' फील्ड (draft, published) जोड़ो","""status = db.Column(db.String(10), default='draft', nullable=False)"""
"सिर्फ पब्लिश हुए पोस्ट्स को दिखाने वाला एक API बनाओ","""@app.route('/api/published-posts')\ndef get_published_posts():\n    posts = Post.query.filter_by(status='published').all()\n    return jsonify([...])"""
"SQLAlchemy में एक हाइब्रिड प्रॉपर्टी बनाओ","""from sqlalchemy.ext.hybrid import hybrid_property\nclass User(db.Model):\n    # ... first_name, last_name columns ...\n    @hybrid_property\n    def full_name(self):\n        return self.first_name + ' ' + self.last_name"""
"API रिस्पॉन्स के लिए एक कस्टम JSON एन्कोडर बनाओ","""import json\nfrom datetime import date\nclass CustomJSONEncoder(json.JSONEncoder):\n    def default(self, obj):\n        if isinstance(obj, date):\n            return obj.isoformat()\n        return super().default(obj)"""
"Flask में एक WebSocket का उपयोग करके रियल-टाइम नोटिफिकेशन भेजो","""# Using Flask-SocketIO\n@socketio.on('new_post_created')\ndef handle_new_post_notification(data):\n    emit('notification', {'message': 'A new post was created!'}, broadcast=True)"""
"पाइथन में UUID का उपयोग करके एक यूनिक आईडी जेनरेट करो","""import uuid\npublic_id = str(uuid.uuid4())"""
"ब्लॉग पोस्ट मॉडल में एक स्लग (slug) फील्ड जोड़ो","""slug = db.Column(db.String(120), unique=True, nullable=False, index=True)"""
"एक फंक्शन बनाओ जो टाइटल से एक स्लग जेनरेट करे","""import re\ndef slugify(text):\n    text = text.lower().strip()\n    text = re.sub(r'[^\\w\\s-]', '', text)\n    text = re.sub(r'[\\s_-]+', '-', text)\n    return text"""
"एक API बनाओ जो XML डेटा लौटाए (Jinja2 टेम्पलेट का उपयोग करके)","""@app.route('/feed.xml')\ndef get_xml_feed():\n    # ... get posts from db ...\n    return Response(render_template('feed.xml', posts=posts), mimetype='application/xml')"""
"एक पाइथन स्क्रिप्ट बनाओ जो कमांड-लाइन से एक नाम ले और उसे ग्रीट करे","import sys\nif len(sys.argv) > 1:\n    name = sys.argv[1]\n    print(f'Hello, {name}')"
"एक कमांड-लाइन कैलकुलेटर बनाओ जो दो नंबरों को जोड़े","import sys\nnum1 = int(sys.argv[1])\nnum2 = int(sys.argv[2])\nprint(num1 + num2)"
"`argparse` का उपयोग करके एक कमांड-लाइन टूल बनाओ","import argparse\nparser = argparse.ArgumentParser()\nparser.add_argument('filename')\nargs = parser.parse_args()"
"एक फाइल में लाइनों, शब्दों और कैरेक्टर्स की गिनती करने वाली स्क्रिप्ट","import sys\nfilename = sys.argv[1]\nlines, words, chars = 0, 0, 0\nwith open(filename, 'r') as f:\n    for line in f:\n        lines += 1\n        words += len(line.split())\n        chars += len(line)\nprint(f'Lines: {lines}, Words: {words}, Chars: {chars}')"
"पाइथन से एक सिंपल HTTP सर्वर शुरू करो","import http.server\nimport socketserver\nPORT = 8000\nHandler = http.server.SimpleHTTPRequestHandler\nwith socketserver.TCPServer(('', PORT), Handler) as httpd:\n    httpd.serve_forever()"
"एक फोल्डर की सभी '.jpg' फाइलों को '.jpeg' में रीनेम करो","import os\nfor filename in os.listdir('.'):\n    if filename.endswith('.jpg'):\n        os.rename(filename, filename[:-4] + '.jpeg')"
"एक स्क्रिप्ट बनाओ जो एक डायरेक्टरी में 1MB से बड़ी सभी फाइलों को ढूंढे","import os\nfor filename in os.listdir('.'):\n    if os.path.getsize(filename) > 1024 * 1024:\n        print(filename)"
"एक CSV फाइल को JSON में बदलने के लिए एक स्क्रिप्ट लिखो","import csv, json\ndata = []\nwith open('data.csv', 'r') as f:\n    for row in csv.DictReader(f):\n        data.append(row)\nwith open('data.json', 'w') as f:\n    json.dump(data, f, indent=4)"
"लॉग्स को एक फाइल में लिखो","import logging\nlogging.basicConfig(filename='app.log', level=logging.INFO)\nlogging.info('Program started')"
"`subprocess` मॉड्यूल का उपयोग करके एक शेल कमांड चलाओ","import subprocess\nsubprocess.run(['ls', '-l'])"
"एक फोल्डर को ज़िप (zip) करने के लिए एक स्क्रिप्ट लिखो","import shutil\nshutil.make_archive('my_archive', 'zip', 'folder_to_zip')"
"एक ज़िप फाइल को अनज़िप करो","import shutil\nshutil.unpack_archive('archive.zip', 'destination_folder')"
"पाइथन में एक एनवायरनमेंट वेरिएबल को पढ़ो","import os\napi_key = os.environ.get('API_KEY')"
"एक डायरेक्टरी ट्री को वॉक (walk) करो","import os\nfor dirpath, dirnames, filenames in os.walk('.'):\n    print(f'Directory: {dirpath}')\n    for file_name in filenames:\n        print(f'  {file_name}')"
"एक टेक्स्ट फाइल में एक शब्द को दूसरे से बदलो","with open('file.txt', 'r') as f: content = f.read()\nnew_content = content.replace('old', 'new')\nwith open('file.txt', 'w') as f: f.write(new_content)"
"एक डायरेक्टरी के सभी डुप्लीकेट फाइलों को ढूंढो (hash का उपयोग करके)","import hashlib, os\n# ... logic to calculate hashes and find duplicates ... "
"एक पासवर्ड जेनरेटर कमांड-लाइन टूल बनाओ","import random, string, argparse\nparser = argparse.ArgumentParser()\nparser.add_argument('length', type=int)\nargs = parser.parse_args()\npassword = ''.join(random.choice(string.ascii_letters) for _ in range(args.length))\nprint(password)"
"`platform` मॉड्यूल का उपयोग करके ऑपरेटिंग सिस्टम की जानकारी प्राप्त करो","import platform\nprint(f'OS: {platform.system()}, Version: {platform.version()}')"
"`pickle` का उपयोग करके एक पाइथन ऑब्जेक्ट को सेव करो","import pickle\nmy_data = {'a': 1}\nwith open('data.pkl', 'wb') as f:\n    pickle.dump(my_data, f)"
"`pickle` का उपयोग करके एक पाइथन ऑब्जेक्ट को लोड करो","import pickle\nwith open('data.pkl', 'rb') as f:\n    loaded_data = pickle.load(f)"
"`getpass` का उपयोग करके यूज़र से सुरक्षित रूप से पासवर्ड पूछो","import getpass\npassword = getpass.getpass('Enter your password: ')"
"पाइथन स्क्रिप्ट को 10 सेकंड के लिए रोको (sleep)","import time\nprint('Waiting...')\ntime.sleep(10)\nprint('Done waiting.')"
"एक स्क्रिप्ट के एक्सीक्यूशन समय को मापो","import time\nstart_time = time.time()\n# ... your long process ...\nend_time = time.time()\nprint(f'Duration: {end_time - start_time} seconds')"
"एक सिंपल API सर्वर बनाओ जो FastAPI का उपयोग करे","from fastapi import FastAPI\napp = FastAPI()\n@app.get('/')\ndef read_root(): return {'Hello': 'World'}"
"पाइथन में एक SQLite डेटाबेस से कनेक्ट करो","import sqlite3\nconn = sqlite3.connect('my_database.db')"
"SQLite डेटाबेस में एक टेबल बनाओ","import sqlite3\nconn = sqlite3.connect('db.db')\nc = conn.cursor()\nc.execute('CREATE TABLE users (id INT, name TEXT)')\nconn.commit()\nconn.close()"
"SQLite टेबल में डेटा इंसर्ट करो","import sqlite3\nconn = sqlite.connect('db.db')\nc = conn.cursor()\nc.execute(\"INSERT INTO users VALUES (1, 'Amit')\")\nconn.commit()\nconn.close()"
"SQLite टेबल से डेटा सिलेक्ट करो","import sqlite3\nconn = sqlite3.connect('db.db')\nc = conn.cursor()\nfor row in c.execute('SELECT * FROM users'):\n    print(row)"
"एक Temporary Directory बनाओ","import tempfile\nwith tempfile.TemporaryDirectory() as tmpdir:\n    print('Created temporary directory', tmpdir)"
"एक टेक्स्ट फाइल की आखिरी N लाइनों को पढ़ो","def read_last_n_lines(filename, n):\n    with open(filename, 'r') as f:\n        return f.readlines()[-n:]"
"एक URL से एक फाइल डाउनलोड करो और प्रोग्रेस बार दिखाओ (tqdm)","from tqdm import tqdm\nimport requests\n# ... code to download a large file with a progress bar using tqdm ..."
"एक सिंपल कमांड-लाइन To-Do ऐप बनाओ (स्यूडो-कोड)","import sys\n# ... logic for a simple CLI to-do app that reads/writes to a file ..."
"`configparser` का उपयोग करके एक कॉन्फ़िगरेशन फाइल पढ़ो","import configparser\nconfig = configparser.ConfigParser()\nconfig.read('settings.ini')"
"एक पाइथन स्क्रिप्ट को बैकग्राउंड में चलाओ (daemonize)","import os\n# ... code for daemonizing a process using fork()..."
"पाइथन में मल्टीथ्रेडिंग का एक बेसिक उदाहरण","import threading\ndef task(): print('Task running')\n\nthread = threading.Thread(target=task)\nthread.start()"
"पाइथन में मल्टीप्रोसेसिंग का एक बेसिक उदाहरण","import multiprocessing\ndef worker(): print('Worker process')\n\nprocess = multiprocessing.Process(target=worker)\nprocess.start()"
"एक क्यू (Queue) का उपयोग करके थ्रेड्स के बीच डेटा शेयर करो","import queue, threading\nq = queue.Queue()\ndef producer(): q.put('hello')\ndef consumer(): item = q.get()\n\nt1 = threading.Thread(target=producer)\nt2 = threading.Thread(target=consumer)"
"एक पाइथन स्क्रिप्ट को एग्जीक्यूटेबल (executable) बनाओ (PyInstaller)","pyinstaller --onefile my_script.py"
"पाइथन से एक वेब ब्राउज़र खोलो","import webbrowser\nwebbrowser.open('https://google.com')"
"डाउनलोड फोल्डर में फाइलों को उनके एक्सटेंशन के आधार पर व्यवस्थित करो","import os, shutil\n# ... script to organize files in the Downloads folder ..."
"एक पाइथन स्क्रिप्ट जो एक वेबसाइट के डाउन होने पर अलर्ट भेजे","import requests, time\nwhile True:\n    try:\n        r = requests.get('http://example.com')\n        if r.status_code != 200:\n            print('Site is down!')\n    except:\n        print('Site is down!')\n    time.sleep(60)"
"एक इमेज का साइज़ बदलो (Pillow)","from PIL import Image\nimg = Image.open('in.jpg')\nresized = img.resize((200, 200))\nresized.save('out.jpg')"
"एक वॉटरमार्क को एक इमेज पर लगाओ","from PIL import Image, ImageDraw, ImageFont\n# ... code to add a text watermark to an image ..."
"एक डायरेक्टरी की सभी इमेजेज को कंप्रेस करो","import os\nfrom PIL import Image\n# ... script to loop through images and save with lower quality ..."
"एक MP3 फाइल से मेटाडेटा (ID3 tags) पढ़ो","from mutagen.mp3 import MP3\naudio = MP3('song.mp3')\nprint(audio.info.length)"
"एक PDF फाइल से टेक्स्ट निकालो (PyPDF2)","import PyPDF2\npdfFileObj = open('doc.pdf', 'rb')\npdfReader = PyPDF2.PdfReader(pdfFileObj)"
"कई PDF फाइलों को एक में मर्ज करो","from PyPDF2 import PdfMerger\nmerger = PdfMerger()\nfor pdf in ['file1.pdf', 'file2.pdf']:\n    merger.append(pdf)\nmerger.write('merged.pdf')"
"पाइथन से एक QR कोड बनाओ","import qrcode\nimg = qrcode.make('Some data to encode')\nimg.save('qrcode.png')"
"पाइथन से वाई-फाई नेटवर्क के लिए एक QR कोड बनाओ","import qrcode\n# ... code to generate a Wi-Fi QR code ..."
"Chart.js लाइब्रेरी को HTML में शामिल करो","<script src='https://cdn.jsdelivr.net/npm/chart.js'></script>"
"एक बार चार्ट (bar chart) बनाने के लिए एक कैनवास एलिमेंट बनाओ","<div style='width: 400px;'><canvas id='myBarChart'></canvas></div>"
"Chart.js का उपयोग करके एक सिंपल बार चार्ट बनाओ","<canvas id='c1'></canvas><script>new Chart(document.getElementById('c1'),{type:'bar',data:{labels:['January','February'], datasets:[{label:'Monthly Sales', data:[65, 59]}]}});</script>"
"Chart.js का उपयोग करके एक सिंपल लाइन चार्ट बनाओ","<canvas id='c2'></canvas><script>new Chart(document.getElementById('c2'),{type:'line',data:{labels:['Day 1','Day 2'], datasets:[{label:'Website Traffic', data:[100,150], fill:false, borderColor:'rgb(75, 192, 192)'}]}});</script>"
"Chart.js का उपयोग करके एक सिंपल पाई चार्ट बनाओ","<canvas id='c3'></canvas><script>new Chart(document.getElementById('c3'),{type:'pie',data:{labels:['Red','Blue','Yellow'], datasets:[{data:[300,50,100], backgroundColor:['Red','Blue','Yellow']}]}});</script>"
"Chart.js का उपयोग करके एक डोनट चार्ट (doughnut chart) बनाओ","<canvas id='c4'></canvas><script>new Chart(document.getElementById('c4'),{type:'doughnut',data:{...}});</script>"
"Chart.js का उपयोग करके एक रडार चार्ट (radar chart) बनाओ","<canvas id='c5'></canvas><script>new Chart(document.getElementById('c5'),{type:'radar',data:{labels:['Coding','Eating','Sleeping'], datasets:[{label:'My Skills', data:[9,7,8]}]}});</script>"
"Chart.js का उपयोग करके एक पोलर एरिया चार्ट (polar area chart) बनाओ","<canvas id='c6'></canvas><script>new Chart(document.getElementById('c6'),{type:'polarArea',data:{...}});</script>"
"एक चार्ट में टाइटल जोड़ो","options: { plugins: { title: { display: true, text: 'Custom Chart Title' } } }"
"एक चार्ट में लीजेंड (legend) को छिपाओ","options: { plugins: { legend: { display: false } } }"
"एक बार चार्ट के बार्स का रंग बदलो","datasets: [{ label: 'Data', data: [12, 19], backgroundColor: ['rgba(255, 99, 132, 0.2)', 'rgba(54, 162, 235, 0.2)'] }]"
"एक लाइन चार्ट की लाइन का रंग और मोटाई बदलो","datasets: [{ label: 'Data', data: [10, 20], borderColor: 'green', borderWidth: 3 }]"
"AJAX का उपयोग करके एक चार्ट का डेटा डायनामिक रूप से लोड करो","<script>fetch('/api/chart-data').then(res => res.json()).then(chartData => { new Chart(..., { data: chartData }); });</script>"
"एक बटन क्लिक पर चार्ट को अपडेट करो","<script>myChart.data.datasets[0].data = [50, 60, 70]; myChart.update();</script>"
"D3.js लाइब्रेरी को HTML में शामिल करो","<script src='https://d3js.org/d3.v7.min.js'></script>"
"D3.js का उपयोग करके एक सिंपल SVG एलिमेंट बनाओ","<div id='d3-container'></div><script>const svg = d3.select('#d3-container').append('svg').attr('width', 200).attr('height', 100);</script>"
"D3.js का उपयोग करके एक सर्किल बनाओ","<script>/*...after creating svg...*/ svg.append('circle').attr('cx', 50).attr('cy', 50).attr('r', 40).style('fill', 'blue');</script>"
"D3.js का उपयोग करके एक रेक्टेंगल बनाओ","<script>/*...after creating svg...*/ svg.append('rect').attr('x', 10).attr('y', 10).attr('width', 80).attr('height', 80).style('fill','green');</script>"
"D3.js में डेटा के आधार पर कई बार्स बनाओ","<script>const data=[10, 40, 32, 68]; const svg = d3.select('svg'); svg.selectAll('rect').data(data).enter().append('rect').attr('height', d=>d);</script>"
"D3.js में एक लीनियर स्केल (scale) बनाओ","<script>const xScale = d3.scaleLinear().domain([0, 100]).range([0, 500]);</script>"
"D3.js में एक एक्सिस (axis) बनाओ","<script>const xAxis = d3.axisBottom(xScale); svg.append('g').attr('transform', 'translate(0, 100)').call(xAxis);</script>"
"D3.js में एक ट्रांजीशन (transition) का उपयोग करो","<script>d3.select('circle').transition().duration(1000).attr('r', 10).style('fill', 'red');</script>"
"D3.js में एक माउसओवर इवेंट जोड़ो","<script>d3.selectAll('rect').on('mouseover', function(){ d3.select(this).style('fill', 'orange'); }).on('mouseout', function(){ d3.select(this).style('fill', 'green'); });</script>"
"D3.js का उपयोग करके एक CSV फाइल लोड करो","<script>d3.csv('my_data.csv').then(function(data) { console.log(data[0]); });</script>"
"D3.js का उपयोग करके एक JSON फाइल लोड करो","<script>d3.json('my_data.json').then(function(data) { console.log(data); });</script>"
"Chart.js में एक हॉरिजॉन्टल बार चार्ट बनाओ","<script>new Chart(ctx, {type:'bar', data: data, options: { indexAxis: 'y' }});</script>"
"Chart.js में एक स्टैक्ड बार चार्ट (stacked bar chart) बनाओ","<script>new Chart(ctx, {type:'bar', data: data, options: { scales: { x: { stacked: true }, y: { stacked: true } } }});</script>"
"Chart.js में एक बबल चार्ट (bubble chart) बनाओ","<script>new Chart(ctx, {type:'bubble', data: { datasets: [{label:'My Data', data:[{x:10,y:20,r:15}, {x:15,y:10,r:25}]}] }});</script>"
"Chart.js में एक स्कैटर चार्ट (scatter chart) बनाओ","<script>new Chart(ctx, {type:'scatter', data: { datasets: [{label:'Scatter Data', data:[{x:1,y:2},{x:3,y:4},{x:2,y:5}]}] }});</script>"
"एक चार्ट के टूलटिप्स (tooltips) को कस्टमाइज करो","options: { plugins: { tooltip: { callbacks: { label: function(context){ return `Value: ${context.parsed.y}`; } } } } }"
"एक चार्ट के एक्सिस लेबल्स को बदलो","options: { scales: { y: { title: { display: true, text: 'Total Sales ($)' } } } }"
"D3.js में एक पाई चार्ट का लेआउट बनाओ","<script>const pieGenerator = d3.pie(); const data_ready_for_pie = pieGenerator([10,20,30]);</script>"
"D3.js में एक आर्क (arc) जेनरेटर बनाओ","<script>const arcGenerator = d3.arc().innerRadius(50).outerRadius(100);</script>"
"D3.js में एक फोर्स-डायरेक्टेड ग्राफ (force-directed graph) का ढाँचा","<script>const simulation = d3.forceSimulation(nodes).force('link', d3.forceLink(links).id(d => d.id)).force('charge', d3.forceManyBody());</script>"
"एक मैप (जैसे भारत का) बनाने के लिए TopoJSON और D3.js का उपयोग करो","<script>d3.json('india_topo.json').then(function(topology) { const geojson = topojson.feature(topology, topology.objects.india); /* draw map with d3.geoPath() */ });</script>"
"Google Charts का उपयोग करके एक गेज चार्ट (gauge chart) बनाओ","<script type='text/javascript' src='https://www.gstatic.com/charts/loader.js'></script><script>google.charts.load('current', {'packages':['gauge']}); google.charts.setOnLoadCallback(drawChart); function drawChart(){...}</script>"
"Highcharts का उपयोग करके एक 3D कॉलम चार्ट बनाओ","<script src='https://code.highcharts.com/highcharts.js'></script><script src='https://code.highcharts.com/highcharts-3d.js'></script><div id='container'></div><script>Highcharts.chart('container', {chart:{type:'column', options3d:{enabled:true}}, ...});</script>"
"Leaflet.js का उपयोग करके एक इंटरैक्टिव मैप बनाओ","<link rel='stylesheet' href='https://unpkg.com/leaflet/dist/leaflet.css' /><script src='https://unpkg.com/leaflet/dist/leaflet.js'></script><div id='mapid' style='height: 200px;'></div><script>var mymap = L.map('mapid').setView([26.84, 80.94], 13); L.marker([26.84, 80.94]).addTo(mymap);</script>"
"एक Flask API बनाओ जो चार्ट के लिए डायनामिक डेटा लौटाए","@app.route('/api/monthly-sales')\ndef monthly_sales_data():\n    data = {'labels':['Jan','Feb'], 'values':[100,120]}\n    return jsonify(data)"
"Chart.js में एक मिक्सड-टाइप (mixed-type) चार्ट बनाओ (बार और लाइन)","<script>new Chart(ctx, {data: {datasets:[{type:'bar', label:'Bar Data', data:[10,20]},{type:'line', label:'Line Data', data:[15,15]}]}})</script>"
"एक चार्ट में एक बटन से नया डेटा जोड़ो","<script>function addDataToChart(chart, label, data) { chart.data.labels.push(label); chart.data.datasets.forEach((dataset) => { dataset.data.push(data); }); chart.update(); }</script>"
"एक चार्ट से डेटा को हटाओ","<script>function removeDataFromChart(chart) { chart.data.labels.pop(); chart.data.datasets.forEach((dataset) => { dataset.data.pop(); }); chart.update(); }</script>"
"D3.js में एक ब्रश करने योग्य (brushable) स्कैटर प्लॉट बनाओ","<script>const brush = d3.brush().extent([[0,0],[w,h]]).on('start brush end', brushed); svg.append('g').call(brush);</script>"
"एक चार्ट को responsive बनाओ","options: { responsive: true, maintainAspectRatio: false }"
"D3.js में एक ट्रीमैप (treemap) लेआउट बनाओ","<script>const root = d3.hierarchy(data).sum(d => d.value); const treemapLayout = d3.treemap().size([500, 500]).padding(1); treemapLayout(root);</script>"
"Plotly.js का उपयोग करके एक 3D सरफेस प्लॉट बनाओ","<script src='https://cdn.plot.ly/plotly-latest.min.js'></script><div id='myDiv3D'></div><script>Plotly.newPlot('myDiv3D', data, layout);</script>"
"Chart.js में एक टाइमलाइन चार्ट बनाओ","<script>new Chart(ctx, {type:'bar', options:{indexAxis:'y', ...}})</script>"
"एक स्पार्कलाइन (Sparkline) चार्ट बनाओ",""
"एक सनबर्स्ट (Sunburst) चार्ट का कॉन्सेप्ट","// A hierarchical chart, similar to a treemap, but represented by a radial layout. Each level of the hierarchy is a ring."
"एक प्रोडक्ट कार्ड कॉम्पोनेन्ट बनाओ","<div class='product-card' style='border:1px solid #ddd; width:200px; text-align:center;'><img src='product.jpg' width='100%' alt='Product'><h3 class='product-title'>Product Name</h3><p class='product-price'>$19.99</p><button>Add to Cart</button></div>"
"एक प्रोडक्ट ग्रिड लेआउट बनाओ","<div class='product-grid' style='display:grid; grid-template-columns:repeat(auto-fit, minmax(200px, 1fr)); gap:15px;'>...product cards here...</div>"
"एक 'Add to Cart' बटन बनाओ जो एक आइटम को कार्ट में जोड़े","<button onclick=""addToCart({id: 'prod123', name: 'Cool Laptop', price: 999.99})"">Add to Cart</button><script>let shoppingCart=[]; function addToCart(product){shoppingCart.push(product); console.log('Cart:', shoppingCart);}</script>"
"शॉपिंग कार्ट में आइटम्स की संख्या दिखाने वाला एक आइकन बनाओ","<div id='cart-icon-wrapper'>🛒 Cart (<span id='cart-item-count'>0</span>)</div>"
"शॉपिंग कार्ट का UI बनाओ जिसमें आइटम्स और टोटल हो","<div class='shopping-cart-summary'><h2>Your Cart</h2><ul id='cart-items-list'><li>Laptop - $999.99</li></ul><p style='font-weight:bold;'>Total: $<span id='cart-total-price'>999.99</span></p></div>"
"जावास्क्रिप्ट में शॉपिंग कार्ट के टोटल की गणना करो","function calculateCartTotal(){\n  let total = shoppingCart.reduce((sum, item) => sum + item.price, 0);\n  document.getElementById('cart-total-price').innerText = total.toFixed(2);\n}"
"एक प्रोडक्ट की मात्रा (quantity) को बदलने के लिए एक इनपुट बनाओ","<input type='number' value='1' min='1' onchange='updateProductQuantityInCart(123, this.value)'>"
"एक चेकआउट फॉर्म का ढाँचा बनाओ","<form id='checkout-form'><fieldset><legend>Shipping Address</legend><input placeholder='Full Name'>...</fieldset><fieldset><legend>Payment Details</legend><input placeholder='Card Number'>...</fieldset><button type='submit'>Place Order</button></form>"
"प्रोडक्ट्स को फ़िल्टर करने के लिए एक साइडबार बनाओ","<aside><h3>Filters</h3><div class='filter-group'><h4>Category</h4><input type='checkbox'> Electronics<br><input type='checkbox'> Books</div></aside>"
"एक प्रोडक्ट सर्च बार बनाओ","<input type='search' placeholder='Search for products...'>"
"एक प्रोडक्ट पेज पर इमेज थंबनेल गैलरी बनाओ","<img id='main-product-image' src='img-large-1.jpg' width='300'><div class='thumbnails'><img src='img-thumb-1.jpg' onclick=""document.getElementById('main-product-image').src='img-large-1.jpg'""> <img src='img-thumb-2.jpg' onclick=""document.getElementById('main-product-image').src='img-large-2.jpg'""></div>"
"एक स्टार रेटिंग डिस्प्ले कॉम्पोनेन्ट बनाओ (जैसे 4.5 स्टार्स)","<div class='star-rating' style='color:orange;'><span>★★★★</span><span style='color:grey'>★</span> (4.5)</div>"
"एक 'Sale' (बिक्री) बैज बनाओ","<div style='position:relative; display:inline-block;'><img src='product.jpg' width='150'><span style='position:absolute; top:10px; left:10px; background:red; color:white; padding:5px; border-radius:3px;'>SALE</span></div>"
"एक 'Out of Stock' (स्टॉक में नहीं) लेबल दिखाओ","<button disabled style='background:grey; color:white;'>Out of Stock</button>"
"एक इच्छा-सूची (wishlist) में जोड़ने के लिए एक बटन बनाओ","<button onclick='addToWishlist(123)'>❤️ Add to Wishlist</button>"
"प्रोडक्ट्स को कीमत के आधार पर सॉर्ट करने के लिए एक ड्रॉपडाउन","<label>Sort by:</label><select onchange='sortProductsBy(this.value)'><option value='price_asc'>Price: Low to High</option><option value='price_desc'>Price: High to Low</option></select>"
"एक प्रोडक्ट की तुलना (compare) करने के लिए चेकबॉक्स बनाओ","<label><input type='checkbox' onchange='compareProduct(123, this.checked)'> Compare</label>"
"एक 'Quick View' मोडल (modal) बनाओ","<button onclick=""showQuickViewModal(123)"">Quick View</button>"
"एक 'Related Products' (संबंधित उत्पाद) सेक्शन बनाओ","<section><h2>Related Products</h2><div class='product-grid'>...product cards...</div></section>"
"एक ई-कॉमर्स ब्रेडक्रंब (breadcrumb) नेविगेशन बनाओ","<nav aria-label='breadcrumb'>Home > Electronics > Laptops</nav>"
"एक डिस्काउंट कूपन अप्लाई करने के लिए एक इनपुट फील्ड बनाओ","<input placeholder='Enter Coupon Code'><button>Apply Coupon</button>"
"शिपिंग विकल्पों के लिए रेडियो बटन बनाओ","<div><label><input type='radio' name='shipping_option'> Standard Shipping ($5.00)</label></div><div><label><input type='radio' name='shipping_option'> Express Shipping ($15.00)</label></div>"
"एक प्रोडक्ट ज़ूम इफ़ेक्ट बनाओ जो होवर पर काम करे","<style>.zoom-image-container:hover img{transform:scale(1.2);}</style><div class='zoom-image-container' style='width:200px; overflow:hidden;'><img src='product.jpg' style='transition:transform 0.3s;'></div>"
"एक 'Recently Viewed' (हाल ही में देखे गए) प्रोडक्ट्स का सेक्शन बनाओ","<section><h2>Your Recently Viewed Items</h2><div id='recently-viewed-items-container'></div></section>"
"एक प्रोडक्ट के लिए कस्टमर रिव्यु (review) सेक्शन बनाओ","<div class='customer-reviews'><h3>Customer Reviews (4.5/5)</h3><div class='review'><strong>Amit</strong> - ★★★★☆ - <p>Great product!</p></div></div>"
"एक रिव्यु सबमिट करने के लिए एक फॉर्म बनाओ","<form><label>Your Rating:</label><select><option>1</option><option>2</option>...</select><br><label>Your Review:</label><textarea></textarea><br><button>Submit Review</button></form>"
"एक 'Best Sellers' (सबसे ज़्यादा बिकने वाले) सेक्शन बनाओ","<section><h2>Our Best Sellers</h2>...</section>"
"एक 'New Arrivals' (नए आगमन) सेक्शन बनाओ","<section><h2>New Arrivals</h2>...</section>"
"एक प्रोडक्ट के विभिन्न रंगों (color swatches) को दिखाओ","<div class='color-swatches'><span style='background:red; width:25px; height:25px; display:inline-block; border:1px solid #ccc; cursor:pointer;'></span> <span style='background:blue; ...'></span></div>"
"प्रोडक्ट के विभिन्न साइज़ चुनने के लिए बटन बनाओ","<div class='size-selector'><button>S</button> <button>M</button> <button>L</button> <button>XL</button></div>"
"एक 'Add to Cart' कन्फर्मेशन मैसेज दिखाओ","<div id='add-to-cart-confirmation' style='display:none; color:green;'>Product added to cart successfully!</div>"
"शॉपिंग कार्ट से एक आइटम को हटाने के लिए एक बटन","<li id='cart-item-123'>Laptop <button onclick=""document.getElementById('cart-item-123').remove()"">Remove</button></li>"
"चेकआउट पेज पर आर्डर का सारांश (order summary) दिखाओ","<div class='order-summary'><h3>Order Summary</h3><p>Subtotal: $999.99</p><p>Shipping: $5.00</p><strong>Total: $1004.99</strong></div>"
"एक 'Notify Me' फॉर्म बनाओ जब प्रोडक्ट स्टॉक में न हो","<p>This item is out of stock.</p><form><label>Enter your email to be notified:</label><input type='email'><button>Notify Me</button></form>"
"एक 'Size Chart' (साइज़ चार्ट) लिंक बनाओ जो एक मोडल खोले","<a href='#' onclick=""showSizeChartModal()"">View Size Chart</a>"
"एक 'Gift Wrap' (गिफ्ट रैप) विकल्प के लिए एक चेकबॉक्स","<label><input type='checkbox'> Add gift wrap (+$2.00)</label>"
"एक प्रोडक्ट की डिलीवरी की अनुमानित तारीख दिखाओ","<p style='color:green;'>Estimated delivery: October 15, 2025</p>"
"सोशल मीडिया पर एक प्रोडक्ट को शेयर करने के लिए बटन","<button>Share on Facebook</button> <button>Share on Twitter</button>"
"एक 'Customers who bought this also bought' सेक्शन","<section><h2>Customers also bought</h2>...</section>"
"एक प्रोडक्ट के लिए FAQ (प्रश्न-उत्तर) सेक्शन","<section><h2>Questions & Answers</h2><details><summary>Is this waterproof?</summary><p>No, it is water-resistant.</p></details></section>"
"एक 'Terms and Conditions' चेकबॉक्स जो चेकआउट पर ज़रूरी हो","<label><input type='checkbox' required> I have read and agree to the Terms and Conditions.</label>"
"पेमेंट मेथड (Credit Card, PayPal) चुनने के लिए आइकन","<div><img src='visa_icon.png' alt='Visa'> <img src='mastercard_icon.png' alt='Mastercard'> <img src='paypal_icon.png' alt='PayPal'></div>"
"एक 'Track Order' पेज का UI बनाओ","<form><label>Enter your Order ID:</label><input type='text' placeholder='eg. 12345'><button>Track Order</button></form>"
"एक 'My Account' पेज का डैशबोर्ड UI","<div class='account-dashboard'><h3>My Account</h3><ul><li><a href='/orders'>Order History</a></li><li><a href='/profile'>My Profile</a></li><li><a href='/logout'>Logout</a></li></ul></div>"
"एक 'Order History' टेबल बनाओ","<table border='1'><thead><tr><th>Order ID</th><th>Date</th><th>Total</th><th>Status</th></tr></thead><tbody><tr><td>#123</td><td>2025-10-01</td><td>$50</td><td>Shipped</td></tr></tbody></table>"
"एक 'Write a Review' बटन जो एक फॉर्म खोले","<button>Write a Review for this product</button>"
"एक इनवॉइस (invoice) का HTML टेम्पलेट बनाओ","<div class='invoice-box' style='border:1px solid; padding:20px;'><h1>Invoice</h1>...</div>"
"एक 'Abandoned Cart' ईमेल का कॉन्सेप्ट","// An automated email sent to a user who has added items to their shopping cart but did not complete the purchase, reminding them of their items."
"अपसेल (Upsell) और क्रॉस-सेल (Cross-sell) का कॉन्सेप्ट","// Upsell: Encouraging a customer to buy a more expensive, upgraded version of a product. Cross-sell: Encouraging a customer to buy related or complementary items."
"पेज लोड होने पर सभी ब्लॉग पोस्ट्स को फेच करो और दिखाओ","""<div id='posts-container'></div>\n<script>\nwindow.addEventListener('DOMContentLoaded', () => {\n  fetch('/api/posts').then(res => res.json()).then(posts => {\n    const container = document.getElementById('posts-container');\n    posts.forEach(post => {\n      container.innerHTML += `<h2><a href='#' onclick='fetchPost(${post.id})'>${post.title}</a></h2>`;\n    });\n  });\n});\n</script>"""
"एक लिंक पर क्लिक करके एक सिंगल पोस्ट का कंटेंट फेच करो और दिखाओ","""<div id='single-post-view'></div>\n<script>\nfunction fetchPost(id) {\n  fetch(`/api/posts/${id}`).then(res => res.json()).then(post => {\n    document.getElementById('single-post-view').innerHTML = `<h1>${post.title}</h1><p>${post.content}</p>`;\n  });\n}\n</script>"""
"एक नया ब्लॉग पोस्ट बनाने के लिए एक HTML फॉर्म बनाओ","""<form id='new-post-form'>\n  <input id='title-input' placeholder='Title' required>\n  <br><br>\n  <textarea id='content-input' placeholder='Content' required></textarea>\n  <br><br>\n  <button type='submit'>Create Post</button>\n</form>"""
"AJAX का उपयोग करके नया पोस्ट बनाने वाले फॉर्म को सबमिट करो","""<script>\ndocument.getElementById('new-post-form').addEventListener('submit', event => {\n  event.preventDefault();\n  const title = document.getElementById('title-input').value;\n  const content = document.getElementById('content-input').value;\n  fetch('/api/posts', {\n    method: 'POST',\n    headers: {'Content-Type': 'application/json'},\n    body: JSON.stringify({title: title, content: content})\n  }).then(res => res.json()).then(data => console.log('New post created with ID:', data.id));\n});\n</script>"""
"एक पोस्ट को डिलीट करने के लिए एक बटन बनाओ","""<button onclick=""deletePost(5)"">Delete Post 5</button>\n<script>\nfunction deletePost(id) {\n  if(confirm('Are you sure you want to delete this post?')){\n    fetch(`/api/posts/${id}`, { method: 'DELETE' }).then(() => alert('Post deleted'));\n  }\n}\n</script>"""
"एक पोस्ट को एडिट करने के लिए एक फॉर्म दिखाओ","""<button onclick=""showEditForm(5)"">Edit Post 5</button>\n<div id='edit-form-container'></div>\n<script>\nfunction showEditForm(id) {\n    // fetch post data and populate an edit form in the container\n}\n</script>"""
"जावास्क्रिप्ट से एक डायनामिक सर्च फंक्शन बनाओ","""<input placeholder='Search blog posts...' onkeyup=""fetch('/api/search?q='+this.value).then(res => res.json()).then(results => {\n  // ... code to display search results on the page ...\n});"">"""
"पेजिनेशन बटन्स (Next/Previous) के लिए जावास्क्रिप्ट लिखो","""let currentPage = 1;\nfunction loadPostsForPage(page) {\n  fetch(`/api/posts-paginated?page=${page}`).then(res => res.json()).then(data => {\n    // ... display posts for the given page ...\n    currentPage = page;\n  });\n}"""
"एक 'Load More' बटन बनाओ जो और पोस्ट्स लोड करे","""<button id='load-more-btn' onclick=""loadPostsForPage(currentPage + 1)"">Load More</button>"""
"एक पोस्ट पर कमेंट करने के लिए एक फॉर्म बनाओ","""<form onsubmit=""addCommentToPost(5, this.comment.value); return false;"">\n  <input name='comment' placeholder='Write a comment...'>\n  <button type='submit'>Submit Comment</button>\n</form>"""
"एक पोस्ट के सभी कमेंट्स को फेच करो और दिखाओ","""<ul id='comments-list-for-post-5'></ul>\n<script>\nfetch('/api/posts/5/comments').then(res => res.json()).then(comments => {\n  const list = document.getElementById('comments-list-for-post-5');\n  comments.forEach(comment => { list.innerHTML += `<li>${comment.text}</li>`; });\n});\n</script>"""
"एक 'Like' बटन बनाओ जो API को कॉल करे और लाइक काउंट अपडेट करे","""<p>Likes: <span id='like-count-for-post-5'>10</span></p>\n<button onclick=""fetch('/api/posts/5/like', {method:'POST'}).then(res=>res.json()).then(data=>document.getElementById('like-count-for-post-5').innerText=data.likes);"">👍 Like</button>"""
"यूज़र रजिस्ट्रेशन के लिए एक AJAX फॉर्म बनाओ","""<form id='registration-form'>...</form>\n<script>// JavaScript to submit registration form data as a JSON object via a fetch POST request</script>"""
"यूज़र लॉगइन के लिए एक AJAX फॉर्म बनाओ और JWT टोकन को localStorage में सेव करो","""<script>\n// ... inside form submit event listener ...\nfetch('/api/login', ...).then(res => res.json()).then(data => {\n  if (data.token) {\n    localStorage.setItem('jwt_token', data.token);\n    window.location.href = '/dashboard'; // redirect to dashboard\n  }\n});\n</script>"""
"हर प्रोटेक्टेड API रिक्वेस्ट के साथ JWT टोकन भेजो","""<script>\nconst token = localStorage.getItem('jwt_token');\nfetch('/api/protected-route', { \n    headers: {\n        'Authorization': `Bearer ${token}`\n    }\n});\n</script>"""
"एक लॉगआउट बटन बनाओ जो JWT टोकन को localStorage से हटाए","""<button onclick=""localStorage.removeItem('jwt_token'); window.location.href = '/login';"">Logout</button>"""
"Markdown कंटेंट को HTML में बदलने के लिए एक लाइब्रेरी (जैसे Showdown.js) का उपयोग करो","""<script src='https://cdnjs.cloudflare.com/ajax/libs/showdown/2.1.0/showdown.min.js'></script>\n<script>\n  const converter = new showdown.Converter();\n  const markdownText = '# Hello\\n**This is bold.**';\n  const html = converter.makeHtml(markdownText);\n</script>"""
"API से मिले Markdown कंटेंट को पेज पर रेंडर करो","""fetch('/api/posts/1').then(res => res.json()).then(post => {\n  const converter = new showdown.Converter();\n  const htmlContent = converter.makeHtml(post.content);\n  document.getElementById('post-content-div').innerHTML = htmlContent;\n});"""
"तारीख को एक रीडेबल फॉर्मेट में दिखाने के लिए एक जावास्क्रिप्ट फंक्शन","""function formatReadableDate(isoString) {\n  return new Date(isoString).toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' });\n}"""
"एक लोडिंग स्पिनर दिखाओ जब API कॉल चल रही हो","""function fetchDataWithLoader(){\n  document.getElementById('loader-spinner').style.display = 'block';\n  fetch('...').finally(() => {\n    document.getElementById('loader-spinner').style.display = 'none';\n  });\n}"""
"API से एरर आने पर यूज़र को एक एरर मैसेज दिखाओ","""<p id='error-display-area' style='color:red;'></p>\n<script>\nfetch('/api/invalid-endpoint').catch(error => {\n  document.getElementById('error-display-area').innerText = 'An error occurred while loading data.';\n});\n</script>"""
"एक 'Single Page Application' (SPA) का बेसिक राउटर बनाओ","""<script>\nwindow.onhashchange = function() {\n  const page = window.location.hash.substring(1);\n  // Logic to show content based on the 'page' variable (e.g., #/about, #/contact)\n}\n</script>"""
"वेबसाइट में एक सिंपल डार्क मोड टॉगल बनाओ","""<button onclick=""document.body.classList.toggle('dark-mode')"">Toggle Dark Mode</button>\n<style>.dark-mode { background: #333; color: white; }</style>"""
"एक ब्लॉग पोस्ट के लिए 'टैग्स' की लिस्ट दिखाओ","""// Assuming API returns post.tags = [{name:'tech'}, {name:'python'}]\nconst tagsHtml = post.tags.map(tag => `<span class='tag'>${tag.name}</span>`).join(' ');"""
"एक ब्लॉग पोस्ट के लेखक का नाम दिखाओ","""// Assuming API returns post.author = {username: 'Amit'}\ndocument.getElementById('author-name').innerText = `By ${post.author.username}`;"""
"एक नया पोस्ट बनाने के बाद पेज को री-रेंडर करो (बिना रीलोड किए)","""fetch('/api/posts', {method:'POST',...}).then(() => {\n  // Clear the form and call the function that fetches and renders all posts again\n  fetchAllPosts();\n});"""
"URL से पोस्ट ID निकालो और उस पोस्ट को फेच करो","""<script>\nconst pathParts = window.location.pathname.split('/');\nconst postId = pathParts[pathParts.length - 1];\nif(postId && !isNaN(postId)) {\n  fetchPost(postId);\n}\n</script>"""
"WebSocket का उपयोग करके रियल-टाइम कमेंट्स दिखाओ","""<script>\nconst socket = io(); // from socket.io.js\nsocket.on('new_comment_for_post_5', function(comment) {\n  // Add the new comment to the comments list dynamically without reloading the page\n});\n</script>"""
"WebSocket से कनेक्ट करने के लिए जावास्क्रिप्ट कोड","""<script src='https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.0.1/socket.io.js'></script>\n<script>var socket = io.connect('http://' + document.domain + ':' + location.port);</script>"""
"यूज़र को एक पोस्ट एडिट करने के लिए एक इन-प्लेस एडिटर दो (`contenteditable`)","""<div id='content-div' ondblclick=""this.contentEditable=true; this.focus();"">Double click to edit this text.</div>"""
"फ्रंटएंड पर फॉर्म वैलिडेशन (ईमेल) करो","""<form onsubmit=""const email = this.email.value; if(!email.includes('@') || !email.includes('.')){alert('Please enter a valid email address'); return false;}""><input name='email' type='email'></form>"""
"API से मिले पेजिनेशन डेटा को हैंडल करो और बटन को डिसेबल करो","""// API returns { 'posts': [...], 'has_next': true, 'next_page': 3 }\nif (!data.has_next) {\n  document.getElementById('load-more-button').disabled = true;\n}"""
"एक इमेज अपलोड फॉर्म बनाओ जो `FormData` का उपयोग करे","""<input type='file' id='image-file-input'>\n<script>\nfunction uploadImage(){\n  const fileInput = document.getElementById('image-file-input');\n  if (fileInput.files.length > 0) {\n      const formData = new FormData();\n      formData.append('image', fileInput.files[0]);\n      fetch('/api/upload', {method:'POST', body:formData});\n  }\n}\n</script>"""
"एक 'infinite scroll' फीचर बनाओ","""<script>\nconst contentEl = document.getElementById('content');\nwindow.addEventListener('scroll', () => {\n  const { scrollTop, scrollHeight, clientHeight } = document.documentElement;\n  if (scrollTop + clientHeight >= scrollHeight - 5) {\n    // Load more posts when user is near the bottom\n  }\n});\n</script>"""
"एक 'debounce' फंक्शन का उपयोग करके सर्च API कॉल्स को ऑप्टिमाइज़ करो","""<script>\nfunction debounce(func, delay=300) {\n  let timeout;\n  return function(...args) {\n    clearTimeout(timeout);\n    timeout = setTimeout(() => { func.apply(this, args); }, delay);\n  };\n}\nconst efficientSearch = debounce(searchTerm => fetch('/api/search?q='+searchTerm));\n</script>"""
"एक 'throttle' फंक्शन का उपयोग करके स्क्रॉल इवेंट्स को ऑप्टिमाइज़ करो","""<script>\nfunction throttle(func, limit) { \n  let inThrottle;\n  return function() {\n    if (!inThrottle) {\n      func.apply(this, arguments);\n      inThrottle = true;\n      setTimeout(() => inThrottle = false, limit);\n    }\n  }\n}\nwindow.addEventListener('scroll', throttle(() => console.log('Scrolled!'), 100));\n</script>"""
"एक ब्राउज़र नोटिफिकेशन (Notification API) भेजो","""<button onclick=""Notification.requestPermission().then(permission => { if (permission === 'granted') { new Notification('New Blog Post Available!'); } });"">Enable Notifications</button>"""
"एक पोस्ट को शेयर करने के लिए Web Share API का उपयोग करो","""<button onclick=""if(navigator.share){navigator.share({title: 'My Awesome Blog Post', url: '/posts/1'})} else {alert('Share not supported')}"">Share Post</button>"""
"फ्रंटएंड पर एक JSON ऑब्जेक्ट को सुंदर तरीके से दिखाओ","""<pre id='json-display-output'></pre>\n<script>\nconst myJsonObject = { id: 1, name: 'Amit', is_active: true };\ndocument.getElementById('json-display-output').textContent = JSON.stringify(myJsonObject, null, 2);\n</script>"""
"एक पोस्ट को localStorage का उपयोग करके 'बुकमार्क' करो","""<button onclick=""localStorage.setItem('bookmarked_post_1', 'true')"">Bookmark Post 1</button>"""
"एक लोडिंग स्केलेटन (skeleton) स्क्रीन का HTML/CSS बनाओ","""<style>@keyframes pulse{...} .skeleton-box{animation: pulse 1.5s infinite; background:#e0e0e0;}</style><div class='post-skeleton'><div class='skeleton-box' style='height:150px;'></div><div class='skeleton-box' style='height:20px; margin-top:10px;'></div></div>"""
"एक पोस्ट के 'पढ़ने का समय' (reading time) कैलकुलेट करो","""<script>\nfunction calculateReadingTime(text) {\n  const wordsPerMinute = 225;\n  const wordCount = text.trim().split(/\s+/).length;\n  const readingTime = Math.ceil(wordCount / wordsPerMinute);\n  return `${readingTime} min read`;\n}\n</script>"""
"एक ब्लॉग पोस्ट के लिए एक 'Table of Contents' डायनामिक रूप से जेनरेट करो","""<nav><h4>Contents</h4><ul id='table-of-contents'></ul></nav>\n<script>\ndocument.querySelectorAll('main h2').forEach(heading => {\n  const id = heading.textContent.toLowerCase().replace(/ /g, '-');\n  heading.id = id;\n  document.getElementById('table-of-contents').innerHTML += `<li><a href='#${id}'>${heading.textContent}</a></li>`;\n});\n</script>"""
"यूज़र से एक कन्फर्मेशन डायलॉग (dialog) दिखाओ","""<button onclick=""if(confirm('Are you absolutely sure you want to delete this?')){ console.log('Deleting...'); }"">Delete Item</button>"""
"Fetch API में `AbortController` का उपयोग करके एक रिक्वेस्ट को कैंसिल करो","""<script>\nconst controller = new AbortController();\nconst signal = controller.signal;\nfetch('...', {signal});\n\n// To cancel the request, for example after a timeout:\n// controller.abort();\n</script>"""
"एक नया पोस्ट बनाने के बाद यूज़र को उस पोस्ट के पेज पर रीडायरेक्ट करो","""fetch('/api/posts', {method:'POST',...}).then(res => res.json()).then(data => {\n  // Redirect to the new post's page\n  window.location.href = `/posts/${data.id}`;\n});"""
"एक API कॉल के लिए एक टाइमआउट सेट करो","""<script>\nconst controller = new AbortController();\nconst timeoutId = setTimeout(() => controller.abort(), 5000); // 5 second timeout\n\nfetch('/api/slow-endpoint', {signal: controller.signal})\n  .catch(error => { if (error.name === 'AbortError') console.error('Request timed out!'); })\n  .finally(() => clearTimeout(timeoutId));\n</script>"""
"एक सिंपल WYSIWYG एडिटर का ढाँचा (Bold, Italic)","""<div id='editor' contenteditable='true' style='border:1px solid #ccc; height:150px; padding:5px;'>Type your text here...</div>\n<button onclick=""document.execCommand('bold')""><b>B</b></button>\n<button onclick=""document.execCommand('italic')""><i>I</i></button>"""
"एक ब्लॉग के लिए User और Post डेटाबेस मॉडल बनाओ","""# In models.py\nfrom flask_sqlalchemy import SQLAlchemy\ndb = SQLAlchemy()\n\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    username = db.Column(db.String(80), unique=True, nullable=False)\n\nclass Post(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    title = db.Column(db.String(120), nullable=False)\n    content = db.Column(db.Text, nullable=False)\n    author_id = db.Column(db.Integer, db.ForeignKey('user.id'))"""
"Flask ऐप को SQLAlchemy डेटाबेस के साथ कॉन्फ़िगर करो","""# In app.py\nfrom flask import Flask\nfrom models import db\n\napp = Flask(__name__)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///blog.db'\ndb.init_app(app)"""
"सभी ब्लॉग पोस्ट्स को लौटाने वाला एक API एंडपॉइंट बनाओ","""@app.route('/api/posts', methods=['GET'])\ndef get_all_posts():\n    posts = Post.query.all()\n    return jsonify([{'id': p.id, 'title': p.title} for p in posts])"""
"एक सिंगल ब्लॉग पोस्ट को ID से लौटाने वाला API बनाओ","""@app.route('/api/posts/<int:post_id>', methods=['GET'])\ndef get_post(post_id):\n    post = Post.query.get_or_404(post_id)\n    return jsonify({'title': post.title, 'content': post.content})"""
"एक नया ब्लॉग पोस्ट बनाने के लिए एक API एंडपॉइंट बनाओ","""@app.route('/api/posts', methods=['POST'])\ndef create_post():\n    data = request.json\n    new_post = Post(title=data['title'], content=data['content'])\n    db.session.add(new_post)\n    db.session.commit()\n    return jsonify({'id': new_post.id}), 201"""
"एक ब्लॉग पोस्ट को अपडेट करने के लिए एक API एंडपॉइंट बनाओ","""@app.route('/api/posts/<int:post_id>', methods=['PUT'])\ndef update_post(post_id):\n    post = Post.query.get_or_404(post_id)\n    data = request.json\n    post.title = data.get('title', post.title)\n    post.content = data.get('content', post.content)\n    db.session.commit()\n    return jsonify({'message': 'Post updated'})"""
"एक ब्लॉग पोस्ट को डिलीट करने के लिए एक API एंडपॉइंट बनाओ","""@app.route('/api/posts/<int:post_id>', methods=['DELETE'])\ndef delete_post(post_id):\n    post = Post.query.get_or_404(post_id)\n    db.session.delete(post)\n    db.session.commit()\n    return jsonify({'message': 'Post deleted'})"""
"Flask-Migrate का उपयोग करके डेटाबेस माइग्रेशन सेटअप करो","""from flask_migrate import Migrate\nmigrate = Migrate(app, db)"""
"Alembic माइग्रेशन स्क्रिप्ट बनाओ","flask db migrate -m 'Initial migration.'"
"Alembic माइग्रेशन को डेटाबेस पर अप्लाई करो","flask db upgrade"
"एक Flask कमांड बनाओ जो डेटाबेस को इनिशियलाइज़ करे","""@app.cli.command('init-db')\ndef init_db_command():\n    db.create_all()\n    print('Initialized the database.')"""
"ब्लॉग के लिए एक 'Comment' मॉडल बनाओ","""class Comment(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    text = db.Column(db.String(200), nullable=False)\n    post_id = db.Column(db.Integer, db.ForeignKey('post.id'))"""
"एक पोस्ट के सभी कमेंट्स को लौटाने वाला API बनाओ","""@app.route('/api/posts/<int:post_id>/comments')\ndef get_comments(post_id):\n    comments = Comment.query.filter_by(post_id=post_id).all()\n    return jsonify([{'text': c.text} for c in comments])"""
"एक पोस्ट पर नया कमेंट करने के लिए API बनाओ","""@app.route('/api/posts/<int:post_id>/comments', methods=['POST'])\ndef add_comment(post_id):\n    new_comment = Comment(text=request.json['text'], post_id=post_id)\n    db.session.add(new_comment)\n    db.session.commit()\n    return jsonify({'id': new_comment.id})"""
"ब्लॉग पोस्ट मॉडल में एक 'created_at' फील्ड जोड़ो","""created_at = db.Column(db.DateTime, default=datetime.utcnow)"""
"पोस्ट्स को लेटेस्ट पहले के क्रम में क्वेरी करो","""posts = Post.query.order_by(Post.created_at.desc()).all()"""
"एक API बनाओ जो पोस्ट्स को पेजिनेट (paginate) करे","""@app.route('/api/posts-paginated')\ndef get_paginated_posts():\n    page = request.args.get('page', 1, type=int)\n    pagination = Post.query.paginate(page=page, per_page=5)\n    return jsonify([...]) # Return paginated data"""
"एक यूज़र रजिस्ट्रेशन के लिए API एंडपॉइंट","""@app.route('/api/register', methods=['POST'])\ndef register():\n    # ... create user and hash password ...\n    return jsonify({'message': 'User created'})"""
"एक यूज़र लॉगइन के लिए API एंडपॉइंट जो JWT टोकन लौटाए","""@app.route('/api/login', methods=['POST'])\ndef login():\n    # ... check credentials ...\n    # token = create_jwt_token(...)\n    return jsonify({'token': token})"""
"एक प्रोटेक्टेड API रूट बनाओ जो JWT टोकन की जाँच करे","""@app.route('/api/protected')\n@jwt_required()\ndef protected():\n    return jsonify({'message': 'This is a protected route'})"""
"ब्लॉग के लिए एक 'Tag' मॉडल बनाओ (Many-to-Many)","""tags = db.Table('tags', ...)\nclass Post(db.Model):\n    tags = db.relationship('Tag', secondary=tags, backref='posts')"""
"एक पोस्ट को उसके टैग्स के साथ लौटाने वाला API","""@app.route('/api/posts/<int:id>')\ndef get_post_with_tags(id):\n    post = Post.query.get(id)\n    return jsonify({'title': post.title, 'tags': [tag.name for tag in post.tags]})"""
"एक सर्च API बनाओ जो टाइटल और कंटेंट में खोजे","""@app.route('/api/search')\ndef search():\n    query = request.args.get('q')\n    results = Post.query.filter(Post.title.contains(query) | Post.content.contains(query)).all()\n    return jsonify([...])"""
"Flask-CORS کا उपयोग करके API पर CORS इनेबल करो","""from flask_cors import CORS\nCORS(app, resources={r'/api/*': {'origins': '*'}})"""
"Flask-SQLAlchemy में रिलेशनशिप के लिए `back_populates` का उपयोग करो","""class User(db.Model):\n    posts = db.relationship('Post', back_populates='author')\n\nclass Post(db.Model):\n    author = db.relationship('User', back_populates='posts')"""
"एक ब्लॉग पोस्ट पर 'लाइक' करने के लिए API","""@app.route('/api/posts/<int:id>/like', methods=['POST'])\ndef like_post(id):\n    post = Post.query.get(id)\n    post.likes += 1\n    db.session.commit()\n    return jsonify({'likes': post.likes})"""
"ब्लॉग पोस्ट मॉडल में `likes` कॉलम जोड़ो","""likes = db.Column(db.Integer, default=0)"""
"ब्लॉग पोस्ट्स को लाइक्स की संख्या के आधार पर सॉर्ट करो","""popular_posts = Post.query.order_by(Post.likes.desc()).limit(5).all()"""
"Flask में यूनिट टेस्ट के लिए एक टेस्ट डेटाबेस कॉन्फ़िगर करो","""app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///:memory:'"""
"एक API एंडपॉइंट का pytest से टेस्ट लिखो","""def test_get_posts(client):\n    response = client.get('/api/posts')\n    assert response.status_code == 200"""
"ब्लूप्रिंट का उपयोग करके एडमिन सेक्शन बनाओ","""admin_bp = Blueprint('admin', __name__, url_prefix='/admin')"""
"एक API बनाओ जो YAML डेटा लौटाए","""import yaml\n@app.route('/api/data.yaml')\ndef get_yaml():\n    data = {'a': 1}\n    return Response(yaml.dump(data), mimetype='text/yaml')"""
"Flask में एक कस्टम CLI कमांड बनाओ","""@app.cli.command('create-user')\n@click.argument('name')\ndef create_user(name):\n    # ... logic to create user ..."""
"SQLAlchemy में eager लोडिंग का उपयोग करो","""posts = Post.query.options(db.joinedload(Post.author)).all()"""
"SQLAlchemy में lazy लोडिंग का उपयोग करो","""# This is the default behavior\npost = Post.query.get(1)\n# The author is fetched from the DB only when you access it:\nprint(post.author.name)"""
"एक API बनाओ जो एक फाइल डाउनलोड करवाए","""from flask import send_file\n@app.route('/download')\ndef download_file():\n    return send_file('my_file.zip', as_attachment=True)"""
"अपने Flask ऐप के लिए एक `config.py` फाइल बनाओ","""# config.py\nclass Config:\n    SECRET_KEY = os.environ.get('SECRET_KEY')\n    SQLALCHEMY_DATABASE_URI = os.environ.get('DATABASE_URI')"""
"फैक्ट्री पैटर्न का उपयोग करके Flask ऐप बनाओ","""def create_app(config_class=Config):\n    app = Flask(__name__)\n    app.config.from_object(config_class)\n    db.init_app(app)\n    return app"""
"ब्लॉग पोस्ट में Markdown कंटेंट को सपोर्ट करो","""import markdown\n@app.route('/posts/<int:id>')\ndef show_post(id):\n    post = Post.query.get(id)\n    post.content_html = markdown.markdown(post.content)\n    return render_template('post.html', post=post)"""
"एक API बनाओ जो इमेज अपलोड को हैंडल करे","""@app.route('/api/upload', methods=['POST'])\ndef upload_image():\n    file = request.files['image']\n    # ... save file securely ...\n    return jsonify({'url': file_url})"""
"ब्लॉग पोस्ट मॉडल में एक 'status' फील्ड (draft, published) जोड़ो","""status = db.Column(db.String(10), default='draft', nullable=False)"""
"सिर्फ पब्लिश हुए पोस्ट्स को दिखाने वाला एक API बनाओ","""@app.route('/api/published-posts')\ndef get_published_posts():\n    posts = Post.query.filter_by(status='published').all()\n    return jsonify([...])"""
"SQLAlchemy में एक हाइब्रिड प्रॉपर्टी बनाओ","""from sqlalchemy.ext.hybrid import hybrid_property\nclass User(db.Model):\n    # ... first_name, last_name columns ...\n    @hybrid_property\n    def full_name(self):\n        return self.first_name + ' ' + self.last_name"""
"API रिस्पॉन्स के लिए एक कस्टम JSON एन्कोडर बनाओ","""import json\nfrom datetime import date\nclass CustomJSONEncoder(json.JSONEncoder):\n    def default(self, obj):\n        if isinstance(obj, date):\n            return obj.isoformat()\n        return super().default(obj)"""
"Flask में एक WebSocket का उपयोग करके रियल-टाइम नोटिफिकेशन भेजो","""# Using Flask-SocketIO\n@socketio.on('new_post_created')\ndef handle_new_post_notification(data):\n    emit('notification', {'message': 'A new post was created!'}, broadcast=True)"""
"पाइथन में UUID का उपयोग करके एक यूनिक आईडी जेनरेट करो","""import uuid\npublic_id = str(uuid.uuid4())"""
"ब्लॉग पोस्ट मॉडल में एक स्लग (slug) फील्ड जोड़ो","""slug = db.Column(db.String(120), unique=True, nullable=False, index=True)"""
"एक फंक्शन बनाओ जो टाइटल से एक स्लग जेनरेट करे","""import re\ndef slugify(text):\n    text = text.lower().strip()\n    text = re.sub(r'[^\\w\\s-]', '', text)\n    text = re.sub(r'[\\s_-]+', '-', text)\n    return text"""
"एक API बनाओ जो XML डेटा लौटाए (Jinja2 टेम्पलेट का उपयोग करके)","""@app.route('/feed.xml')\ndef get_xml_feed():\n    # ... get posts from db ...\n    return Response(render_template('feed.xml', posts=posts), mimetype='application/xml')"""
"एक ब्लॉग के लिए User और Post डेटाबेस मॉडल बनाओ","""# In models.py\nfrom flask_sqlalchemy import SQLAlchemy\ndb = SQLAlchemy()\n\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    username = db.Column(db.String(80), unique=True, nullable=False)\n\nclass Post(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    title = db.Column(db.String(120), nullable=False)\n    content = db.Column(db.Text, nullable=False)\n    author_id = db.Column(db.Integer, db.ForeignKey('user.id'))"""
"Flask ऐप को SQLAlchemy डेटाबेस के साथ कॉन्फ़िगर करो","""# In app.py\nfrom flask import Flask\nfrom models import db\n\napp = Flask(__name__)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///blog.db'\ndb.init_app(app)"""
"सभी ब्लॉग पोस्ट्स को लौटाने वाला एक API एंडपॉइंट बनाओ","""@app.route('/api/posts', methods=['GET'])\ndef get_all_posts():\n    posts = Post.query.all()\n    return jsonify([{'id': p.id, 'title': p.title} for p in posts])"""
"एक सिंगल ब्लॉग पोस्ट को ID से लौटाने वाला API बनाओ","""@app.route('/api/posts/<int:post_id>', methods=['GET'])\ndef get_post(post_id):\n    post = Post.query.get_or_404(post_id)\n    return jsonify({'title': post.title, 'content': post.content})"""
"एक नया ब्लॉग पोस्ट बनाने के लिए एक API एंडपॉइंट बनाओ","""@app.route('/api/posts', methods=['POST'])\ndef create_post():\n    data = request.json\n    new_post = Post(title=data['title'], content=data['content'])\n    db.session.add(new_post)\n    db.session.commit()\n    return jsonify({'id': new_post.id}), 201"""
"एक ब्लॉग पोस्ट को अपडेट करने के लिए एक API एंडपॉइंट बनाओ","""@app.route('/api/posts/<int:post_id>', methods=['PUT'])\ndef update_post(post_id):\n    post = Post.query.get_or_404(post_id)\n    data = request.json\n    post.title = data.get('title', post.title)\n    post.content = data.get('content', post.content)\n    db.session.commit()\n    return jsonify({'message': 'Post updated'})"""
"एक ब्लॉग पोस्ट को डिलीट करने के लिए एक API एंडपॉइंट बनाओ","""@app.route('/api/posts/<int:post_id>', methods=['DELETE'])\ndef delete_post(post_id):\n    post = Post.query.get_or_404(post_id)\n    db.session.delete(post)\n    db.session.commit()\n    return jsonify({'message': 'Post deleted'})"""
"Flask-Migrate का उपयोग करके डेटाबेस माइग्रेशन सेटअप करो","""from flask_migrate import Migrate\nmigrate = Migrate(app, db)"""
"Alembic माइग्रेशन स्क्रिप्ट बनाओ","flask db migrate -m 'Initial migration.'"
"Alembic माइग्रेशन को डेटाबेस पर अप्लाई करो","flask db upgrade"
"एक Flask कमांड बनाओ जो डेटाबेस को इनिशियलाइज़ करे","""@app.cli.command('init-db')\ndef init_db_command():\n    db.create_all()\n    print('Initialized the database.')"""
"ब्लॉग के लिए एक 'Comment' मॉडल बनाओ","""class Comment(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    text = db.Column(db.String(200), nullable=False)\n    post_id = db.Column(db.Integer, db.ForeignKey('post.id'))"""
"एक पोस्ट के सभी कमेंट्स को लौटाने वाला API बनाओ","""@app.route('/api/posts/<int:post_id>/comments')\ndef get_comments(post_id):\n    comments = Comment.query.filter_by(post_id=post_id).all()\n    return jsonify([{'text': c.text} for c in comments])"""
"एक पोस्ट पर नया कमेंट करने के लिए API बनाओ","""@app.route('/api/posts/<int:post_id>/comments', methods=['POST'])\ndef add_comment(post_id):\n    new_comment = Comment(text=request.json['text'], post_id=post_id)\n    db.session.add(new_comment)\n    db.session.commit()\n    return jsonify({'id': new_comment.id})"""
"ब्लॉग पोस्ट मॉडल में एक 'created_at' फील्ड जोड़ो","""created_at = db.Column(db.DateTime, default=datetime.utcnow)"""
"पोस्ट्स को लेटेस्ट पहले के क्रम में क्वेरी करो","""posts = Post.query.order_by(Post.created_at.desc()).all()"""
"एक API बनाओ जो पोस्ट्स को पेजिनेट (paginate) करे","""@app.route('/api/posts-paginated')\ndef get_paginated_posts():\n    page = request.args.get('page', 1, type=int)\n    pagination = Post.query.paginate(page=page, per_page=5)\n    return jsonify([...]) # Return paginated data"""
"एक यूज़र रजिस्ट्रेशन के लिए API एंडपॉइंट","""@app.route('/api/register', methods=['POST'])\ndef register():\n    # ... create user and hash password ...\n    return jsonify({'message': 'User created'})"""
"एक यूज़र लॉगइन के लिए API एंडपॉइंट जो JWT टोकन लौटाए","""@app.route('/api/login', methods=['POST'])\ndef login():\n    # ... check credentials ...\n    # token = create_jwt_token(...)\n    return jsonify({'token': token})"""
"एक प्रोटेक्टेड API रूट बनाओ जो JWT टोकन की जाँच करे","""@app.route('/api/protected')\n@jwt_required()\ndef protected():\n    return jsonify({'message': 'This is a protected route'})"""
"ब्लॉग के लिए एक 'Tag' मॉडल बनाओ (Many-to-Many)","""tags = db.Table('tags', ...)\nclass Post(db.Model):\n    tags = db.relationship('Tag', secondary=tags, backref='posts')"""
"एक पोस्ट को उसके टैग्स के साथ लौटाने वाला API","""@app.route('/api/posts/<int:id>')\ndef get_post_with_tags(id):\n    post = Post.query.get(id)\n    return jsonify({'title': post.title, 'tags': [tag.name for tag in post.tags]})"""
"एक सर्च API बनाओ जो टाइटल और कंटेंट में खोजे","""@app.route('/api/search')\ndef search():\n    query = request.args.get('q')\n    results = Post.query.filter(Post.title.contains(query) | Post.content.contains(query)).all()\n    return jsonify([...])"""
"Flask-CORS का उपयोग करके API पर CORS इनेबल करो","""from flask_cors import CORS\nCORS(app, resources={r'/api/*': {'origins': '*'}})"""
"Flask-SQLAlchemy में रिलेशनशिप के लिए `back_populates` का उपयोग करो","""class User(db.Model):\n    posts = db.relationship('Post', back_populates='author')\n\nclass Post(db.Model):\n    author = db.relationship('User', back_populates='posts')"""
"एक ब्लॉग पोस्ट पर 'लाइक' करने के लिए API","""@app.route('/api/posts/<int:id>/like', methods=['POST'])\ndef like_post(id):\n    post = Post.query.get(id)\n    post.likes += 1\n    db.session.commit()\n    return jsonify({'likes': post.likes})"""
"ब्लॉग पोस्ट मॉडल में `likes` कॉलम जोड़ो","""likes = db.Column(db.Integer, default=0)"""
"ब्लॉग पोस्ट्स को लाइक्स की संख्या के आधार पर सॉर्ट करो","""popular_posts = Post.query.order_by(Post.likes.desc()).limit(5).all()"""
"Flask में यूनिट टेस्ट के लिए एक टेस्ट डेटाबेस कॉन्फ़िगर करो","""app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///:memory:'"""
"एक API एंडपॉइंट का pytest से टेस्ट लिखो","""def test_get_posts(client):\n    response = client.get('/api/posts')\n    assert response.status_code == 200"""
"ब्लूप्रिंट का उपयोग करके एडमिन सेक्शन बनाओ","""admin_bp = Blueprint('admin', __name__, url_prefix='/admin')"""
"एक API बनाओ जो YAML डेटा लौटाए","""import yaml\n@app.route('/api/data.yaml')\ndef get_yaml():\n    data = {'a': 1}\n    return Response(yaml.dump(data), mimetype='text/yaml')"""
"Flask में एक कस्टम CLI कमांड बनाओ","""@app.cli.command('create-user')\n@click.argument('name')\ndef create_user(name):\n    # ... logic to create user ..."""
"SQLAlchemy में eager लोडिंग का उपयोग करो","""posts = Post.query.options(db.joinedload(Post.author)).all()"""
"SQLAlchemy में lazy लोडिंग का उपयोग करो","""# This is the default behavior\npost = Post.query.get(1)\n# The author is fetched from the DB only when you access it:\nprint(post.author.name)"""
"एक API बनाओ जो एक फाइल डाउनलोड करवाए","""from flask import send_file\n@app.route('/download')\ndef download_file():\n    return send_file('my_file.zip', as_attachment=True)"""
"अपने Flask ऐप के लिए एक `config.py` फाइल बनाओ","""# config.py\nclass Config:\n    SECRET_KEY = os.environ.get('SECRET_KEY')\n    SQLALCHEMY_DATABASE_URI = os.environ.get('DATABASE_URI')"""
"फैक्ट्री पैटर्न का उपयोग करके Flask ऐप बनाओ","""def create_app(config_class=Config):\n    app = Flask(__name__)\n    app.config.from_object(config_class)\n    db.init_app(app)\n    return app"""
"ब्लॉग पोस्ट में Markdown कंटेंट को सपोर्ट करो","""import markdown\n@app.route('/posts/<int:id>')\ndef show_post(id):\n    post = Post.query.get(id)\n    post.content_html = markdown.markdown(post.content)\n    return render_template('post.html', post=post)"""
"एक API बनाओ जो इमेज अपलोड को हैंडल करे","""@app.route('/api/upload', methods=['POST'])\ndef upload_image():\n    file = request.files['image']\n    # ... save file securely ...\n    return jsonify({'url': file_url})"""
"ब्लॉग पोस्ट मॉडल में एक 'status' फील्ड (draft, published) जोड़ो","""status = db.Column(db.String(10), default='draft', nullable=False)"""
"सिर्फ पब्लिश हुए पोस्ट्स को दिखाने वाला एक API बनाओ","""@app.route('/api/published-posts')\ndef get_published_posts():\n    posts = Post.query.filter_by(status='published').all()\n    return jsonify([...])"""
"SQLAlchemy में एक हाइब्रिड प्रॉपर्टी बनाओ","""from sqlalchemy.ext.hybrid import hybrid_property\nclass User(db.Model):\n    # ... first_name, last_name columns ...\n    @hybrid_property\n    def full_name(self):\n        return self.first_name + ' ' + self.last_name"""
"API रिस्पॉन्स के लिए एक कस्टम JSON एन्कोडर बनाओ","""import json\nfrom datetime import date\nclass CustomJSONEncoder(json.JSONEncoder):\n    def default(self, obj):\n        if isinstance(obj, date):\n            return obj.isoformat()\n        return super().default(obj)"""
"Flask में एक WebSocket का उपयोग करके रियल-टाइम नोटिफिकेशन भेजो","""# Using Flask-SocketIO\n@socketio.on('new_post_created')\ndef handle_new_post_notification(data):\n    emit('notification', {'message': 'A new post was created!'}, broadcast=True)"""
"पाइथन में UUID का उपयोग करके एक यूनिक आईडी जेनरेट करो","""import uuid\npublic_id = str(uuid.uuid4())"""
"ब्लॉग पोस्ट मॉडल में एक स्लग (slug) फील्ड जोड़ो","""slug = db.Column(db.String(120), unique=True, nullable=False, index=True)"""
"एक फंक्शन बनाओ जो टाइटल से एक स्लग जेनरेट करे","""import re\ndef slugify(text):\n    text = text.lower().strip()\n    text = re.sub(r'[^\\w\\s-]', '', text)\n    text = re.sub(r'[\\s_-]+', '-', text)\n    return text"""
"एक API बनाओ जो XML डेटा लौटाए (Jinja2 टेम्पलेट का उपयोग करके)","""@app.route('/feed.xml')\ndef get_xml_feed():\n    # ... get posts from db ...\n    return Response(render_template('feed.xml', posts=posts), mimetype='application/xml')"""
"एक Singleton डिजाइन पैटर्न का इम्प्लीमेंटेशन","class Singleton:\n    _instance = None\n    def __new__(cls):\n        if cls._instance is None:\n            print('Creating new instance')\n            cls._instance = super().__new__(cls)\n        return cls._instance"
"एक Factory मेथड डिजाइन पैटर्न का इम्प्लीमेंटेशन","class Dog: pass\nclass Cat: pass\ndef animal_factory(animal_type='dog'):\n    """A factory function for creating animal objects."""\n    if animal_type == 'dog': return Dog()\n    if animal_type == 'cat': return Cat()"
"एक Abstract Factory डिजाइन पैटर्न का ढाँचा","from abc import ABC, abstractmethod\nclass AbstractGuiFactory(ABC):\n    @abstractmethod\n    def create_button(self): pass\n    @abstractmethod\n    def create_checkbox(self): pass"
"एक Builder डिजाइन पैटर्न का ढाँचा","class Pizza: pass\nclass PizzaBuilder:\n    def add_dough(self): pass\n    def add_sauce(self): pass\n    def add_topping(self): pass\n    def build(self) -> Pizza: pass"
"एक Prototype डिजाइन पैटर्न का इम्प्लीमेंटेशन","import copy\nclass PrototypeRegistry:\n    def __init__(self):\n        self._objects = {}\n    def register(self, name, obj):\n        self._objects[name] = obj\n    def clone(self, name, **kwargs):\n        cloned_obj = copy.deepcopy(self._objects.get(name))\n        cloned_obj.__dict__.update(kwargs)\n        return cloned_obj"
"एक Adapter डिजाइन पैटर्न का ढाँचा","class OldSystem: # Adaptee\n    def legacy_request(self): return 'old'\n\nclass NewInterface: # Target\n    def request(self): pass\n\nclass Adapter(NewInterface):\n    def __init__(self, old_system: OldSystem):\n        self.old_system = old_system\n    def request(self):\n        return self.old_system.legacy_request()"
"एक Bridge डिजाइन पैटर्न का ढाँचा","class DrawingAPI: pass # Implementation Interface\nclass Shape: # Abstraction\n    def __init__(self, drawing_api: DrawingAPI): pass\n    def draw(self): pass"
"एक Composite डिजाइन पैटर्न का ढाँचा","class Graphic: # Component Interface\n    def render(self): pass\n\nclass CompositeGraphic(Graphic): # Composite\n    def __init__(self):\n        self.graphics = []\n    def add(self, graphic: Graphic): self.graphics.append(graphic)"
"एक Decorator डिजाइन पैटर्न का इम्प्लीमेंटेशन","def uppercase_decorator(function):\n    def wrapper():\n        return function().upper()\n    return wrapper\n\n@uppercase_decorator\ndef greet():\n    return 'hello'"
"एक Facade डिजाइन पैटर्न का ढाँचा","class ComputerFacade:\n    def __init__(self):\n        self.cpu = CPU()\n        self.memory = Memory()\n        self.hard_drive = HardDrive()\n    def start(self):\n        self.cpu.freeze()\n        self.memory.load(BOOT_ADDRESS, self.hard_drive.read(BOOT_SECTOR, SECTOR_SIZE))\n        self.cpu.jump(BOOT_ADDRESS)\n        self.cpu.execute()"
"एक Flyweight डिजाइन पैटर्न का कॉन्सेप्ट","// A pattern used to minimize memory usage or computational overhead by sharing as much data as possible with other similar objects. It is used when we need to create a large number of similar objects."
"एक Proxy डिजाइन पैटर्न का ढाँचा","class SubjectInterface: pass\nclass RealSubject(SubjectInterface): pass\nclass Proxy(SubjectInterface):\n    def __init__(self, real_subject: RealSubject):\n        self._real_subject = real_subject\n    def request(self):\n        # ... add extra logic like caching, logging, access control ...\n        return self._real_subject.request()"
"एक Chain of Responsibility डिजाइन पैटर्न का ढाँचा","from abc import ABC, abstractmethod\nclass Handler(ABC):\n    def __init__(self, successor=None):\n        self._successor = successor\n    @abstractmethod\n    def handle_request(self, request):\n        if self._successor:\n            self._successor.handle_request(request)"
"एक Command डिजाइन पैटर्न का ढाँचा","from abc import ABC, abstractmethod\nclass Command(ABC):\n    @abstractmethod\n    def execute(self) -> None: pass\n\nclass SimpleCommand(Command): pass\nclass Receiver: pass"
"एक Interpreter डिजाइन पैटर्न का कॉन्सेप्ट","// A behavioral design pattern that specifies how to evaluate sentences in a language. The basic idea is to have a class for each symbol (terminal or nonterminal) in a specialized computer language."
"एक Iterator डिजाइन पैटर्न का इम्प्लीमेंटेशन","class MyIterator:\n    def __init__(self, data):\n        self._index = 0\n        self._data = data\n    def __iter__(self): return self\n    def __next__(self):\n        if self._index >= len(self._data):\n            raise StopIteration\n        result = self._data[self._index]\n        self._index += 1\n        return result"
"एक Mediator डिजाइन पैटर्न का ढाँचा","class Mediator: pass\nclass BaseComponent:\n    def __init__(self, mediator: Mediator = None):\n        self._mediator = mediator\n    @property\n    def mediator(self) -> Mediator: return self._mediator\n    @mediator.setter\n    def mediator(self, mediator: Mediator) -> None: self._mediator = mediator"
"एक Memento डिजाइन पैटर्न का ढाँचा","import copy\nclass Memento:\n    def __init__(self, state): self._state = copy.deepcopy(state)\n    def get_state(self): return self._state\n\nclass Originator:\n    _state = ''\n    def create_memento(self) -> Memento: return Memento(self._state)\n    def restore_memento(self, memento: Memento): self._state = memento.get_state()"
"एक Observer डिजाइन पैटर्न का इम्प्लीमेंटेशन","class Subject:\n    def __init__(self):\n        self._observers = []\n    def attach(self, observer):\n        self._observers.append(observer)\n    def notify(self, message: str):\n        for observer in self._observers:\n            observer.update(message)\n\nclass Observer:\n    def update(self, message): pass"
"एक State डिजाइन पैटर्न का ढाँचा","from abc import ABC, abstractmethod\nclass State(ABC):\n    @abstractmethod\n    def handle_request(self) -> None: pass\n\nclass ConcreteStateA(State): pass\nclass Context:\n    _state = None\n    def __init__(self, state: State): self.transition_to(state)"
"एक Strategy डिजाइन पैटर्न का इम्प्लीमेंटेशन","from abc import ABC, abstractmethod\nclass SortStrategy(ABC): pass\nclass QuickSort(SortStrategy): pass\nclass BubbleSort(SortStrategy): pass\nclass Sorter:\n    def __init__(self, strategy: SortStrategy): self._strategy = strategy"
"एक Template Method डिजाइन पैटर्न का ढाँचा","from abc import ABC, abstractmethod\nclass AbstractClass(ABC):\n    def template_method(self) -> None:\n        self.base_operation1()\n        self.required_operation1()\n        self.hook1()\n    @abstractmethod\n    def required_operation1(self) -> None: pass\n    def hook1(self) -> None: pass"
"एक Visitor डिजाइन पैटर्न का ढाँचा","class Visitor: pass\nclass Element: \n    def accept(self, visitor: Visitor) -> None: pass\n\nclass ConcreteElementA(Element): pass"
"MVC (Model-View-Controller) आर्किटेक्चर का कॉन्सेप्ट","// An architectural pattern that separates an application into three main logical components: the Model (handles data and business logic), the View (handles the UI and presentation), and the Controller (handles user input and coordinates between Model and View)."
"MVP (Model-View-Presenter) आर्किटेक्चर का कॉन्सेप्ट","// A derivation of the MVC pattern where the Presenter assumes the functionality of the 'middle-man'. The Presenter handles all UI events on behalf of the View and updates the Model."
"MVVM (Model-View-ViewModel) आर्किटेक्चर का कॉन्सेप्ट","// An architectural pattern that facilitates a separation of the UI (the View) from the business logic (the Model) via a ViewModel, which acts as a data binder and command handler."
"मोनोलिथिक (Monolithic) आर्किटेक्चर का कॉन्सेप्ट","// A software application architecture in which a logically distinguishable application is built as a single, indivisible unit. All components are tightly coupled and run as a single service."
"माइक्रोसर्विसेज (Microservices) आर्किटेक्चर का कॉन्सेप्ट","// An architectural style that structures an application as a collection of loosely coupled, independently deployable services, where each service represents a specific business capability."
"इवेंट-ड्रिवन (Event-Driven) आर्किटेक्चर का कॉन्सेप्ट","// A software architecture paradigm promoting the production, detection, consumption of, and reaction to events. This pattern enables minimum coupling, making it a good option for modern, distributed applications."
"CQRS (Command Query Responsibility Segregation) का कॉन्सेप्ट","// A pattern that separates read (Query) and update (Command) operations for a data store. Commands are processed by one set of models and infrastructure, while Queries are handled by another."
"एक API Gateway डिजाइन पैटर्न","// A design pattern where a server acts as the single entry point for a group of microservices. It handles tasks like routing, authentication, rate limiting, and request aggregation."
"एक Circuit Breaker डिजाइन पैटर्न","// A design pattern used in modern software development to detect failures and encapsulate the logic of preventing a failure from constantly recurring, allowing a failing service to recover."
"एक Service Discovery पैटर्न","// The process of automatically detecting devices and services on a network. It's a core component of microservices architecture, allowing services to find and communicate with each other dynamically."
"एक Pub/Sub (Publish-Subscribe) पैटर्न","// A messaging pattern where senders of messages (publishers) do not programmatically send their messages to specific receivers (subscribers). Instead, they publish messages to a topic, and subscribers receive messages from topics they are subscribed to."
"एक Repository पैटर्न का ढाँचा","class AbstractRepository(ABC):\n    @abstractmethod\n    def add(self, entity): pass\n    @abstractmethod\n    def get(self, entity_id): pass\n\nclass SqlAlchemyUserRepository(AbstractRepository): pass"
"एक Unit of Work पैटर्न का कॉन्सेप्ट","// A pattern that maintains a list of objects affected by a business transaction and coordinates the writing out of changes and the resolution of concurrency problems."
"एक Dependency Injection (DI) का कॉन्सेप्ट","// A design pattern in which an object or function receives other objects or functions that it depends on (its dependencies), rather than creating them internally."
"Inversion of Control (IoC) का कॉन्सेप्ट","// A programming principle where custom-written portions of a computer program receive the flow of control from a generic, reusable framework. A framework with a Dependency Injection container is an example."
"SOLID सिद्धांत: Single Responsibility Principle (SRP)","// A class, module, or function should have one, and only one, reason to change. It should be responsible for a single part of the application's functionality."
"SOLID सिद्धांत: Open/Closed Principle (OCP)","// Software entities (classes, modules, functions, etc.) should be open for extension, but closed for modification."
"SOLID सिद्धांत: Liskov Substitution Principle (LSP)","// Subtypes must be substitutable for their base types. Objects of a superclass shall be replaceable with objects of its subclasses without breaking the application."
"SOLID सिद्धांत: Interface Segregation Principle (ISP)","// No client should be forced to depend on methods it does not use. It's better to have many smaller, client-specific interfaces than one large, general-purpose one."
"SOLID सिद्धांत: Dependency Inversion Principle (DIP)","// High-level modules should not depend on low-level modules. Both should depend on abstractions (e.g., interfaces). Abstractions should not depend on details."
"DRY (Don't Repeat Yourself) सिद्धांत","// A principle of software development aimed at reducing repetition of information of all kinds, especially in systems with many layers. 'Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.'"
"KISS (Keep It Simple, Stupid) सिद्धांत","// A design principle that states that most systems work best if they are kept simple rather than made complicated; therefore, simplicity should be a key goal in design and unnecessary complexity should be avoided."
"YAGNI (You Ain't Gonna Need It) सिद्धांत","// A principle of extreme programming (XP) that states a programmer should not add functionality until deemed necessary. 'Always implement things when you actually need them, never when you just foresee that you need them.'"
"Domain-Driven Design (DDD) का कॉन्सेप्ट","// A major software design approach, focusing on modeling software to match a real-world system or domain, according to input from that domain's experts. It's about creating a common, ubiquitous language between developers and users."
"Chart.js लाइब्रेरी को HTML में शामिल करो","<script src='https://cdn.jsdelivr.net/npm/chart.js'></script>"
"एक बार चार्ट (bar chart) बनाने के लिए एक कैनवास एलिमेंट बनाओ","<div style='width: 400px;'><canvas id='myBarChart'></canvas></div>"
"Chart.js का उपयोग करके एक सिंपल बार चार्ट बनाओ","<canvas id='c1'></canvas><script>new Chart(document.getElementById('c1'),{type:'bar',data:{labels:['January','February'], datasets:[{label:'Monthly Sales', data:[65, 59]}]}});</script>"
"Chart.js का उपयोग करके एक सिंपल लाइन चार्ट बनाओ","<canvas id='c2'></canvas><script>new Chart(document.getElementById('c2'),{type:'line',data:{labels:['Day 1','Day 2'], datasets:[{label:'Website Traffic', data:[100,150], fill:false, borderColor:'rgb(75, 192, 192)'}]}});</script>"
"Chart.js का उपयोग करके एक सिंपल पाई चार्ट बनाओ","<canvas id='c3'></canvas><script>new Chart(document.getElementById('c3'),{type:'pie',data:{labels:['Red','Blue','Yellow'], datasets:[{data:[300,50,100], backgroundColor:['Red','Blue','Yellow']}]}});</script>"
"Chart.js का उपयोग करके एक डोनट चार्ट (doughnut chart) बनाओ","<canvas id='c4'></canvas><script>new Chart(document.getElementById('c4'),{type:'doughnut',data:{...}});</script>"
"Chart.js का उपयोग करके एक रडार चार्ट (radar chart) बनाओ","<canvas id='c5'></canvas><script>new Chart(document.getElementById('c5'),{type:'radar',data:{labels:['Coding','Eating','Sleeping'], datasets:[{label:'My Skills', data:[9,7,8]}]}});</script>"
"Chart.js का उपयोग करके एक पोलर एरिया चार्ट (polar area chart) बनाओ","<canvas id='c6'></canvas><script>new Chart(document.getElementById('c6'),{type:'polarArea',data:{...}});</script>"
"एक चार्ट में टाइटल जोड़ो","options: { plugins: { title: { display: true, text: 'Custom Chart Title' } } }"
"एक चार्ट में लीजेंड (legend) को छिपाओ","options: { plugins: { legend: { display: false } } }"
"एक बार चार्ट के बार्स का रंग बदलो","datasets: [{ label: 'Data', data: [12, 19], backgroundColor: ['rgba(255, 99, 132, 0.2)', 'rgba(54, 162, 235, 0.2)'] }]"
"एक लाइन चार्ट की लाइन का रंग और मोटाई बदलो","datasets: [{ label: 'Data', data: [10, 20], borderColor: 'green', borderWidth: 3 }]"
"AJAX का उपयोग करके एक चार्ट का डेटा डायनामिक रूप से लोड करो","<script>fetch('/api/chart-data').then(res => res.json()).then(chartData => { new Chart(..., { data: chartData }); });</script>"
"एक बटन क्लिक पर चार्ट को अपडेट करो","<script>myChart.data.datasets[0].data = [50, 60, 70]; myChart.update();</script>"
"D3.js लाइब्रेरी को HTML में शामिल करो","<script src='https://d3js.org/d3.v7.min.js'></script>"
"D3.js का उपयोग करके एक सिंपल SVG एलिमेंट बनाओ","<div id='d3-container'></div><script>const svg = d3.select('#d3-container').append('svg').attr('width', 200).attr('height', 100);</script>"
"D3.js का उपयोग करके एक सर्किल बनाओ","<script>/*...after creating svg...*/ svg.append('circle').attr('cx', 50).attr('cy', 50).attr('r', 40).style('fill', 'blue');</script>"
"D3.js का उपयोग करके एक रेक्टेंगल बनाओ","<script>/*...after creating svg...*/ svg.append('rect').attr('x', 10).attr('y', 10).attr('width', 80).attr('height', 80).style('fill','green');</script>"
"D3.js में डेटा के आधार पर कई बार्स बनाओ","<script>const data=[10, 40, 32, 68]; const svg = d3.select('svg'); svg.selectAll('rect').data(data).enter().append('rect').attr('height', d=>d);</script>"
"D3.js में एक लीनियर स्केल (scale) बनाओ","<script>const xScale = d3.scaleLinear().domain([0, 100]).range([0, 500]);</script>"
"D3.js में एक एक्सिस (axis) बनाओ","<script>const xAxis = d3.axisBottom(xScale); svg.append('g').attr('transform', 'translate(0, 100)').call(xAxis);</script>"
"D3.js में एक ट्रांजीशन (transition) का उपयोग करो","<script>d3.select('circle').transition().duration(1000).attr('r', 10).style('fill', 'red');</script>"
"D3.js में एक माउसओवर इवेंट जोड़ो","<script>d3.selectAll('rect').on('mouseover', function(){ d3.select(this).style('fill', 'orange'); }).on('mouseout', function(){ d3.select(this).style('fill', 'green'); });</script>"
"D3.js का उपयोग करके एक CSV फाइल लोड करो","<script>d3.csv('my_data.csv').then(function(data) { console.log(data[0]); });</script>"
"D3.js का उपयोग करके एक JSON फाइल लोड करो","<script>d3.json('my_data.json').then(function(data) { console.log(data); });</script>"
"Chart.js में एक हॉरिजॉन्टल बार चार्ट बनाओ","<script>new Chart(ctx, {type:'bar', data: data, options: { indexAxis: 'y' }});</script>"
"Chart.js में एक स्टैक्ड बार चार्ट (stacked bar chart) बनाओ","<script>new Chart(ctx, {type:'bar', data: data, options: { scales: { x: { stacked: true }, y: { stacked: true } } }});</script>"
"Chart.js में एक बबल चार्ट (bubble chart) बनाओ","<script>new Chart(ctx, {type:'bubble', data: { datasets: [{label:'My Data', data:[{x:10,y:20,r:15}, {x:15,y:10,r:25}]}] }});</script>"
"Chart.js में एक स्कैटर चार्ट (scatter chart) बनाओ","<script>new Chart(ctx, {type:'scatter', data: { datasets: [{label:'Scatter Data', data:[{x:1,y:2},{x:3,y:4},{x:2,y:5}]}] }});</script>"
"एक चार्ट के टूलटिप्स (tooltips) को कस्टमाइज करो","options: { plugins: { tooltip: { callbacks: { label: function(context){ return `Value: ${context.parsed.y}`; } } } } }"
"एक चार्ट के एक्सिस लेबल्स को बदलो","options: { scales: { y: { title: { display: true, text: 'Total Sales ($)' } } } }"
"D3.js में एक पाई चार्ट का लेआउट बनाओ","<script>const pieGenerator = d3.pie(); const data_ready_for_pie = pieGenerator([10,20,30]);</script>"
"D3.js में एक आर्क (arc) जेनरेटर बनाओ","<script>const arcGenerator = d3.arc().innerRadius(50).outerRadius(100);</script>"
"D3.js में एक फोर्स-डायरेक्टेड ग्राफ (force-directed graph) का ढाँचा","<script>const simulation = d3.forceSimulation(nodes).force('link', d3.forceLink(links).id(d => d.id)).force('charge', d3.forceManyBody());</script>"
"एक मैप (जैसे भारत का) बनाने के लिए TopoJSON और D3.js का उपयोग करो","<script>d3.json('india_topo.json').then(function(topology) { const geojson = topojson.feature(topology, topology.objects.india); /* draw map with d3.geoPath() */ });</script>"
"Google Charts का उपयोग करके एक गेज चार्ट (gauge chart) बनाओ","<script type='text/javascript' src='https://www.gstatic.com/charts/loader.js'></script><script>google.charts.load('current', {'packages':['gauge']}); google.charts.setOnLoadCallback(drawChart); function drawChart(){...}</script>"
"Highcharts का उपयोग करके एक 3D कॉलम चार्ट बनाओ","<script src='https://code.highcharts.com/highcharts.js'></script><script src='https://code.highcharts.com/highcharts-3d.js'></script><div id='container'></div><script>Highcharts.chart('container', {chart:{type:'column', options3d:{enabled:true}}, ...});</script>"
"Leaflet.js का उपयोग करके एक इंटरैक्टिव मैप बनाओ","<link rel='stylesheet' href='https://unpkg.com/leaflet/dist/leaflet.css' /><script src='https://unpkg.com/leaflet/dist/leaflet.js'></script><div id='mapid' style='height: 200px;'></div><script>var mymap = L.map('mapid').setView([26.84, 80.94], 13); L.marker([26.84, 80.94]).addTo(mymap);</script>"
"एक Flask API बनाओ जो चार्ट के लिए डायनामिक डेटा लौटाए","@app.route('/api/monthly-sales')\ndef monthly_sales_data():\n    data = {'labels':['Jan','Feb'], 'values':[100,120]}\n    return jsonify(data)"
"Chart.js में एक मिक्सड-टाइप (mixed-type) चार्ट बनाओ (बार और लाइन)","<script>new Chart(ctx, {data: {datasets:[{type:'bar', label:'Bar Data', data:[10,20]},{type:'line', label:'Line Data', data:[15,15]}]}})</script>"
"एक चार्ट में एक बटन से नया डेटा जोड़ो","<script>function addDataToChart(chart, label, data) { chart.data.labels.push(label); chart.data.datasets.forEach((dataset) => { dataset.data.push(data); }); chart.update(); }</script>"
"एक चार्ट से डेटा को हटाओ","<script>function removeDataFromChart(chart) { chart.data.labels.pop(); chart.data.datasets.forEach((dataset) => { dataset.data.pop(); }); chart.update(); }</script>"
"D3.js में एक ब्रश करने योग्य (brushable) स्कैटर प्लॉट बनाओ","<script>const brush = d3.brush().extent([[0,0],[w,h]]).on('start brush end', brushed); svg.append('g').call(brush);</script>"
"एक चार्ट को responsive बनाओ","options: { responsive: true, maintainAspectRatio: false }"
"D3.js में एक ट्रीमैप (treemap) लेआउट बनाओ","<script>const root = d3.hierarchy(data).sum(d => d.value); const treemapLayout = d3.treemap().size([500, 500]).padding(1); treemapLayout(root);</script>"
"Plotly.js का उपयोग करके एक 3D सरफेस प्लॉट बनाओ","<script src='https://cdn.plot.ly/plotly-latest.min.js'></script><div id='myDiv3D'></div><script>Plotly.newPlot('myDiv3D', data, layout);</script>"
"Chart.js में एक टाइमलाइन चार्ट बनाओ","<script>new Chart(ctx, {type:'bar', options:{indexAxis:'y', ...}})</script>"
"एक स्पार्कलाइन (Sparkline) चार्ट बनाओ",""
"एक सनबर्स्ट (Sunburst) चार्ट का कॉन्सेप्ट","// A hierarchical chart, similar to a treemap, but represented by a radial layout. Each level of the hierarchy is a ring."
"एक प्रोडक्ट कार्ड कॉम्पोनेन्ट बनाओ","<div class='product-card' style='border:1px solid #ddd; width:200px; text-align:center;'><img src='product.jpg' width='100%' alt='Product'><h3 class='product-title'>Product Name</h3><p class='product-price'>$19.99</p><button>Add to Cart</button></div>"
"एक प्रोडक्ट ग्रिड लेआउट बनाओ","<div class='product-grid' style='display:grid; grid-template-columns:repeat(auto-fit, minmax(200px, 1fr)); gap:15px;'>...product cards here...</div>"
"एक 'Add to Cart' बटन बनाओ जो एक आइटम को कार्ट में जोड़े","<button onclick=""addToCart({id: 'prod123', name: 'Cool Laptop', price: 999.99})"">Add to Cart</button><script>let shoppingCart=[]; function addToCart(product){shoppingCart.push(product); console.log('Cart:', shoppingCart);}</script>"
"शॉपिंग कार्ट में आइटम्स की संख्या दिखाने वाला एक आइकन बनाओ","<div id='cart-icon-wrapper'>🛒 Cart (<span id='cart-item-count'>0</span>)</div>"
"शॉपिंग कार्ट का UI बनाओ जिसमें आइटम्स और टोटल हो","<div class='shopping-cart-summary'><h2>Your Cart</h2><ul id='cart-items-list'><li>Laptop - $999.99</li></ul><p style='font-weight:bold;'>Total: $<span id='cart-total-price'>999.99</span></p></div>"
"जावास्क्रिप्ट में शॉपिंग कार्ट के टोटल की गणना करो","function calculateCartTotal(){\n  let total = shoppingCart.reduce((sum, item) => sum + item.price, 0);\n  document.getElementById('cart-total-price').innerText = total.toFixed(2);\n}"
"एक प्रोडक्ट की मात्रा (quantity) को बदलने के लिए एक इनपुट बनाओ","<input type='number' value='1' min='1' onchange='updateProductQuantityInCart(123, this.value)'>"
"एक चेकआउट फॉर्म का ढाँचा बनाओ","<form id='checkout-form'><fieldset><legend>Shipping Address</legend><input placeholder='Full Name'>...</fieldset><fieldset><legend>Payment Details</legend><input placeholder='Card Number'>...</fieldset><button type='submit'>Place Order</button></form>"
"प्रोडक्ट्स को फ़िल्टर करने के लिए एक साइडबार बनाओ","<aside><h3>Filters</h3><div class='filter-group'><h4>Category</h4><input type='checkbox'> Electronics<br><input type='checkbox'> Books</div></aside>"
"एक प्रोडक्ट सर्च बार बनाओ","<input type='search' placeholder='Search for products...'>"
"एक प्रोडक्ट पेज पर इमेज थंबनेल गैलरी बनाओ","<img id='main-product-image' src='img-large-1.jpg' width='300'><div class='thumbnails'><img src='img-thumb-1.jpg' onclick=""document.getElementById('main-product-image').src='img-large-1.jpg'""> <img src='img-thumb-2.jpg' onclick=""document.getElementById('main-product-image').src='img-large-2.jpg'""></div>"
"एक स्टार रेटिंग डिस्प्ले कॉम्पोनेन्ट बनाओ (जैसे 4.5 स्टार्स)","<div class='star-rating' style='color:orange;'><span>★★★★</span><span style='color:grey'>★</span> (4.5)</div>"
"एक 'Sale' (बिक्री) बैज बनाओ","<div style='position:relative; display:inline-block;'><img src='product.jpg' width='150'><span style='position:absolute; top:10px; left:10px; background:red; color:white; padding:5px; border-radius:3px;'>SALE</span></div>"
"एक 'Out of Stock' (स्टॉक में नहीं) लेबल दिखाओ","<button disabled style='background:grey; color:white;'>Out of Stock</button>"
"एक इच्छा-सूची (wishlist) में जोड़ने के लिए एक बटन बनाओ","<button onclick='addToWishlist(123)'>❤️ Add to Wishlist</button>"
"प्रोडक्ट्स को कीमत के आधार पर सॉर्ट करने के लिए एक ड्रॉपडाउन","<label>Sort by:</label><select onchange='sortProductsBy(this.value)'><option value='price_asc'>Price: Low to High</option><option value='price_desc'>Price: High to Low</option></select>"
"एक प्रोडक्ट की तुलना (compare) करने के लिए चेकबॉक्स बनाओ","<label><input type='checkbox' onchange='compareProduct(123, this.checked)'> Compare</label>"
"एक 'Quick View' मोडल (modal) बनाओ","<button onclick=""showQuickViewModal(123)"">Quick View</button>"
"एक 'Related Products' (संबंधित उत्पाद) सेक्शन बनाओ","<section><h2>Related Products</h2><div class='product-grid'>...product cards...</div></section>"
"एक ई-कॉमर्स ब्रेडक्रंब (breadcrumb) नेविगेशन बनाओ","<nav aria-label='breadcrumb'>Home > Electronics > Laptops</nav>"
"एक डिस्काउंट कूपन अप्लाई करने के लिए एक इनपुट फील्ड बनाओ","<input placeholder='Enter Coupon Code'><button>Apply Coupon</button>"
"शिपिंग विकल्पों के लिए रेडियो बटन बनाओ","<div><label><input type='radio' name='shipping_option'> Standard Shipping ($5.00)</label></div><div><label><input type='radio' name='shipping_option'> Express Shipping ($15.00)</label></div>"
"एक प्रोडक्ट ज़ूम इफ़ेक्ट बनाओ जो होवर पर काम करे","<style>.zoom-image-container:hover img{transform:scale(1.2);}</style><div class='zoom-image-container' style='width:200px; overflow:hidden;'><img src='product.jpg' style='transition:transform 0.3s;'></div>"
"एक 'Recently Viewed' (हाल ही में देखे गए) प्रोडक्ट्स का सेक्शन बनाओ","<section><h2>Your Recently Viewed Items</h2><div id='recently-viewed-items-container'></div></section>"
"एक प्रोडक्ट के लिए कस्टमर रिव्यु (review) सेक्शन बनाओ","<div class='customer-reviews'><h3>Customer Reviews (4.5/5)</h3><div class='review'><strong>Amit</strong> - ★★★★☆ - <p>Great product!</p></div></div>"
"एक रिव्यु सबमिट करने के लिए एक फॉर्म बनाओ","<form><label>Your Rating:</label><select><option>1</option><option>2</option>...</select><br><label>Your Review:</label><textarea></textarea><br><button>Submit Review</button></form>"
"एक 'Best Sellers' (सबसे ज़्यादा बिकने वाले) सेक्शन बनाओ","<section><h2>Our Best Sellers</h2>...</section>"
"एक 'New Arrivals' (नए आगमन) सेक्शन बनाओ","<section><h2>New Arrivals</h2>...</section>"
"एक प्रोडक्ट के विभिन्न रंगों (color swatches) को दिखाओ","<div class='color-swatches'><span style='background:red; width:25px; height:25px; display:inline-block; border:1px solid #ccc; cursor:pointer;'></span> <span style='background:blue; ...'></span></div>"
"प्रोडक्ट के विभिन्न साइज़ चुनने के लिए बटन बनाओ","<div class='size-selector'><button>S</button> <button>M</button> <button>L</button> <button>XL</button></div>"
"एक 'Add to Cart' कन्फर्मेशन मैसेज दिखाओ","<div id='add-to-cart-confirmation' style='display:none; color:green;'>Product added to cart successfully!</div>"
"शॉपिंग कार्ट से एक आइटम को हटाने के लिए एक बटन","<li id='cart-item-123'>Laptop <button onclick=""document.getElementById('cart-item-123').remove()"">Remove</button></li>"
"चेकआउट पेज पर आर्डर का सारांश (order summary) दिखाओ","<div class='order-summary'><h3>Order Summary</h3><p>Subtotal: $999.99</p><p>Shipping: $5.00</p><strong>Total: $1004.99</strong></div>"
"एक 'Notify Me' फॉर्म बनाओ जब प्रोडक्ट स्टॉक में न हो","<p>This item is out of stock.</p><form><label>Enter your email to be notified:</label><input type='email'><button>Notify Me</button></form>"
"एक 'Size Chart' (साइज़ चार्ट) लिंक बनाओ जो एक मोडल खोले","<a href='#' onclick=""showSizeChartModal()"">View Size Chart</a>"
"एक 'Gift Wrap' (गिफ्ट रैप) विकल्प के लिए एक चेकबॉक्स","<label><input type='checkbox'> Add gift wrap (+$2.00)</label>"
"एक प्रोडक्ट की डिलीवरी की अनुमानित तारीख दिखाओ","<p style='color:green;'>Estimated delivery: October 15, 2025</p>"
"सोशल मीडिया पर एक प्रोडक्ट को शेयर करने के लिए बटन","<button>Share on Facebook</button> <button>Share on Twitter</button>"
"एक 'Customers who bought this also bought' सेक्शन","<section><h2>Customers also bought</h2>...</section>"
"एक प्रोडक्ट के लिए FAQ (प्रश्न-उत्तर) सेक्शन","<section><h2>Questions & Answers</h2><details><summary>Is this waterproof?</summary><p>No, it is water-resistant.</p></details></section>"
"एक 'Terms and Conditions' चेकबॉक्स जो चेकआउट पर ज़रूरी हो","<label><input type='checkbox' required> I have read and agree to the Terms and Conditions.</label>"
"पेमेंट मेथड (Credit Card, PayPal) चुनने के लिए आइकन","<div><img src='visa_icon.png' alt='Visa'> <img src='mastercard_icon.png' alt='Mastercard'> <img src='paypal_icon.png' alt='PayPal'></div>"
"एक 'Track Order' पेज का UI बनाओ","<form><label>Enter your Order ID:</label><input type='text' placeholder='eg. 12345'><button>Track Order</button></form>"
"एक 'My Account' पेज का डैशबोर्ड UI","<div class='account-dashboard'><h3>My Account</h3><ul><li><a href='/orders'>Order History</a></li><li><a href='/profile'>My Profile</a></li><li><a href='/logout'>Logout</a></li></ul></div>"
"एक 'Order History' टेबल बनाओ","<table border='1'><thead><tr><th>Order ID</th><th>Date</th><th>Total</th><th>Status</th></tr></thead><tbody><tr><td>#123</td><td>2025-10-01</td><td>$50</td><td>Shipped</td></tr></tbody></table>"
"एक 'Write a Review' बटन जो एक फॉर्म खोले","<button>Write a Review for this product</button>"
"एक इनवॉइस (invoice) का HTML टेम्पलेट बनाओ","<div class='invoice-box' style='border:1px solid; padding:20px;'><h1>Invoice</h1>...</div>"
"एक 'Abandoned Cart' ईमेल का कॉन्सेप्ट","// An automated email sent to a user who has added items to their shopping cart but did not complete the purchase, reminding them of their items."
"अपसेल (Upsell) और क्रॉस-सेल (Cross-sell) का कॉन्सेप्ट","// Upsell: Encouraging a customer to buy a more expensive, upgraded version of a product. Cross-sell: Encouraging a customer to buy related or complementary items."
"पेज लोड होने पर सभी ब्लॉग पोस्ट्स को फेच करो और दिखाओ","""<div id='posts-container'></div>\n<script>\nwindow.addEventListener('DOMContentLoaded', () => {\n  fetch('/api/posts').then(res => res.json()).then(posts => {\n    const container = document.getElementById('posts-container');\n    posts.forEach(post => {\n      container.innerHTML += `<h2><a href='#' onclick='fetchPost(${post.id})'>${post.title}</a></h2>`;\n    });\n  });\n});\n</script>"""
"एक लिंक पर क्लिक करके एक सिंगल पोस्ट का कंटेंट फेच करो और दिखाओ","""<div id='single-post-view'></div>\n<script>\nfunction fetchPost(id) {\n  fetch(`/api/posts/${id}`).then(res => res.json()).then(post => {\n    document.getElementById('single-post-view').innerHTML = `<h1>${post.title}</h1><p>${post.content}</p>`;\n  });\n}\n</script>"""
"एक नया ब्लॉग पोस्ट बनाने के लिए एक HTML फॉर्म बनाओ","""<form id='new-post-form'>\n  <input id='title-input' placeholder='Title' required>\n  <br><br>\n  <textarea id='content-input' placeholder='Content' required></textarea>\n  <br><br>\n  <button type='submit'>Create Post</button>\n</form>"""
"AJAX का उपयोग करके नया पोस्ट बनाने वाले फॉर्म को सबमिट करो","""<script>\ndocument.getElementById('new-post-form').addEventListener('submit', event => {\n  event.preventDefault();\n  const title = document.getElementById('title-input').value;\n  const content = document.getElementById('content-input').value;\n  fetch('/api/posts', {\n    method: 'POST',\n    headers: {'Content-Type': 'application/json'},\n    body: JSON.stringify({title: title, content: content})\n  }).then(res => res.json()).then(data => console.log('New post created with ID:', data.id));\n});\n</script>"""
"एक पोस्ट को डिलीट करने के लिए एक बटन बनाओ","""<button onclick=""deletePost(5)"">Delete Post 5</button>\n<script>\nfunction deletePost(id) {\n  if(confirm('Are you sure you want to delete this post?')){\n    fetch(`/api/posts/${id}`, { method: 'DELETE' }).then(() => alert('Post deleted'));\n  }\n}\n</script>"""
"एक पोस्ट को एडिट करने के लिए एक फॉर्म दिखाओ","""<button onclick=""showEditForm(5)"">Edit Post 5</button>\n<div id='edit-form-container'></div>\n<script>\nfunction showEditForm(id) {\n    // fetch post data and populate an edit form in the container\n}\n</script>"""
"जावास्क्रिप्ट से एक डायनामिक सर्च फंक्शन बनाओ","""<input placeholder='Search blog posts...' onkeyup=""fetch('/api/search?q='+this.value).then(res => res.json()).then(results => {\n  // ... code to display search results on the page ...\n});"">"""
"पेजिनेशन बटन्स (Next/Previous) के लिए जावास्क्रिप्ट लिखो","""let currentPage = 1;\nfunction loadPostsForPage(page) {\n  fetch(`/api/posts-paginated?page=${page}`).then(res => res.json()).then(data => {\n    // ... display posts for the given page ...\n    currentPage = page;\n  });\n}"""
"एक 'Load More' बटन बनाओ जो और पोस्ट्स लोड करे","""<button id='load-more-btn' onclick=""loadPostsForPage(currentPage + 1)"">Load More</button>"""
"एक पोस्ट पर कमेंट करने के लिए एक फॉर्म बनाओ","""<form onsubmit=""addCommentToPost(5, this.comment.value); return false;"">\n  <input name='comment' placeholder='Write a comment...'>\n  <button type='submit'>Submit Comment</button>\n</form>"""
"एक पोस्ट के सभी कमेंट्स को फेच करो और दिखाओ","""<ul id='comments-list-for-post-5'></ul>\n<script>\nfetch('/api/posts/5/comments').then(res => res.json()).then(comments => {\n  const list = document.getElementById('comments-list-for-post-5');\n  comments.forEach(comment => { list.innerHTML += `<li>${comment.text}</li>`; });\n});\n</script>"""
"एक 'Like' बटन बनाओ जो API को कॉल करे और लाइक काउंट अपडेट करे","""<p>Likes: <span id='like-count-for-post-5'>10</span></p>\n<button onclick=""fetch('/api/posts/5/like', {method:'POST'}).then(res=>res.json()).then(data=>document.getElementById('like-count-for-post-5').innerText=data.likes);"">👍 Like</button>"""
"यूज़र रजिस्ट्रेशन के लिए एक AJAX फॉर्म बनाओ","""<form id='registration-form'>...</form>\n<script>// JavaScript to submit registration form data as a JSON object via a fetch POST request</script>"""
"यूज़र लॉगइन के लिए एक AJAX फॉर्म बनाओ और JWT टोकन को localStorage में सेव करो","""<script>\n// ... inside form submit event listener ...\nfetch('/api/login', ...).then(res => res.json()).then(data => {\n  if (data.token) {\n    localStorage.setItem('jwt_token', data.token);\n    window.location.href = '/dashboard'; // redirect to dashboard\n  }\n});\n</script>"""
"हर प्रोटेक्टेड API रिक्वेस्ट के साथ JWT टोकन भेजो","""<script>\nconst token = localStorage.getItem('jwt_token');\nfetch('/api/protected-route', { \n    headers: {\n        'Authorization': `Bearer ${token}`\n    }\n});\n</script>"""
"एक लॉगआउट बटन बनाओ जो JWT टोकन को localStorage से हटाए","""<button onclick=""localStorage.removeItem('jwt_token'); window.location.href = '/login';"">Logout</button>"""
"Markdown कंटेंट को HTML में बदलने के लिए एक लाइब्रेरी (जैसे Showdown.js) का उपयोग करो","""<script src='https://cdnjs.cloudflare.com/ajax/libs/showdown/2.1.0/showdown.min.js'></script>\n<script>\n  const converter = new showdown.Converter();\n  const markdownText = '# Hello\\n**This is bold.**';\n  const html = converter.makeHtml(markdownText);\n</script>"""
"API से मिले Markdown कंटेंट को पेज पर रेंडर करो","""fetch('/api/posts/1').then(res => res.json()).then(post => {\n  const converter = new showdown.Converter();\n  const htmlContent = converter.makeHtml(post.content);\n  document.getElementById('post-content-div').innerHTML = htmlContent;\n});"""
"तारीख को एक रीडेबल फॉर्मेट में दिखाने के लिए एक जावास्क्रिप्ट फंक्शन","""function formatReadableDate(isoString) {\n  return new Date(isoString).toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' });\n}"""
"एक लोडिंग स्पिनर दिखाओ जब API कॉल चल रही हो","""function fetchDataWithLoader(){\n  document.getElementById('loader-spinner').style.display = 'block';\n  fetch('...').finally(() => {\n    document.getElementById('loader-spinner').style.display = 'none';\n  });\n}"""
"API से एरर आने पर यूज़र को एक एरर मैसेज दिखाओ","""<p id='error-display-area' style='color:red;'></p>\n<script>\nfetch('/api/invalid-endpoint').catch(error => {\n  document.getElementById('error-display-area').innerText = 'An error occurred while loading data.';\n});\n</script>"""
"एक 'Single Page Application' (SPA) का बेसिक राउटर बनाओ","""<script>\nwindow.onhashchange = function() {\n  const page = window.location.hash.substring(1);\n  // Logic to show content based on the 'page' variable (e.g., #/about, #/contact)\n}\n</script>"""
"वेबसाइट में एक सिंपल डार्क मोड टॉगल बनाओ","""<button onclick=""document.body.classList.toggle('dark-mode')"">Toggle Dark Mode</button>\n<style>.dark-mode { background: #333; color: white; }</style>"""
"एक ब्लॉग पोस्ट के लिए 'टैग्स' की लिस्ट दिखाओ","""// Assuming API returns post.tags = [{name:'tech'}, {name:'python'}]\nconst tagsHtml = post.tags.map(tag => `<span class='tag'>${tag.name}</span>`).join(' ');"""
"एक ब्लॉग पोस्ट के लेखक का नाम दिखाओ","""// Assuming API returns post.author = {username: 'Amit'}\ndocument.getElementById('author-name').innerText = `By ${post.author.username}`;"""
"एक नया पोस्ट बनाने के बाद पेज को री-रेंडर करो (बिना रीलोड किए)","""fetch('/api/posts', {method:'POST',...}).then(() => {\n  // Clear the form and call the function that fetches and renders all posts again\n  fetchAllPosts();\n});"""
"URL से पोस्ट ID निकालो और उस पोस्ट को फेच करो","""<script>\nconst pathParts = window.location.pathname.split('/');\nconst postId = pathParts[pathParts.length - 1];\nif(postId && !isNaN(postId)) {\n  fetchPost(postId);\n}\n</script>"""
"WebSocket का उपयोग करके रियल-टाइम कमेंट्स दिखाओ","""<script>\nconst socket = io(); // from socket.io.js\nsocket.on('new_comment_for_post_5', function(comment) {\n  // Add the new comment to the comments list dynamically without reloading the page\n});\n</script>"""
"WebSocket से कनेक्ट करने के लिए जावास्क्रिप्ट कोड","""<script src='https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.0.1/socket.io.js'></script>\n<script>var socket = io.connect('http://' + document.domain + ':' + location.port);</script>"""
"यूज़र को एक पोस्ट एडिट करने के लिए एक इन-प्लेस एडिटर दो (`contenteditable`)","""<div id='content-div' ondblclick=""this.contentEditable=true; this.focus();"">Double click to edit this text.</div>"""
"फ्रंटएंड पर फॉर्म वैलिडेशन (ईमेल) करो","""<form onsubmit=""const email = this.email.value; if(!email.includes('@') || !email.includes('.')){alert('Please enter a valid email address'); return false;}""><input name='email' type='email'></form>"""
"API से मिले पेजिनेशन डेटा को हैंडल करो और बटन को डिसेबल करो","""// API returns { 'posts': [...], 'has_next': true, 'next_page': 3 }\nif (!data.has_next) {\n  document.getElementById('load-more-button').disabled = true;\n}"""
"एक इमेज अपलोड फॉर्म बनाओ जो `FormData` का उपयोग करे","""<input type='file' id='image-file-input'>\n<script>\nfunction uploadImage(){\n  const fileInput = document.getElementById('image-file-input');\n  if (fileInput.files.length > 0) {\n      const formData = new FormData();\n      formData.append('image', fileInput.files[0]);\n      fetch('/api/upload', {method:'POST', body:formData});\n  }\n}\n</script>"""
"एक 'infinite scroll' फीचर बनाओ","""<script>\nconst contentEl = document.getElementById('content');\nwindow.addEventListener('scroll', () => {\n  const { scrollTop, scrollHeight, clientHeight } = document.documentElement;\n  if (scrollTop + clientHeight >= scrollHeight - 5) {\n    // Load more posts when user is near the bottom\n  }\n});\n</script>"""
"एक 'debounce' फंक्शन का उपयोग करके सर्च API कॉल्स को ऑप्टिमाइज़ करो","""<script>\nfunction debounce(func, delay=300) {\n  let timeout;\n  return function(...args) {\n    clearTimeout(timeout);\n    timeout = setTimeout(() => { func.apply(this, args); }, delay);\n  };\n}\nconst efficientSearch = debounce(searchTerm => fetch('/api/search?q='+searchTerm));\n</script>"""
"एक 'throttle' फंक्शन का उपयोग करके स्क्रॉल इवेंट्स को ऑप्टिमाइज़ करो","""<script>\nfunction throttle(func, limit) { \n  let inThrottle;\n  return function() {\n    if (!inThrottle) {\n      func.apply(this, arguments);\n      inThrottle = true;\n      setTimeout(() => inThrottle = false, limit);\n    }\n  }\n}\nwindow.addEventListener('scroll', throttle(() => console.log('Scrolled!'), 100));\n</script>"""
"एक ब्राउज़र नोटिफिकेशन (Notification API) भेजो","""<button onclick=""Notification.requestPermission().then(permission => { if (permission === 'granted') { new Notification('New Blog Post Available!'); } });"">Enable Notifications</button>"""
"एक पोस्ट को शेयर करने के लिए Web Share API का उपयोग करो","""<button onclick=""if(navigator.share){navigator.share({title: 'My Awesome Blog Post', url: '/posts/1'})} else {alert('Share not supported')}"">Share Post</button>"""
"फ्रंटएंड पर एक JSON ऑब्जेक्ट को सुंदर तरीके से दिखाओ","""<pre id='json-display-output'></pre>\n<script>\nconst myJsonObject = { id: 1, name: 'Amit', is_active: true };\ndocument.getElementById('json-display-output').textContent = JSON.stringify(myJsonObject, null, 2);\n</script>"""
"एक पोस्ट को localStorage का उपयोग करके 'बुकमार्क' करो","""<button onclick=""localStorage.setItem('bookmarked_post_1', 'true')"">Bookmark Post 1</button>"""
"एक लोडिंग स्केलेटन (skeleton) स्क्रीन का HTML/CSS बनाओ","""<style>@keyframes pulse{...} .skeleton-box{animation: pulse 1.5s infinite; background:#e0e0e0;}</style><div class='post-skeleton'><div class='skeleton-box' style='height:150px;'></div><div class='skeleton-box' style='height:20px; margin-top:10px;'></div></div>"""
"एक पोस्ट के 'पढ़ने का समय' (reading time) कैलकुलेट करो","""<script>\nfunction calculateReadingTime(text) {\n  const wordsPerMinute = 225;\n  const wordCount = text.trim().split(/\s+/).length;\n  const readingTime = Math.ceil(wordCount / wordsPerMinute);\n  return `${readingTime} min read`;\n}\n</script>"""
"एक ब्लॉग पोस्ट के लिए एक 'Table of Contents' डायनामिक रूप से जेनरेट करो","""<nav><h4>Contents</h4><ul id='table-of-contents'></ul></nav>\n<script>\ndocument.querySelectorAll('main h2').forEach(heading => {\n  const id = heading.textContent.toLowerCase().replace(/ /g, '-');\n  heading.id = id;\n  document.getElementById('table-of-contents').innerHTML += `<li><a href='#${id}'>${heading.textContent}</a></li>`;\n});\n</script>"""
"यूज़र से एक कन्फर्मेशन डायलॉग (dialog) दिखाओ","""<button onclick=""if(confirm('Are you absolutely sure you want to delete this?')){ console.log('Deleting...'); }"">Delete Item</button>"""
"Fetch API में `AbortController` का उपयोग करके एक रिक्वेस्ट को कैंसिल करो","""<script>\nconst controller = new AbortController();\nconst signal = controller.signal;\nfetch('...', {signal});\n\n// To cancel the request, for example after a timeout:\n// controller.abort();\n</script>"""
"एक नया पोस्ट बनाने के बाद यूज़र को उस पोस्ट के पेज पर रीडायरेक्ट करो","""fetch('/api/posts', {method:'POST',...}).then(res => res.json()).then(data => {\n  // Redirect to the new post's page\n  window.location.href = `/posts/${data.id}`;\n});"""
"एक API कॉल के लिए एक टाइमआउट सेट करो","""<script>\nconst controller = new AbortController();\nconst timeoutId = setTimeout(() => controller.abort(), 5000); // 5 second timeout\n\nfetch('/api/slow-endpoint', {signal: controller.signal})\n  .catch(error => { if (error.name === 'AbortError') console.error('Request timed out!'); })\n  .finally(() => clearTimeout(timeoutId));\n</script>"""
"एक सिंपल WYSIWYG एडिटर का ढाँचा (Bold, Italic)","""<div id='editor' contenteditable='true' style='border:1px solid #ccc; height:150px; padding:5px;'>Type your text here...</div>\n<button onclick=""document.execCommand('bold')""><b>B</b></button>\n<button onclick=""document.execCommand('italic')""><i>I</i></button>"""
"एक Singleton डिजाइन पैटर्न का इम्प्लीमेंटेशन","class Singleton:\n    _instance = None\n    def __new__(cls):\n        if cls._instance is None:\n            print('Creating the instance')\n            cls._instance = super().__new__(cls)\n        return cls._instance"
"एक Factory मेथड डिजाइन पैटर्न का इम्प्लीमेंटेशन","class Dog: pass\nclass Cat: pass\ndef animal_factory(animal_type='dog'):\n    """A factory for creating animals."""\n    if animal_type == 'dog': return Dog()\n    if animal_type == 'cat': return Cat()"
"एक Abstract Factory डिजाइन पैटर्न का ढाँचा","class AbstractFactory:\n    def create_product_a(self): pass\n    def create_product_b(self): pass"
"एक Builder डिजाइन पैटर्न का ढाँचा","class Car: pass\nclass CarBuilder:\n    def set_wheels(self): pass\n    def set_color(self): pass\n    def build(self): return Car()"
"एक Prototype डिजाइन पैटर्न का इम्प्लीमेंटेशन","import copy\nclass Prototype:\n    def clone(self):\n        return copy.deepcopy(self)"
"एक Adapter डिजाइन पैटर्न का ढाँचा","class EuropeanSocket: pass\nclass USASocketInterface: pass\nclass SocketAdapter(USASocketInterface):\n    def __init__(self, euro_socket: EuropeanSocket): pass"
"एक Bridge डिजाइन पैटर्न का ढाँचा","class DrawingAPI: pass # Implementation\nclass Shape: # Abstraction\n    def __init__(self, drawing_api: DrawingAPI): pass"
"एक Composite डिजाइन पैटर्न का ढाँचा","class Graphic: # Component\n    def render(self): pass\n\nclass CompositeGraphic(Graphic): # Composite\n    def __init__(self):\n        self.graphics = []"
"एक Decorator डिजाइन पैटर्न का इम्प्लीमेंटेशन","def simple_decorator(func):\n    def wrapper():\n        print('Before function execution.')\n        func()\n        print('After function execution.')\n    return wrapper"
"एक Facade डिजाइन पैटर्न का ढाँचा","class ComputerFacade:\n    def __init__(self):\n        self.cpu = CPU()\n        self.memory = Memory()\n        self.hard_drive = HardDrive()\n    def start(self):\n        self.cpu.start()\n        self.memory.load()\n        self.hard_drive.read()"
"एक Flyweight डिजाइन पैटर्न का कॉन्सेप्ट","// A pattern used to minimize memory or computational overhead by sharing as much data as possible with other similar objects. It is a way to use objects in large numbers when a simple repeated representation would use an unacceptable amount of memory."
"एक Proxy डिजाइन पैटर्न का ढाँचा","class RealSubject:\n    def request(self): pass\n\nclass Proxy:\n    def __init__(self, real_subject: RealSubject):\n        self._real_subject = real_subject\n    def request(self):\n        # ... add extra logic before or after ...\n        return self._real_subject.request()"
"एक Chain of Responsibility डिजाइन पैटर्न का ढाँचा","class Handler:\n    def __init__(self, successor=None):\n        self._successor = successor\n    def handle_request(self, request):\n        if not self._handle(request) and self._successor:\n            self._successor.handle_request(request)"
"एक Command डिजाइन पैटर्न का ढाँचा","from abc import ABC, abstractmethod\nclass Command(ABC):\n    @abstractmethod\n    def execute(self) -> None: pass"
"एक Interpreter डिजाइन पैटर्न का कॉन्सेप्ट","// A behavioral design pattern that specifies how to evaluate sentences in a language. The basic idea is to have a class for each symbol (terminal or nonterminal) in a specialized computer language."
"एक Iterator डिजाइन पैटर्न का इम्प्लीमेंटेशन","class MyIterator:\n    def __init__(self, data):\n        self._index = 0\n        self._data = data\n    def __next__(self):\n        if self._index >= len(self._data):\n            raise StopIteration\n        result = self._data[self._index]\n        self._index += 1\n        return result"
"एक Mediator डिजाइन पैटर्न का ढाँचा","class Mediator:\n    def notify(self, sender, event: str) -> None: pass\n\nclass BaseComponent:\n    def __init__(self, mediator: Mediator = None):\n        self._mediator = mediator"
"एक Memento डिजाइन पैटर्न का ढाँचा","import copy\nclass Memento:\n    def __init__(self, state):\n        self._state = copy.deepcopy(state)\n\nclass Originator:\n    _state = ''\n    def create_memento(self) -> Memento: return Memento(self._state)"
"एक Observer डिजाइन पैटर्न का इम्प्लीमेंटेशन","class Subject:\n    def __init__(self):\n        self._observers = []\n    def attach(self, observer):\n        self._observers.append(observer)\n    def notify(self, message: str):\n        for observer in self._observers:\n            observer.update(message)"
"एक State डिजाइन पैटर्न का ढाँचा","from abc import ABC, abstractmethod\nclass State(ABC):\n    @abstractmethod\n    def handle_request(self) -> None: pass\n\nclass ConcreteStateA(State): pass"
"एक Strategy डिजाइन पैटर्न का इम्प्लीमेंटेशन","from abc import ABC, abstractmethod\nclass Strategy(ABC): pass\nclass ConcreteStrategyA(Strategy): pass\nclass Context:\n    def __init__(self, strategy: Strategy):\n        self._strategy = strategy"
"एक Template Method डिजाइन पैटर्न का ढाँचा","from abc import ABC, abstractmethod\nclass AbstractClass(ABC):\n    def template_method(self) -> None:\n        self.base_operation1()\n        self.required_operation1()\n    @abstractmethod\n    def required_operation1(self) -> None: pass"
"एक Visitor डिजाइन पैटर्न का ढाँचा","class Visitor: pass\nclass Element:\n    def accept(self, visitor: Visitor) -> None: pass"
"MVC (Model-View-Controller) आर्किटेक्चर का कॉन्सेप्ट","// An architectural pattern that separates an application into three main logical components: the model (data and business logic), the view (UI), and the controller (handles input)."
"MVP (Model-View-Presenter) आर्किटेक्चर का कॉन्सेप्ट","// A derivation of the MVC pattern where the Presenter assumes the functionality of the 'middle-man'. The Presenter handles all UI events on behalf of the view."
"MVVM (Model-View-ViewModel) आर्किटेक्चर का कॉन्सेप्ट","// An architectural pattern that facilitates a separation of the user interface (the View) from the business logic and data (the Model) via a ViewModel."
"मोनोलिथिक (Monolithic) आर्किटेक्चर का कॉन्सेप्ट","// A software application architecture in which a logically distinguishable application is built as a single, indivisible unit. All components are tightly coupled and run as a single service."
"माइक्रोसर्विसेज (Microservices) आर्किटेक्चर का कॉन्सेप्ट","// An architectural style that structures an application as a collection of loosely coupled, independently deployable services, each representing a business capability."
"इवेंट-ड्रिवन (Event-Driven) आर्किटेक्चर का कॉन्सेप्ट","// A software architecture paradigm promoting the production, detection, consumption of, and reaction to events. This pattern enables minimum coupling, making it a good option for modern, distributed applications."
"CQRS (Command Query Responsibility Segregation) का कॉन्सेप्ट","// A pattern that separates read and update operations for a data store. Commands update data, and Queries read data."
"एक API Gateway डिजाइन पैटर्न","// A design pattern where a server acts as a single entry point for a group of microservices. It handles tasks like routing, authentication, and rate limiting."
"एक Circuit Breaker डिजाइन पैटर्न","// A design pattern used in modern software development to detect failures and encapsulate the logic of preventing a failure from constantly recurring during maintenance, temporary server failure or unexpected system difficulties."
"एक Service Discovery पैटर्न","// The process of automatically detecting devices and services on a network. It's a core component of microservices architecture."
"एक Pub/Sub (Publish-Subscribe) पैटर्न","// A messaging pattern where senders of messages (publishers) do not programmatically send their messages to specific receivers (subscribers). Instead, they publish messages to a topic, and subscribers receive messages from topics they subscribe to."
"एक Repository पैटर्न का ढाँचा","class UserRepository:\n    def get_by_id(self, user_id): pass\n    def get_all(self): pass\n    def add(self, user): pass\n    def remove(self, user): pass"
"एक Unit of Work पैटर्न का कॉन्सेप्ट","// A pattern that maintains a list of objects affected by a business transaction and coordinates the writing out of changes and the resolution of concurrency problems."
"एक Dependency Injection (DI) का कॉन्सेप्ट","// A design pattern in which an object or function receives other objects or functions that it depends on, rather than creating them internally."
"Inversion of Control (IoC) का कॉन्सेप्ट","// A programming principle where custom-written portions of a computer program receive the flow of control from a generic, reusable framework. A framework with a DI container is an example."
"SOLID सिद्धांत: Single Responsibility Principle (SRP)","// A class, module, or function should have one, and only one, reason to change. It should have only one job."
"SOLID सिद्धांत: Open/Closed Principle (OCP)","// Software entities (classes, modules, functions, etc.) should be open for extension, but closed for modification."
"SOLID सिद्धांत: Liskov Substitution Principle (LSP)","// Subtypes must be substitutable for their base types. Objects of a superclass shall be replaceable with objects of its subclasses without breaking the application."
"SOLID सिद्धांत: Interface Segregation Principle (ISP)","// No client should be forced to depend on methods it does not use. It's better to have many smaller, specific interfaces than one large, general-purpose one."
"SOLID सिद्धांत: Dependency Inversion Principle (DIP)","// High-level modules should not depend on low-level modules. Both should depend on abstractions (e.g., interfaces). Abstractions should not depend on details."
"DRY (Don't Repeat Yourself) सिद्धांत","// A principle of software development aimed at reducing repetition of information of all kinds, especially in systems with many layers."
"KISS (Keep It Simple, Stupid) सिद्धांत","// A design principle that states that most systems work best if they are kept simple rather than made complicated; therefore, simplicity should be a key goal in design."
"YAGNI (You Ain't Gonna Need It) सिद्धांत","// A principle of extreme programming (XP) that states a programmer should not add functionality until deemed necessary. 'Always implement things when you actually need them, never when you just foresee that you need them.'"
"Domain-Driven Design (DDD) का कॉन्सेप्ट","// A major software design approach, focusing on modeling software to match a domain according to input from that domain's experts. It's about creating a common, ubiquitous language."
"एक ग्राफ में बेलमैन-फोर्ड (Bellman-Ford) एल्गोरिथ्म का ढाँचा","def bellman_ford(graph, source):\n    # ... algorithm for single-source shortest paths, can handle negative weights ..."
"एक ग्राफ में फ्लोयड-वॉर्शल (Floyd-Warshall) एल्गोरिथ्म का ढाँचा","def floyd_warshall(graph):\n    # ... algorithm for finding all-pairs shortest paths in a weighted graph ..."
"एक मिनिमम स्पैनिंग ट्री (Minimum Spanning Tree) के लिए क्रुस्कल (Kruskal's) एल्गोरिथ्म","class Graph:\n    # ... Kruskal's algorithm implementation using Union-Find to find MST ..."
"एक मिनिमम स्पैनिंग ट्री के लिए प्रिम (Prim's) एल्गोरिथ्म","import heapq\ndef prims_algorithm(graph, start):\n    # ... Prim's algorithm implementation using a priority queue to find MST ..."
"एक डायरेक्टेड एसाइक्लिक ग्राफ (DAG) का टोपोलॉजिकल सॉर्ट (Topological Sort)","from collections import deque\ndef topological_sort(graph):\n    # ... Kahn's algorithm for topological sorting using in-degrees and a queue ..."
"एक AVL ट्री का नोड बनाओ","class AVLNode:\n    def __init__(self, key):\n        self.key = key\n        self.left = None\n        self.right = None\n        self.height = 1"
"एक रेड-ब्लैक ट्री (Red-Black Tree) का कॉन्सेप्ट","// A self-balancing binary search tree where each node has an extra bit for storing color (red or black), used to ensure the tree remains approximately balanced during insertions and deletions."
"एक बी-ट्री (B-Tree) का कॉन्सेप्ट","// A self-balancing tree data structure that maintains sorted data and allows searches, sequential access, insertions, and deletions in logarithmic time. It is commonly used in databases and filesystems."
"एक सेगमेंट ट्री (Segment Tree) का ढाँचा","class SegmentTree:\n    def __init__(self, arr):\n        # ... logic to build the segment tree for range queries ..."
"एक फेनविक ट्री (Fenwick Tree) या बाइनरी इंडेक्स्ड ट्री (BIT)","class FenwickTree:\n    def __init__(self, size):\n        # ... logic to initialize BIT for prefix sum queries ..."
"एक स्ट्रिंग में KMP (Knuth-Morris-Pratt) एल्गोरिथ्म का उपयोग करो","def kmp_search(pattern, text):\n    # ... KMP string-searching algorithm using a precomputed LPS (Longest Proper Prefix which is also Suffix) array ..."
"रबिन-कार्प (Rabin-Karp) एल्गोरिथ्म का उपयोग करो","def rabin_karp_search(pattern, text, q):\n    # ... Rabin-Karp string-searching algorithm using a rolling hash function ..."
"एक 'Least Recently Used' (LRU) कैश का इम्प्लीमेंटेशन","from collections import OrderedDict\nclass LRUCache:\n    def __init__(self, capacity: int):\n        self.cache = OrderedDict()\n        self.capacity = capacity\n    # ... get and put methods that reorder the dictionary ..."
"ट्रैवलिंग सेल्समैन प्रॉब्लम (Traveling Salesman Problem) का कॉन्सेप्ट","// A classic algorithmic problem: given a list of cities and the distances between each pair of cities, what is the shortest possible route that visits each city exactly once and returns to the origin city? (NP-hard)"
"बैकट्रैकिंग (Backtracking) एल्गोरिथ्म का एक उदाहरण (N-Queens प्रॉब्लम)","def solve_n_queens(n):\n    # ... recursive backtracking algorithm to place N queens on an NxN chessboard without them attacking each other ..."
"एक डिवाइड एंड कॉन्कर (Divide and Conquer) एल्गोरिथ्म का उदाहरण (Quick Sort)","// Quick Sort is a classic divide and conquer algorithm that picks a pivot and partitions the array around it."
"एक ग्रीडी एल्गोरिथ्म (Greedy Algorithm) का एक उदाहरण (Fractional Knapsack)","def fractional_knapsack(weights, values, capacity):\n    # ... greedy approach by choosing items with the highest value-to-weight ratio first ..."
"कॉन्वेक्स हल (Convex Hull) को खोजने के लिए एक एल्गोरिथ्म","def convex_hull_graham_scan(points):\n    # ... Graham scan algorithm to find the smallest convex polygon containing all points ..."
"एक लाइन इंटरसेक्शन एल्गोरिथ्म","def line_intersection(line1, line2):\n    # ... algorithm to find the intersection point of two line segments given their endpoints ..."
"एक मैक्सिमम फ्लो (Maximum Flow) प्रॉब्लम (Edmonds-Karp)","def edmonds_karp(graph, source, sink):\n    # ... Edmonds-Karp algorithm, which is an implementation of Ford-Fulkerson using BFS to find augmenting paths ..."
"एक बिटमास्किंग (Bitmasking) तकनीक का उपयोग करके एक सबसेट जेनरेट करो","def generate_subsets(arr):\n    n = len(arr)\n    for i in range(1 << n):\n        subset = []\n        for j in range(n):\n            if (i >> j) & 1:\n                subset.append(arr[j])\n        print(subset)"
"एक फास्ट फूरियर ट्रांसफॉर्म (FFT) का कॉन्सेप्ट","// An algorithm that computes the discrete Fourier transform (DFT) of a sequence, or its inverse (IDFT). It's widely used in signal processing and data analysis."
"मोंटे कार्लो (Monte Carlo) सिमुलेशन का एक उदाहरण (पाई का अनुमान)","import random\ndef estimate_pi(num_points):\n    # ... Monte Carlo simulation using random points in a square to estimate Pi ..."
"एक मार्कोव चेन (Markov Chain) का कॉन्सेप्ट","// A stochastic model describing a sequence of possible events in which the probability of each event depends only on the state attained in the previous event."
"एक जेनेटिक एल्गोरिथ्म (Genetic Algorithm) का ढाँचा","def genetic_algorithm():\n    # 1. Initialize population\n    # 2. Evaluate fitness of each individual\n    # 3. Select parents\n    # 4. Create offspring through Crossover and Mutation\n    # 5. Repeat"
"एक न्यूरल नेटवर्क का 'फॉरवर्ड पास' मैन्युअल रूप से लिखो","import numpy as np\n# ... define weights, biases, and activation function (e.g., sigmoid) ...\n# output = sigmoid(np.dot(weights, input) + bias)"
"एक न्यूरल नेटवर्क का 'बैकप्रोपेगेशन' का कॉन्सेप्ट","// The primary algorithm for training artificial neural networks. It calculates the gradient of the loss function with respect to the network's weights, allowing the weights to be updated to minimize the loss."
"एक सिंपल डिसेंट्रलाइज्ड एप्लीकेशन (DApp) का कॉन्सेप्ट (ब्लॉकचैन)","// An application that runs on a decentralized peer-to-peer network, such as Ethereum. Its backend code (smart contracts) runs on the blockchain."
"एक स्मार्ट कॉन्ट्रैक्ट (Smart Contract) का उदाहरण (Solidity)","pragma solidity ^0.8.0;\ncontract SimpleStorage {\n    uint256 public myNumber;\n    function set(uint256 _myNumber) public {\n        myNumber = _myNumber;\n    }\n}"
"क्रिप्टोग्राफिक हैश फंक्शन (SHA-256) का उपयोग करो","import hashlib\nhash_object = hashlib.sha256(b'Hello, World!')\nhex_digest = hash_object.hexdigest()"
"पब्लिक-की क्रिप्टोग्राफी (Public-Key Cryptography) का कॉन्सेप्ट","// A cryptographic system that uses pairs of keys: public keys, which may be disseminated widely, and private keys, which are known only to the owner. Used for encryption and digital signatures."
"एक काउंट-मिन स्केच (Count-Min Sketch) का कॉन्सेप्ट","// A probabilistic data structure that serves as a frequency table of events in a stream of data. It can estimate the frequency of an item with a certain error bound."
"एक हाइपरलॉगॉग (HyperLogLog) का कॉन्सेप्ट","// A probabilistic algorithm for the count-distinct problem, approximating the number of distinct elements in a multiset with high accuracy using a small amount of memory."
"एक K-d ट्री (K-d Tree) का कॉन्सेप्ट","// A space-partitioning data structure for organizing points in a k-dimensional space. It is a useful structure for range searches and nearest neighbor searches."
"एक R-ट्री (R-Tree) का कॉन्सेप्ट","// A tree data structure used for spatial access methods, i.e., for indexing multi-dimensional information such as geographical coordinates, rectangles or polygons."
"एक स्पेस-टाइम ट्रेडऑफ (Space-Time Tradeoff) का कॉन्सेप्ट","// A situation where a problem can be solved in less time by using more storage space, or in less storage space by taking more time. Example: Memoization uses more space (cache) to reduce time."
"एक क्रिप्टोग्राफिक साल्ट (Salt) का उपयोग करके पासवर्ड को सुरक्षित करो","import os\nsalt = os.urandom(16)"
"एक की डेरिवेशन फंक्शन (Key Derivation Function) जैसे PBKDF2 का उपयोग करो","import hashlib, os\npassword = b'my-super-secret-password'\nsalt = os.urandom(16)\nkey = hashlib.pbkdf2_hmac('sha256', password, salt, 100000)"
"एक कांस्टेंट-टाइम तुलना (Constant-Time Comparison) का उपयोग करो","import hmac\n# Use hmac.compare_digest(a, b) to prevent timing attacks when comparing secret strings like API keys or password hashes."
"एक लीप ईयर (Leap Year) की गणना करने के लिए एक फंक्शन लिखो","def is_leap_year(year):\n    return year % 4 == 0 and (year % 100 != 0 or year % 400 == 0)"
"एक स्ट्रिंग के सभी सबस्ट्रिंग्स को जेनरेट करो","def get_all_substrings(s):\n    n = len(s)\n    return [s[i:j] for i in range(n) for j in range(i+1, n+1)]"
"एक 'Edit Distance' (Levenshtein Distance) एल्गोरिथ्म लिखो","def levenshtein_distance(s1, s2):\n    # ... DP solution to calculate the Levenshtein distance between two strings ..."
"एक 'Reservoir Sampling' एल्गोरिथ्म का इम्प्लीमेंटेशन","import random\ndef reservoir_sample(stream, k):\n    # ... algorithm to get a random sample of k items from a data stream of unknown size ..."
"एक 'Fisher-Yates Shuffle' एल्गोरिथ्म का इम्प्लीमेंटेशन","import random\ndef fisher_yates_shuffle(arr):\n    # ... algorithm to shuffle a list in-place efficiently and uniformly ..."
"एक M-वे ट्री (M-way Tree) का कॉन्सेप्ट","// A tree where each internal node can have M children. B-Trees are a specific type of M-way tree."
"एक B+ ट्री का कॉन्सेप्ट","// A variation of the B-tree where all data records are stored only in the leaf nodes, and leaf nodes are linked for fast sequential access."
"एक Quadtree का कॉन्सेप्ट","// A tree data structure in which each internal node has exactly four children, commonly used to partition a two-dimensional space by recursively subdividing it into four quadrants."
"एक प्रोडक्ट कार्ड कॉम्पोनेन्ट बनाओ","<div class='product-card' style='border:1px solid #ddd; width:200px; text-align:center;'><img src='product.jpg' width='100%' alt='Product'><h3 class='product-title'>Product Name</h3><p class='product-price'>$19.99</p><button>Add to Cart</button></div>"
"एक प्रोडक्ट ग्रिड लेआउट बनाओ","<div class='product-grid' style='display:grid; grid-template-columns:repeat(auto-fit, minmax(200px, 1fr)); gap:15px;'>...product cards here...</div>"
"एक 'Add to Cart' बटन बनाओ जो एक आइटम को कार्ट में जोड़े","<button onclick=""addToCart({id: 'prod123', name: 'Cool Laptop', price: 999.99})"">Add to Cart</button><script>let shoppingCart=[]; function addToCart(product){shoppingCart.push(product); console.log('Cart:', shoppingCart);}</script>"
"शॉपिंग कार्ट में आइटम्स की संख्या दिखाने वाला एक आइकन बनाओ","<div id='cart-icon-wrapper'>🛒 Cart (<span id='cart-item-count'>0</span>)</div>"
"शॉपिंग कार्ट का UI बनाओ जिसमें आइटम्स और टोटल हो","<div class='shopping-cart-summary'><h2>Your Cart</h2><ul id='cart-items-list'><li>Laptop - $999.99</li></ul><p style='font-weight:bold;'>Total: $<span id='cart-total-price'>999.99</span></p></div>"
"जावास्क्रिप्ट में शॉपिंग कार्ट के टोटल की गणना करो","function calculateCartTotal(){\n  let total = shoppingCart.reduce((sum, item) => sum + item.price, 0);\n  document.getElementById('cart-total-price').innerText = total.toFixed(2);\n}"
"एक प्रोडक्ट की मात्रा (quantity) को बदलने के लिए एक इनपुट बनाओ","<input type='number' value='1' min='1' onchange='updateProductQuantityInCart(123, this.value)'>"
"एक चेकआउट फॉर्म का ढाँचा बनाओ","<form id='checkout-form'><fieldset><legend>Shipping Address</legend><input placeholder='Full Name'>...</fieldset><fieldset><legend>Payment Details</legend><input placeholder='Card Number'>...</fieldset><button type='submit'>Place Order</button></form>"
"प्रोडक्ट्स को फ़िल्टर करने के लिए एक साइडबार बनाओ","<aside><h3>Filters</h3><div class='filter-group'><h4>Category</h4><input type='checkbox'> Electronics<br><input type='checkbox'> Books</div></aside>"
"एक प्रोडक्ट सर्च बार बनाओ","<input type='search' placeholder='Search for products...'>"
"एक प्रोडक्ट पेज पर इमेज थंबनेल गैलरी बनाओ","<img id='main-product-image' src='img-large-1.jpg' width='300'><div class='thumbnails'><img src='img-thumb-1.jpg' onclick=""document.getElementById('main-product-image').src='img-large-1.jpg'""> <img src='img-thumb-2.jpg' onclick=""document.getElementById('main-product-image').src='img-large-2.jpg'""></div>"
"एक स्टार रेटिंग डिस्प्ले कॉम्पोनेन्ट बनाओ (जैसे 4.5 स्टार्स)","<div class='star-rating' style='color:orange;'><span>★★★★</span><span style='color:grey'>★</span> (4.5)</div>"
"एक 'Sale' (बिक्री) बैज बनाओ","<div style='position:relative; display:inline-block;'><img src='product.jpg' width='150'><span style='position:absolute; top:10px; left:10px; background:red; color:white; padding:5px; border-radius:3px;'>SALE</span></div>"
"एक 'Out of Stock' (स्टॉक में नहीं) लेबल दिखाओ","<button disabled style='background:grey; color:white;'>Out of Stock</button>"
"एक इच्छा-सूची (wishlist) में जोड़ने के लिए एक बटन बनाओ","<button onclick='addToWishlist(123)'>❤️ Add to Wishlist</button>"
"प्रोडक्ट्स को कीमत के आधार पर सॉर्ट करने के लिए एक ड्रॉपडाउन","<label>Sort by:</label><select onchange='sortProductsBy(this.value)'><option value='price_asc'>Price: Low to High</option><option value='price_desc'>Price: High to Low</option></select>"
"एक प्रोडक्ट की तुलना (compare) करने के लिए चेकबॉक्स बनाओ","<label><input type='checkbox' onchange='compareProduct(123, this.checked)'> Compare</label>"
"एक 'Quick View' मोडल (modal) बनाओ","<button onclick=""showQuickViewModal(123)"">Quick View</button>"
"एक 'Related Products' (संबंधित उत्पाद) सेक्शन बनाओ","<section><h2>Related Products</h2><div class='product-grid'>...product cards...</div></section>"
"एक ई-कॉमर्स ब्रेडक्रंब (breadcrumb) नेविगेशन बनाओ","<nav aria-label='breadcrumb'>Home > Electronics > Laptops</nav>"
"एक डिस्काउंट कूपन अप्लाई करने के लिए एक इनपुट फील्ड बनाओ","<input placeholder='Enter Coupon Code'><button>Apply Coupon</button>"
"शिपिंग विकल्पों के लिए रेडियो बटन बनाओ","<div><label><input type='radio' name='shipping_option'> Standard Shipping ($5.00)</label></div><div><label><input type='radio' name='shipping_option'> Express Shipping ($15.00)</label></div>"
"एक प्रोडक्ट ज़ूम इफ़ेक्ट बनाओ जो होवर पर काम करे","<style>.zoom-image-container:hover img{transform:scale(1.2);}</style><div class='zoom-image-container' style='width:200px; overflow:hidden;'><img src='product.jpg' style='transition:transform 0.3s;'></div>"
"एक 'Recently Viewed' (हाल ही में देखे गए) प्रोडक्ट्स का सेक्शन बनाओ","<section><h2>Your Recently Viewed Items</h2><div id='recently-viewed-items-container'></div></section>"
"एक प्रोडक्ट के लिए कस्टमर रिव्यु (review) सेक्शन बनाओ","<div class='customer-reviews'><h3>Customer Reviews (4.5/5)</h3><div class='review'><strong>Amit</strong> - ★★★★☆ - <p>Great product!</p></div></div>"
"एक रिव्यु सबमिट करने के लिए एक फॉर्म बनाओ","<form><label>Your Rating:</label><select><option>1</option><option>2</option>...</select><br><label>Your Review:</label><textarea></textarea><br><button>Submit Review</button></form>"
"एक 'Best Sellers' (सबसे ज़्यादा बिकने वाले) सेक्शन बनाओ","<section><h2>Our Best Sellers</h2>...</section>"
"एक 'New Arrivals' (नए आगमन) सेक्शन बनाओ","<section><h2>New Arrivals</h2>...</section>"
"एक प्रोडक्ट के विभिन्न रंगों (color swatches) को दिखाओ","<div class='color-swatches'><span style='background:red; width:25px; height:25px; display:inline-block; border:1px solid #ccc; cursor:pointer;'></span> <span style='background:blue; ...'></span></div>"
"प्रोडक्ट के विभिन्न साइज़ चुनने के लिए बटन बनाओ","<div class='size-selector'><button>S</button> <button>M</button> <button>L</button> <button>XL</button></div>"
"एक 'Add to Cart' कन्फर्मेशन मैसेज दिखाओ","<div id='add-to-cart-confirmation' style='display:none; color:green;'>Product added to cart successfully!</div>"
"शॉपिंग कार्ट से एक आइटम को हटाने के लिए एक बटन","<li id='cart-item-123'>Laptop <button onclick=""document.getElementById('cart-item-123').remove()"">Remove</button></li>"
"चेकआउट पेज पर आर्डर का सारांश (order summary) दिखाओ","<div class='order-summary'><h3>Order Summary</h3><p>Subtotal: $999.99</p><p>Shipping: $5.00</p><strong>Total: $1004.99</strong></div>"
"एक 'Notify Me' फॉर्म बनाओ जब प्रोडक्ट स्टॉक में न हो","<p>This item is out of stock.</p><form><label>Enter your email to be notified:</label><input type='email'><button>Notify Me</button></form>"
"एक 'Size Chart' (साइज़ चार्ट) लिंक बनाओ जो एक मोडल खोले","<a href='#' onclick=""showSizeChartModal()"">View Size Chart</a>"
"एक 'Gift Wrap' (गिफ्ट रैप) विकल्प के लिए एक चेकबॉक्स","<label><input type='checkbox'> Add gift wrap (+$2.00)</label>"
"एक प्रोडक्ट की डिलीवरी की अनुमानित तारीख दिखाओ","<p style='color:green;'>Estimated delivery: October 15, 2025</p>"
"सोशल मीडिया पर एक प्रोडक्ट को शेयर करने के लिए बटन","<button>Share on Facebook</button> <button>Share on Twitter</button>"
"एक 'Customers who bought this also bought' सेक्शन","<section><h2>Customers also bought</h2>...</section>"
"एक प्रोडक्ट के लिए FAQ (प्रश्न-उत्तर) सेक्शन","<section><h2>Questions & Answers</h2><details><summary>Is this waterproof?</summary><p>No, it is water-resistant.</p></details></section>"
"एक 'Terms and Conditions' चेकबॉक्स जो चेकआउट पर ज़रूरी हो","<label><input type='checkbox' required> I have read and agree to the Terms and Conditions.</label>"
"पेमेंट मेथड (Credit Card, PayPal) चुनने के लिए आइकन","<div><img src='visa_icon.png' alt='Visa'> <img src='mastercard_icon.png' alt='Mastercard'> <img src='paypal_icon.png' alt='PayPal'></div>"
"एक 'Track Order' पेज का UI बनाओ","<form><label>Enter your Order ID:</label><input type='text' placeholder='eg. 12345'><button>Track Order</button></form>"
"एक 'My Account' पेज का डैशबोर्ड UI","<div class='account-dashboard'><h3>My Account</h3><ul><li><a href='/orders'>Order History</a></li><li><a href='/profile'>My Profile</a></li><li><a href='/logout'>Logout</a></li></ul></div>"
"एक 'Order History' टेबल बनाओ","<table border='1'><thead><tr><th>Order ID</th><th>Date</th><th>Total</th><th>Status</th></tr></thead><tbody><tr><td>#123</td><td>2025-10-01</td><td>$50</td><td>Shipped</td></tr></tbody></table>"
"एक 'Write a Review' बटन जो एक फॉर्म खोले","<button>Write a Review for this product</button>"
"एक इनवॉइस (invoice) का HTML टेम्पलेट बनाओ","<div class='invoice-box' style='border:1px solid; padding:20px;'><h1>Invoice</h1>...</div>"
"एक 'Abandoned Cart' ईमेल का कॉन्सेप्ट","// An automated email sent to a user who has added items to their shopping cart but did not complete the purchase, reminding them of their items."
"अपसेल (Upsell) और क्रॉस-सेल (Cross-sell) का कॉन्सेप्ट","// Upsell: Encouraging a customer to buy a more expensive, upgraded version of a product. Cross-sell: Encouraging a customer to buy related or complementary items."
"पेज लोड होने पर सभी ब्लॉग पोस्ट्स को फेच करो और दिखाओ","""<div id='posts-container'></div>\n<script>\nwindow.addEventListener('DOMContentLoaded', () => {\n  fetch('/api/posts').then(res => res.json()).then(posts => {\n    const container = document.getElementById('posts-container');\n    posts.forEach(post => {\n      container.innerHTML += `<h2><a href='#' onclick='fetchPost(${post.id})'>${post.title}</a></h2>`;\n    });\n  });\n});\n</script>"""
"एक लिंक पर क्लिक करके एक सिंगल पोस्ट का कंटेंट फेच करो और दिखाओ","""<div id='single-post-view'></div>\n<script>\nfunction fetchPost(id) {\n  fetch(`/api/posts/${id}`).then(res => res.json()).then(post => {\n    document.getElementById('single-post-view').innerHTML = `<h1>${post.title}</h1><p>${post.content}</p>`;\n  });\n}\n</script>"""
"एक नया ब्लॉग पोस्ट बनाने के लिए एक HTML फॉर्म बनाओ","""<form id='new-post-form'>\n  <input id='title-input' placeholder='Title' required>\n  <br><br>\n  <textarea id='content-input' placeholder='Content' required></textarea>\n  <br><br>\n  <button type='submit'>Create Post</button>\n</form>"""
"AJAX का उपयोग करके नया पोस्ट बनाने वाले फॉर्म को सबमिट करो","""<script>\ndocument.getElementById('new-post-form').addEventListener('submit', event => {\n  event.preventDefault();\n  const title = document.getElementById('title-input').value;\n  const content = document.getElementById('content-input').value;\n  fetch('/api/posts', {\n    method: 'POST',\n    headers: {'Content-Type': 'application/json'},\n    body: JSON.stringify({title: title, content: content})\n  }).then(res => res.json()).then(data => console.log('New post created with ID:', data.id));\n});\n</script>"""
"एक पोस्ट को डिलीट करने के लिए एक बटन बनाओ","""<button onclick=""deletePost(5)"">Delete Post 5</button>\n<script>\nfunction deletePost(id) {\n  if(confirm('Are you sure you want to delete this post?')){\n    fetch(`/api/posts/${id}`, { method: 'DELETE' }).then(() => alert('Post deleted'));\n  }\n}\n</script>"""
"एक पोस्ट को एडिट करने के लिए एक फॉर्म दिखाओ","""<button onclick=""showEditForm(5)"">Edit Post 5</button>\n<div id='edit-form-container'></div>\n<script>\nfunction showEditForm(id) {\n    // fetch post data and populate an edit form in the container\n}\n</script>"""
"जावास्क्रिप्ट से एक डायनामिक सर्च फंक्शन बनाओ","""<input placeholder='Search blog posts...' onkeyup=""fetch('/api/search?q='+this.value).then(res => res.json()).then(results => {\n  // ... code to display search results on the page ...\n});"">"""
"पेजिनेशन बटन्स (Next/Previous) के लिए जावास्क्रिप्ट लिखो","""let currentPage = 1;\nfunction loadPostsForPage(page) {\n  fetch(`/api/posts-paginated?page=${page}`).then(res => res.json()).then(data => {\n    // ... display posts for the given page ...\n    currentPage = page;\n  });\n}"""
"एक 'Load More' बटन बनाओ जो और पोस्ट्स लोड करे","""<button id='load-more-btn' onclick=""loadPostsForPage(currentPage + 1)"">Load More</button>"""
"एक पोस्ट पर कमेंट करने के लिए एक फॉर्म बनाओ","""<form onsubmit=""addCommentToPost(5, this.comment.value); return false;"">\n  <input name='comment' placeholder='Write a comment...'>\n  <button type='submit'>Submit Comment</button>\n</form>"""
"एक पोस्ट के सभी कमेंट्स को फेच करो और दिखाओ","""<ul id='comments-list-for-post-5'></ul>\n<script>\nfetch('/api/posts/5/comments').then(res => res.json()).then(comments => {\n  const list = document.getElementById('comments-list-for-post-5');\n  comments.forEach(comment => { list.innerHTML += `<li>${comment.text}</li>`; });\n});\n</script>"""
"एक 'Like' बटन बनाओ जो API को कॉल करे और लाइक काउंट अपडेट करे","""<p>Likes: <span id='like-count-for-post-5'>10</span></p>\n<button onclick=""fetch('/api/posts/5/like', {method:'POST'}).then(res=>res.json()).then(data=>document.getElementById('like-count-for-post-5').innerText=data.likes);"">👍 Like</button>"""
"यूज़र रजिस्ट्रेशन के लिए एक AJAX फॉर्म बनाओ","""<form id='registration-form'>...</form>\n<script>// JavaScript to submit registration form data as a JSON object via a fetch POST request</script>"""
"यूज़र लॉगइन के लिए एक AJAX फॉर्म बनाओ और JWT टोकन को localStorage में सेव करो","""<script>\n// ... inside form submit event listener ...\nfetch('/api/login', ...).then(res => res.json()).then(data => {\n  if (data.token) {\n    localStorage.setItem('jwt_token', data.token);\n    window.location.href = '/dashboard'; // redirect to dashboard\n  }\n});\n</script>"""
"हर प्रोटेक्टेड API रिक्वेस्ट के साथ JWT टोकन भेजो","""<script>\nconst token = localStorage.getItem('jwt_token');\nfetch('/api/protected-route', { \n    headers: {\n        'Authorization': `Bearer ${token}`\n    }\n});\n</script>"""
"एक लॉगआउट बटन बनाओ जो JWT टोकन को localStorage से हटाए","""<button onclick=""localStorage.removeItem('jwt_token'); window.location.href = '/login';"">Logout</button>"""
"Markdown कंटेंट को HTML में बदलने के लिए एक लाइब्रेरी (जैसे Showdown.js) का उपयोग करो","""<script src='https://cdnjs.cloudflare.com/ajax/libs/showdown/2.1.0/showdown.min.js'></script>\n<script>\n  const converter = new showdown.Converter();\n  const markdownText = '# Hello\\n**This is bold.**';\n  const html = converter.makeHtml(markdownText);\n</script>"""
"API से मिले Markdown कंटेंट को पेज पर रेंडर करो","""fetch('/api/posts/1').then(res => res.json()).then(post => {\n  const converter = new showdown.Converter();\n  const htmlContent = converter.makeHtml(post.content);\n  document.getElementById('post-content-div').innerHTML = htmlContent;\n});"""
"तारीख को एक रीडेबल फॉर्मेट में दिखाने के लिए एक जावास्क्रिप्ट फंक्शन","""function formatReadableDate(isoString) {\n  return new Date(isoString).toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' });\n}"""
"एक लोडिंग स्पिनर दिखाओ जब API कॉल चल रही हो","""function fetchDataWithLoader(){\n  document.getElementById('loader-spinner').style.display = 'block';\n  fetch('...').finally(() => {\n    document.getElementById('loader-spinner').style.display = 'none';\n  });\n}"""
"API से एरर आने पर यूज़र को एक एरर मैसेज दिखाओ","""<p id='error-display-area' style='color:red;'></p>\n<script>\nfetch('/api/invalid-endpoint').catch(error => {\n  document.getElementById('error-display-area').innerText = 'An error occurred while loading data.';\n});\n</script>"""
"एक 'Single Page Application' (SPA) का बेसिक राउटर बनाओ","""<script>\nwindow.onhashchange = function() {\n  const page = window.location.hash.substring(1);\n  // Logic to show content based on the 'page' variable (e.g., #/about, #/contact)\n}\n</script>"""
"वेबसाइट में एक सिंपल डार्क मोड टॉगल बनाओ","""<button onclick=""document.body.classList.toggle('dark-theme')"">Toggle Dark Mode</button>\n<style>.dark-mode { background: #333; color: white; }</style>"""
"एक ब्लॉग पोस्ट के लिए 'टैग्स' की लिस्ट दिखाओ","""// Assuming API returns post.tags = [{name:'tech'}, {name:'python'}]\nconst tagsHtml = post.tags.map(tag => `<span class='tag'>${tag.name}</span>`).join(' ');"""
"एक ब्लॉग पोस्ट के लेखक का नाम दिखाओ","""// Assuming API returns post.author = {username: 'Amit'}\ndocument.getElementById('author-name').innerText = `By ${post.author.username}`;"""
"एक नया पोस्ट बनाने के बाद पेज को री-रेंडर करो (बिना रीलोड किए)","""fetch('/api/posts', {method:'POST',...}).then(() => {\n  // Clear the form and call the function that fetches and renders all posts again\n  fetchAllPosts();\n});"""
"URL से पोस्ट ID निकालो और उस पोस्ट को फेच करो","""<script>\nconst pathParts = window.location.pathname.split('/');\nconst postId = pathParts[pathParts.length - 1];\nif(postId && !isNaN(postId)) {\n  fetchPost(postId);\n}\n</script>"""
"WebSocket का उपयोग करके रियल-टाइम कमेंट्स दिखाओ","""<script>\nconst socket = io(); // from socket.io.js\nsocket.on('new_comment_for_post_5', function(comment) {\n  // Add the new comment to the comments list dynamically without reloading the page\n});\n</script>"""
"WebSocket से कनेक्ट करने के लिए जावास्क्रिप्ट कोड","""<script src='https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.0.1/socket.io.js'></script>\n<script>var socket = io.connect('http://' + document.domain + ':' + location.port);</script>"""
"यूज़र को एक पोस्ट एडिट करने के लिए एक इन-प्लेस एडिटर दो (`contenteditable`)","""<div id='content-div' ondblclick=""this.contentEditable=true; this.focus();"">Double click to edit this text.</div>"""
"फ्रंटएंड पर फॉर्म वैलिडेशन (ईमेल) करो","""<form onsubmit=""const email = this.email.value; if(!email.includes('@') || !email.includes('.')){alert('Please enter a valid email address'); return false;}""><input name='email' type='email'></form>"""
"API से मिले पेजिनेशन डेटा को हैंडल करो और बटन को डिसेबल करो","""// API returns { 'posts': [...], 'has_next': true, 'next_page': 3 }\nif (!data.has_next) {\n  document.getElementById('load-more-button').disabled = true;\n}"""
"एक इमेज अपलोड फॉर्म बनाओ जो `FormData` का उपयोग करे","""<input type='file' id='image-file-input'>\n<script>\nfunction uploadImage(){\n  const fileInput = document.getElementById('image-file-input');\n  if (fileInput.files.length > 0) {\n      const formData = new FormData();\n      formData.append('image', fileInput.files[0]);\n      fetch('/api/upload', {method:'POST', body:formData});\n  }\n}\n</script>"""
"एक 'infinite scroll' फीचर बनाओ","""<script>\nconst contentEl = document.getElementById('content');\nwindow.addEventListener('scroll', () => {\n  const { scrollTop, scrollHeight, clientHeight } = document.documentElement;\n  if (scrollTop + clientHeight >= scrollHeight - 5) {\n    // Load more posts when user is near the bottom\n  }\n});\n</script>"""
"एक 'debounce' फंक्शन का उपयोग करके सर्च API कॉल्स को ऑप्टिमाइज़ करो","""<script>\nfunction debounce(func, delay=300) {\n  let timeout;\n  return function(...args) {\n    clearTimeout(timeout);\n    timeout = setTimeout(() => { func.apply(this, args); }, delay);\n  };\n}\nconst efficientSearch = debounce(searchTerm => fetch('/api/search?q='+searchTerm));\n</script>"""
"एक 'throttle' फंक्शन का उपयोग करके स्क्रॉल इवेंट्स को ऑप्टिमाइज़ करो","""<script>\nfunction throttle(func, limit) { \n  let inThrottle;\n  return function() {\n    if (!inThrottle) {\n      func.apply(this, arguments);\n      inThrottle = true;\n      setTimeout(() => inThrottle = false, limit);\n    }\n  }\n}\nwindow.addEventListener('scroll', throttle(() => console.log('Scrolled!'), 100));\n</script>"""
"एक ब्राउज़र नोटिफिकेशन (Notification API) भेजो","""<button onclick=""Notification.requestPermission().then(permission => { if (permission === 'granted') { new Notification('New Blog Post Available!'); } });"">Enable Notifications</button>"""
"एक पोस्ट को शेयर करने के लिए Web Share API का उपयोग करो","""<button onclick=""if(navigator.share){navigator.share({title: 'My Awesome Blog Post', url: '/posts/1'})} else {alert('Share not supported')}"">Share Post</button>"""
"फ्रंटएंड पर एक JSON ऑब्जेक्ट को सुंदर तरीके से दिखाओ","""<pre id='json-display-output'></pre>\n<script>\nconst myJsonObject = { id: 1, name: 'Amit', is_active: true };\ndocument.getElementById('json-display-output').textContent = JSON.stringify(myJsonObject, null, 2);\n</script>"""
"एक पोस्ट को localStorage का उपयोग करके 'बुकमार्क' करो","""<button onclick=""localStorage.setItem('bookmarked_post_1', 'true')"">Bookmark Post 1</button>"""
"एक लोडिंग स्केलेटन (skeleton) स्क्रीन का HTML/CSS बनाओ","""<style>@keyframes pulse{...} .skeleton-box{animation: pulse 1.5s infinite; background:#e0e0e0;}</style><div class='post-skeleton'><div class='skeleton-box' style='height:150px;'></div><div class='skeleton-box' style='height:20px; margin-top:10px;'></div></div>"""
"एक पोस्ट के 'पढ़ने का समय' (reading time) कैलकुलेट करो","""<script>\nfunction calculateReadingTime(text) {\n  const wordsPerMinute = 225;\n  const wordCount = text.trim().split(/\s+/).length;\n  const readingTime = Math.ceil(wordCount / wordsPerMinute);\n  return `${readingTime} min read`;\n}\n</script>"""
"एक ब्लॉग पोस्ट के लिए एक 'Table of Contents' डायनामिक रूप से जेनरेट करो","""<nav><h4>Contents</h4><ul id='table-of-contents'></ul></nav>\n<script>\ndocument.querySelectorAll('main h2').forEach(heading => {\n  const id = heading.textContent.toLowerCase().replace(/ /g, '-');\n  heading.id = id;\n  document.getElementById('table-of-contents').innerHTML += `<li><a href='#${id}'>${heading.textContent}</a></li>`;\n});\n</script>"""
"यूज़र से एक कन्फर्मेशन डायलॉग (dialog) दिखाओ","""<button onclick=""if(confirm('Are you absolutely sure you want to delete this?')){ console.log('Deleting...'); }"">Delete Item</button>"""
"Fetch API में `AbortController` का उपयोग करके एक रिक्वेस्ट को कैंसिल करो","""<script>\nconst controller = new AbortController();\nconst signal = controller.signal;\nfetch('...', {signal});\n\n// To cancel the request, for example after a timeout:\n// controller.abort();\n</script>"""
"एक नया पोस्ट बनाने के बाद यूज़र को उस पोस्ट के पेज पर रीडायरेक्ट करो","""fetch('/api/posts', {method:'POST',...}).then(res => res.json()).then(data => {\n  // Redirect to the new post's page\n  window.location.href = `/posts/${data.id}`;\n});"""
"एक API कॉल के लिए एक टाइमआउट सेट करो","""<script>\nconst controller = new AbortController();\nconst timeoutId = setTimeout(() => controller.abort(), 5000); // 5 second timeout\n\nfetch('/api/slow-endpoint', {signal: controller.signal})\n  .catch(error => { if (error.name === 'AbortError') console.error('Request timed out!'); })\n  .finally(() => clearTimeout(timeoutId));\n</script>"""
"एक सिंपल WYSIWYG एडिटर का ढाँचा (Bold, Italic)","""<div id='editor' contenteditable='true' style='border:1px solid #ccc; height:150px; padding:5px;'>Type your text here...</div>\n<button onclick=""document.execCommand('bold')""><b>B</b></button>\n<button onclick=""document.execCommand('italic')""><i>I</i></button>"""
"एक ब्लॉग के लिए User और Post डेटाबेस मॉडल बनाओ","""# In models.py\nfrom flask_sqlalchemy import SQLAlchemy\ndb = SQLAlchemy()\n\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    username = db.Column(db.String(80), unique=True, nullable=False)\n\nclass Post(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    title = db.Column(db.String(120), nullable=False)\n    content = db.Column(db.Text, nullable=False)\n    author_id = db.Column(db.Integer, db.ForeignKey('user.id'))"""
"Flask ऐप को SQLAlchemy डेटाबेस के साथ कॉन्फ़िगर करो","""# In app.py\nfrom flask import Flask\nfrom models import db\n\napp = Flask(__name__)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///blog.db'\ndb.init_app(app)"""
"सभी ब्लॉग पोस्ट्स को लौटाने वाला एक API एंडपॉइंट बनाओ","""@app.route('/api/posts', methods=['GET'])\ndef get_all_posts():\n    posts = Post.query.all()\n    return jsonify([{'id': p.id, 'title': p.title} for p in posts])"""
"एक सिंगल ब्लॉग पोस्ट को ID से लौटाने वाला API बनाओ","""@app.route('/api/posts/<int:post_id>', methods=['GET'])\ndef get_post(post_id):\n    post = Post.query.get_or_404(post_id)\n    return jsonify({'title': post.title, 'content': post.content})"""
"एक नया ब्लॉग पोस्ट बनाने के लिए एक API एंडपॉइंट बनाओ","""@app.route('/api/posts', methods=['POST'])\ndef create_post():\n    data = request.json\n    new_post = Post(title=data['title'], content=data['content'])\n    db.session.add(new_post)\n    db.session.commit()\n    return jsonify({'id': new_post.id}), 201"""
"एक ब्लॉग पोस्ट को अपडेट करने के लिए एक API एंडपॉइंट बनाओ","""@app.route('/api/posts/<int:post_id>', methods=['PUT'])\ndef update_post(post_id):\n    post = Post.query.get_or_404(post_id)\n    data = request.json\n    post.title = data.get('title', post.title)\n    post.content = data.get('content', post.content)\n    db.session.commit()\n    return jsonify({'message': 'Post updated'})"""
"एक ब्लॉग पोस्ट को डिलीट करने के लिए एक API एंडपॉइंट बनाओ","""@app.route('/api/posts/<int:post_id>', methods=['DELETE'])\ndef delete_post(post_id):\n    post = Post.query.get_or_404(post_id)\n    db.session.delete(post)\n    db.session.commit()\n    return jsonify({'message': 'Post deleted'})"""
"Flask-Migrate का उपयोग करके डेटाबेस माइग्रेशन सेटअप करो","""from flask_migrate import Migrate\nmigrate = Migrate(app, db)"""
"Alembic माइग्रेशन स्क्रिप्ट बनाओ","flask db migrate -m 'Initial migration.'"
"Alembic माइग्रेशन को डेटाबेस पर अप्लाई करो","flask db upgrade"
"एक Flask कमांड बनाओ जो डेटाबेस को इनिशियलाइज़ करे","""@app.cli.command('init-db')\ndef init_db_command():\n    db.create_all()\n    print('Initialized the database.')"""
"ब्लॉग के लिए एक 'Comment' मॉडल बनाओ","""class Comment(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    text = db.Column(db.String(200), nullable=False)\n    post_id = db.Column(db.Integer, db.ForeignKey('post.id'))"""
"एक पोस्ट के सभी कमेंट्स को लौटाने वाला API बनाओ","""@app.route('/api/posts/<int:post_id>/comments')\ndef get_comments(post_id):\n    comments = Comment.query.filter_by(post_id=post_id).all()\n    return jsonify([{'text': c.text} for c in comments])"""
"एक पोस्ट पर नया कमेंट करने के लिए API बनाओ","""@app.route('/api/posts/<int:post_id>/comments', methods=['POST'])\ndef add_comment(post_id):\n    new_comment = Comment(text=request.json['text'], post_id=post_id)\n    db.session.add(new_comment)\n    db.session.commit()\n    return jsonify({'id': new_comment.id})"""
"ब्लॉग पोस्ट मॉडल में एक 'created_at' फील्ड जोड़ो","""created_at = db.Column(db.DateTime, default=datetime.utcnow)"""
"पोस्ट्स को लेटेस्ट पहले के क्रम में क्वेरी करो","""posts = Post.query.order_by(Post.created_at.desc()).all()"""
"एक API बनाओ जो पोस्ट्स को पेजिनेट (paginate) करे","""@app.route('/api/posts-paginated')\ndef get_paginated_posts():\n    page = request.args.get('page', 1, type=int)\n    pagination = Post.query.paginate(page=page, per_page=5)\n    return jsonify([...]) # Return paginated data"""
"एक यूज़र रजिस्ट्रेशन के लिए API एंडपॉइंट","""@app.route('/api/register', methods=['POST'])\ndef register():\n    # ... create user and hash password ...\n    return jsonify({'message': 'User created'})"""
"एक यूज़र लॉगइन के लिए API एंडपॉइंट जो JWT टोकन लौटाए","""@app.route('/api/login', methods=['POST'])\ndef login():\n    # ... check credentials ...\n    # token = create_jwt_token(...)\n    return jsonify({'token': token})"""
"एक प्रोटेक्टेड API रूट बनाओ जो JWT टोकन की जाँच करे","""@app.route('/api/protected')\n@jwt_required()\ndef protected():\n    return jsonify({'message': 'This is a protected route'})"""
"ब्लॉग के लिए एक 'Tag' मॉडल बनाओ (Many-to-Many)","""tags = db.Table('tags', ...)\nclass Post(db.Model):\n    tags = db.relationship('Tag', secondary=tags, backref='posts')"""
"एक पोस्ट को उसके टैग्स के साथ लौटाने वाला API","""@app.route('/api/posts/<int:id>')\ndef get_post_with_tags(id):\n    post = Post.query.get(id)\n    return jsonify({'title': post.title, 'tags': [tag.name for tag in post.tags]})"""
"एक सर्च API बनाओ जो टाइटल और कंटेंट में खोजे","""@app.route('/api/search')\ndef search():\n    query = request.args.get('q')\n    results = Post.query.filter(Post.title.contains(query) | Post.content.contains(query)).all()\n    return jsonify([...])"""
"Flask-CORS का उपयोग करके API पर CORS इनेबल करो","""from flask_cors import CORS\nCORS(app, resources={r'/api/*': {'origins': '*'}})"""
"Flask-SQLAlchemy में रिलेशनशिप के लिए `back_populates` का उपयोग करो","""class User(db.Model):\n    posts = db.relationship('Post', back_populates='author')\n\nclass Post(db.Model):\n    author = db.relationship('User', back_populates='posts')"""
"एक ब्लॉग पोस्ट पर 'लाइक' करने के लिए API","""@app.route('/api/posts/<int:id>/like', methods=['POST'])\ndef like_post(id):\n    post = Post.query.get(id)\n    post.likes += 1\n    db.session.commit()\n    return jsonify({'likes': post.likes})"""
"ब्लॉग पोस्ट मॉडल में `likes` कॉलम जोड़ो","""likes = db.Column(db.Integer, default=0)"""
"ब्लॉग पोस्ट्स को लाइक्स की संख्या के आधार पर सॉर्ट करो","""popular_posts = Post.query.order_by(Post.likes.desc()).limit(5).all()"""
"Flask में यूनिट टेस्ट के लिए एक टेस्ट डेटाबेस कॉन्फ़िगर करो","""app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///:memory:'"""
"एक API एंडपॉइंट का pytest से टेस्ट लिखो","""def test_get_posts(client):\n    response = client.get('/api/posts')\n    assert response.status_code == 200"""
"ब्लूप्रिंट का उपयोग करके एडमिन सेक्शन बनाओ","""admin_bp = Blueprint('admin', __name__, url_prefix='/admin')"""
"एक API बनाओ जो YAML डेटा लौटाए","""import yaml\n@app.route('/api/data.yaml')\ndef get_yaml():\n    data = {'a': 1}\n    return Response(yaml.dump(data), mimetype='text/yaml')"""
"Flask में एक कस्टम CLI कमांड बनाओ","""@app.cli.command('create-user')\n@click.argument('name')\ndef create_user(name):\n    # ... logic to create user ..."""
"SQLAlchemy में eager लोडिंग का उपयोग करो","""posts = Post.query.options(db.joinedload(Post.author)).all()"""
"SQLAlchemy में lazy लोडिंग का उपयोग करो","""# This is the default behavior\npost = Post.query.get(1)\n# The author is fetched from the DB only when you access it:\nprint(post.author.name)"""
"एक API बनाओ जो एक फाइल डाउनलोड करवाए","""from flask import send_file\n@app.route('/download')\ndef download_file():\n    return send_file('my_file.zip', as_attachment=True)"""
"अपने Flask ऐप के लिए एक `config.py` फाइल बनाओ","""# config.py\nclass Config:\n    SECRET_KEY = os.environ.get('SECRET_KEY')\n    SQLALCHEMY_DATABASE_URI = os.environ.get('DATABASE_URI')"""
"फैक्ट्री पैटर्न का उपयोग करके Flask ऐप बनाओ","""def create_app(config_class=Config):\n    app = Flask(__name__)\n    app.config.from_object(config_class)\n    db.init_app(app)\n    return app"""
"ब्लॉग पोस्ट में Markdown कंटेंट को सपोर्ट करो","""import markdown\n@app.route('/posts/<int:id>')\ndef show_post(id):\n    post = Post.query.get(id)\n    post.content_html = markdown.markdown(post.content)\n    return render_template('post.html', post=post)"""
"एक API बनाओ जो इमेज अपलोड को हैंडल करे","""@app.route('/api/upload', methods=['POST'])\ndef upload_image():\n    file = request.files['image']\n    # ... save file securely ...\n    return jsonify({'url': file_url})"""
"ब्लॉग पोस्ट मॉडल में एक 'status' फील्ड (draft, published) जोड़ो","""status = db.Column(db.String(10), default='draft', nullable=False)"""
"सिर्फ पब्लिश हुए पोस्ट्स को दिखाने वाला एक API बनाओ","""@app.route('/api/published-posts')\ndef get_published_posts():\n    posts = Post.query.filter_by(status='published').all()\n    return jsonify([...])"""
"SQLAlchemy में एक हाइब्रिड प्रॉपर्टी बनाओ","""from sqlalchemy.ext.hybrid import hybrid_property\nclass User(db.Model):\n    # ... first_name, last_name columns ...\n    @hybrid_property\n    def full_name(self):\n        return self.first_name + ' ' + self.last_name"""
"API रिस्पॉन्स के लिए एक कस्टम JSON एन्कोडर बनाओ","""import json\nfrom datetime import date\nclass CustomJSONEncoder(json.JSONEncoder):\n    def default(self, obj):\n        if isinstance(obj, date):\n            return obj.isoformat()\n        return super().default(obj)"""
"Flask में एक WebSocket का उपयोग करके रियल-टाइम नोटिफिकेशन भेजो","""# Using Flask-SocketIO\n@socketio.on('new_post_created')\ndef handle_new_post_notification(data):\n    emit('notification', {'message': 'A new post was created!'}, broadcast=True)"""
"पाइथन में UUID का उपयोग करके एक यूनिक आईडी जेनरेट करो","""import uuid\npublic_id = str(uuid.uuid4())"""
"ब्लॉग पोस्ट मॉडल में एक स्लग (slug) फील्ड जोड़ो","""slug = db.Column(db.String(120), unique=True, nullable=False, index=True)"""
"एक फंक्शन बनाओ जो टाइटल से एक स्लग जेनरेट करे","""import re\ndef slugify(text):\n    text = text.lower().strip()\n    text = re.sub(r'[^\\w\\s-]', '', text)\n    text = re.sub(r'[\\s_-]+', '-', text)\n    return text"""
"एक API बनाओ जो XML डेटा लौटाए (Jinja2 टेम्पलेट का उपयोग करके)","""@app.route('/feed.xml')\ndef get_xml_feed():\n    # ... get posts from db ...\n    return Response(render_template('feed.xml', posts=posts), mimetype='application/xml')"""
"pytest का उपयोग करके एक सिंपल टेस्ट फंक्शन लिखो","""# In test_math.py:\ndef add(x, y):\n    return x + y\n\ndef test_addition():\n    assert add(1, 2) == 3"""
"pytest को कमांड-लाइन से चलाओ","pytest"
"unittest का उपयोग करके एक टेस्ट क्लास बनाओ","""import unittest\n\ndef my_sum(a, b):\n    return a + b\n\nclass TestSum(unittest.TestCase):\n    def test_sum_integers(self):\n        self.assertEqual(my_sum(1, 2), 3, ""Should be 3"")"""
"unittest को चलाने के लिए कोड लिखो","""if __name__ == '__main__':\n    unittest.main()"""
"एक टेस्ट जो एरर को एक्सपेक्ट करे (pytest)","""import pytest\ndef test_zero_division():\n    with pytest.raises(ZeroDivisionError):\n        result = 1 / 0"""
"एक टेस्ट जो एरर को एक्सपेक्ट करे (unittest)","""def test_divide_by_zero(self):\n    with self.assertRaises(ZeroDivisionError):\n        result = 1 / 0"""
"pytest में एक 'fixture' बनाओ","""import pytest\n@pytest.fixture\ndef sample_data():\n    return [1, 2, 3, 4, 5]"""
"pytest में एक 'fixture' का उपयोग करो","""def test_sample_data_length(sample_data):\n    assert len(sample_data) == 5"""
"pytest में टेस्ट को पैरामीटराइज़ (parametrize) करो","""import pytest\n@pytest.mark.parametrize('test_input, expected_output', [('3+5', 8), ('2*4', 8), ('6-2', 4)])\ndef test_string_evaluation(test_input, expected_output):\n    assert eval(test_input) == expected_output"""
"एक टेस्ट को 'skip' करो","@pytest.mark.skip(reason='This feature is not yet implemented.')\ndef test_new_feature():\n    pass"
"एक टेस्ट को 'xfail' (expected to fail) मार्क करो","@pytest.mark.xfail\ndef test_failing_function():\n    assert 1 == 2"
"मॉक (Mock) ऑब्जेक्ट बनाने के लिए `unittest.mock` का उपयोग करो","""from unittest.mock import Mock\n\n# Create a mock object that simulates an API call\nmock_api = Mock()\nmock_api.get_user.return_value = {'name': 'Amit'}"""
"एक mock ऑब्जेक्ट के रिटर्न वैल्यू को सेट करो","""mock_object = Mock()\nmock_object.some_method.return_value = 'mocked response'"""
"एक mock ऑब्जेक्ट को कितनी बार कॉल किया गया, यह चेक करो","""mock_object.some_method()\nmock_object.some_method.assert_called_once()"""
"`patch` का उपयोग करके एक फंक्शन को मॉक करो","""from unittest.mock import patch\n\n@patch('my_module.my_external_call')\ndef test_something_with_mock(mock_external_call):\n    mock_external_call.return_value = True\n    # ... rest of the test ..."""
"जावास्क्रिप्ट में Jest को इनस्टॉल करो","npm install --save-dev jest"
"Jest का उपयोग करके एक सिंपल टेस्ट लिखो","""// In sum.js:\nfunction sum(a, b) { return a + b; }\nmodule.exports = sum;\n\n// In sum.test.js:\nconst sum = require('./sum');\ntest('adds 1 + 2 to equal 3', () => {\n  expect(sum(1, 2)).toBe(3);\n});"""
"Jest को चलाने के लिए `package.json` में एक स्क्रिप्ट जोड़ो","""// In package.json:\n""scripts"": {\n  ""test"": ""jest""\n}"""
"Jest में `describe` और `it` का उपयोग करो","""describe('sum function tests', () => {\n  it('should add positive numbers correctly', () => {\n    expect(sum(1, 1)).toBe(2);\n  });\n  it('should add negative numbers correctly', () => {\n    expect(sum(-1, -1)).toBe(-2);\n  });\n});"""
"Jest में एक mock फंक्शन बनाओ","const mock_function = jest.fn();\nmock_function('hello');\nexpect(mock_function).toHaveBeenCalledWith('hello');"
"Jest में एक एसिंक्रोनस (async) कोड को टेस्ट करो","""test('the fetched data should be correct', async () => {\n  const data = await fetchData(); // Assuming fetchData returns a promise\n  expect(data).toBe('some_expected_data');\n});"""
"Jest में DOM मैनिपुलेशन को टेस्ट करो (jsdom)","""// Jest uses jsdom by default to simulate a browser environment\ndocument.body.innerHTML = '<div><button id=""my-btn"">Click</button></div>';\nconst button = document.getElementById('my-btn');\nexpect(button.textContent).toBe('Click');"""
"Cypress का उपयोग करके एक एंड-टू-एंड (E2E) टेस्ट लिखो","""describe('My Application', () => {\n  it('successfully loads the home page', () => {\n    cy.visit('http://localhost:3000') // Visit the app\n    cy.contains('Welcome to my app') // Check for text\n  })\n})"""
"यूनिट टेस्ट, इंटीग्रेशन टेस्ट, और एंड-टू-एंड टेस्ट में क्या अंतर है","// Unit tests check a single function or component in isolation. Integration tests check how multiple components work together. End-to-end (E2E) tests check the entire application flow from a user's perspective."
"टेस्ट-ड्रिवन डेवलपमेंट (TDD) का कॉन्सेप्ट","// A software development process that relies on the repetition of a very short development cycle: first the developer writes a failing automated test case that defines a desired improvement or new function, then produces the minimum amount of code to pass that test, and finally refactors the new code to acceptable standards."
"बिहेवियर-ड्रिवन डेवलपमेंट (BDD) का कॉन्सेप्ट","// An extension of TDD which focuses on writing tests in a natural language format that non-technical stakeholders can understand, using keywords like Given, When, and Then."
"एक Gherkin सिंटैक्स (BDD) का उदाहरण","Feature: User Login\n  Scenario: Successful login with valid credentials\n    Given the user is on the login page\n    When the user enters a valid username and password\n    Then the user should be redirected to the dashboard"
"Selenium WebDriver का उपयोग करके एक ब्राउज़र ऑटोमेशन टेस्ट लिखो","""from selenium import webdriver\ndriver = webdriver.Chrome()\ndriver.get('http://example.com')\nassert 'Example Domain' in driver.title\ndriver.quit()"""
"Flask एप्लीकेशन को टेस्ट करने के लिए एक टेस्ट क्लाइंट बनाओ","""# Assuming you have a create_app function (app factory)\ndef test_home_page_status_code():\n    app = create_app()\n    with app.test_client() as client:\n        response = client.get('/')\n        assert response.status_code == 200"""
"Django एप्लीकेशन को टेस्ट करने के लिए एक टेस्ट क्लाइंट बनाओ","""from django.test import TestCase, Client\n\nclass MyViewTests(TestCase):\n    def test_home_page_exists(self):\n        client = Client()\n        response = client.get('/')\n        self.assertEqual(response.status_code, 200)"""
"कोड कवरेज (code coverage) को मापने के लिए `coverage.py` का उपयोग करो","coverage run -m pytest\ncoverage report -m"
"एक 'canary' टेस्ट क्या है","// A canary test is a type of test run in a production environment against a small subset of live traffic to ensure a new deployment is stable before rolling it out to all users."
"एक 'smoke' टेस्ट क्या है","// A smoke test is a small suite of tests that checks the most basic and critical functionality of an application to quickly determine if a build is stable enough for further testing."
"A/B टेस्टिंग का कॉन्सेप्ट","// A randomized experiment with two variants (A and B), which are the control and treatment in the controlled experiment. It is a way to compare two versions of a single variable to determine which of the two performs better."
"Postman का उपयोग करके एक API एंडपॉइंट को टेस्ट करो","// Create a new request in the Postman application, set the HTTP method (GET, POST, etc.), enter the endpoint URL, add any headers or body, and hit 'Send' to see the response."
"पाइथन में `doctest` का उपयोग करो","""def add(a, b):\n    """>>> add(1, 2)\n    3\n    >>> add(-1, 1)\n    0\n    ""\n    return a + b"""
"एक 'faker' लाइब्रेरी का उपयोग करके टेस्ट के लिए फेक डेटा जेनरेट करो","from faker import Faker\nfake = Faker()\n\n# Generate fake data\nfake_name = fake.name()\nfake_address = fake.address()"
"स्ट्रेस टेस्टिंग (Stress Testing) का कॉन्सेप्ट","// A type of performance testing to determine the stability of a system by testing it beyond normal operational capacity, often to a breaking point."
"लोड टेस्टिंग (Load Testing) का कॉन्सेप्ट","// The process of putting simulated demand on a system or device and measuring its response. It is performed to determine a system's behavior under both normal and anticipated peak load conditions."
"Playwright का उपयोग करके एक ब्राउज़र टेस्ट लिखो","""from playwright.sync_api import sync_playwright\n\nwith sync_playwright() as p:\n    browser = p.chromium.launch(headless=False)\n    page = browser.new_page()\n    page.goto('http://whatsmyuseragent.org/')\n    page.screenshot(path='playwright_screenshot.png')\n    browser.close()"""
"म्यूटेशन टेस्टिंग (Mutation Testing) का कॉन्सेप्ट","// A type of software testing where small, deliberate faults (mutations) are introduced into the source code. The goal is to see if the existing test suite can detect and fail on these mutated versions."
"एक प्रॉपर्टी-बेस्ड टेस्ट लिखो (Hypothesis)","from hypothesis import given\nfrom hypothesis.strategies import text\n\n@given(text())\ndef test_decode_inverts_encode(s):\n    # A function that should always be true for any string input\n    assert decode(encode(s)) == s"
"Selenium IDE का उपयोग करके एक टेस्ट रिकॉर्ड और प्लेबैक करो","// Use the Selenium IDE browser extension to record user interactions (clicks, typing) on a website and then export them as a reusable test script."
"एक पाइथन फंक्शन को मॉक (mock) करो","""@patch('my_module.external_api_call', return_value={'data': 'mocked_success'})\ndef test_function_with_mock(mock_api_call):\n    # ... your test code here will use the mocked return value ..."""
"Jest में एक स्नैपशॉट टेस्ट (snapshot test) लिखो","""// A snapshot test creates a 'snapshot' of a UI component's rendered output.\nit('renders correctly', () => {\n  const tree = renderer.create(<MyComponent />).toJSON();\n  expect(tree).toMatchSnapshot();\n});"""
"एक लॉगिंग स्टेटमेंट को टेस्ट करो (unittest)","""with self.assertLogs('my_logger', level='INFO') as cm:\n    logging.getLogger('my_logger').info('first message')\n    self.assertEqual(cm.output, ['INFO:my_logger:first message'])"""
"पाइथन में `assert` स्टेटमेंट का उपयोग करो","x = 1\ny = 2\nassert x + y == 3, 'Assertion failed: 1 + 2 should be 3'"
"एक 'setup' और 'teardown' मेथड लिखो (unittest)","""import unittest\n\nclass MyTest(unittest.TestCase):\n    def setUp(self):\n        # This runs before each test method\n        print('Setting up for a test...')\n    def tearDown(self):\n        # This runs after each test method\n        print('Tearing down the test.')\n    def test_one(self): pass"""
"एक सॉर्ट करने योग्य (sortable) HTML टेबल बनाओ","""<table id='mySortableTable'>...</table>\n<script>\nfunction sortTable(columnIndex) { /* ... JS logic to sort table rows based on a column ... */ }\n</script>"""
"एक सिंपल ड्राइंग पैड (drawing pad) बनाओ","""<canvas id='drawing-pad' width='300' height='200' style='border:1px solid;'></canvas>\n<script>\nconst canvas = document.getElementById('drawing-pad');\nconst ctx = canvas.getContext('2d');\n// ... add event listeners for mousedown, mousemove, mouseup to draw ...\n</script>"""
"एक टू-डू लिस्ट बनाओ जिसमें आइटम्स को डिलीट किया जा सके","""<ul id='my-list'></ul><input id='item-input' placeholder='New ToDo'><button onclick=""const li = document.createElement('li'); li.innerText=document.getElementById('item-input').value; li.onclick=function(){this.remove()}; document.getElementById('my-list').appendChild(li);"">Add</button>"""
"एक मल्टी-स्टेप फॉर्म (multi-step form) बनाओ","""<style>.form-step{display:none;}</style>\n<form>\n  <div class='form-step' style='display:block;'>Step 1 Content</div>\n  <div class='form-step'>Step 2 Content</div>\n  <button type='button' onclick='nextStep()'>Next</button>\n</form>"""
"एक कलर पिकर बनाओ जो चुने हुए रंग का hex, rgb, और hsl कोड दिखाए","<input type='color' value='#ff0000' oninput=""document.getElementById('color-values').innerText = `HEX: ${this.value}`""> <span id='color-values'></span>"
"एक थीम स्विचर (switcher) बनाओ जो localStorage में थीम को सेव करे","""<button onclick=""toggleTheme()"">Toggle Theme</button>\n<script>\nfunction toggleTheme(){\n  document.body.classList.toggle('dark-theme');\n  localStorage.setItem('theme', document.body.className);\n}\n// On page load, apply saved theme:\ndocument.body.className = localStorage.getItem('theme');\n</script>"""
"एक इंटरैक्टिव SVG मैप बनाओ (जैसे भारत का नक्शा)","""<svg viewBox='0 0 100 100'> <path d='...' title='Uttar Pradesh' onclick=""alert('You clicked on Uttar Pradesh')""></path> </svg>"""
"CSS और JS से एक कस्टम राइट-क्लिक मेन्यू (context menu) बनाओ","""<div id='custom-context-menu' style='display:none; position:absolute; border:1px solid #ccc;'>...</div>\n<script>\ndocument.addEventListener('contextmenu', e => {\n  e.preventDefault();\n  // ... JS logic to show menu at mouse coordinates (e.clientX, e.clientY) ...\n});\n</script>"""
"एक 'before/after' इमेज स्लाइडर बनाओ","""<style>.img-comp-container{position:relative;} .img-comp-overlay{position:absolute;...}</style><div class='img-comp-container'>...</div><script>initImageComparison();</script>"""
"एक ड्रैग-एंड-ड्रॉप सॉर्टेबल लिस्ट बनाओ","""<ul id='sortable-list'>\n  <li draggable='true'>Item 1</li>\n  <li draggable='true'>Item 2</li>\n</ul>\n<script>\n// ... add event listeners for dragstart, dragover, drop to handle reordering ...\n</script>"""
"एक स्टिकी नेविगेशन बार बनाओ जो स्क्रॉल करने पर बैकग्राउंड बदले","""<style>.sticky-nav{position:fixed; top:0; background:transparent; transition: background 0.3s;}.scrolled{background:white; box-shadow:0 2px 5px rgba(0,0,0,0.1);}</style>\n<div id='navbar'>...</div>\n<script>\nwindow.onscroll = () => { if(window.pageYOffset > 50) navbar.classList.add('scrolled'); else navbar.classList.remove('scrolled'); }\n</script>"""
"एक फिल्टर करने वाली इमेज गैलरी बनाओ","""<div class='filter-buttons'><button onclick=""filterSelection('all')"">All</button><button onclick=""filterSelection('nature')"">Nature</button></div>\n<div class='gallery-item nature'>...</div>\n<div class='gallery-item cars'>...</div>"""
"एनिमेटेड स्किल बार्स बनाओ जो स्क्रॉल करने पर एक्टिवेट हों","""<div class='skill-bar'></div>\n<script>\n// Use Intersection Observer API to detect when the skill bar is visible in the viewport, then trigger the width animation.\n</script>"""
"एक रैंडम पासवर्ड जेनरेटर ऐप बनाओ जिसमें लम्बाई और ऑप्शन हों","""<input type='range' id='pass-length' min='8' max='20'><input type='checkbox' id='inc-symbols'>\n<button onclick=""generateNewPassword()"">Generate</button><p id='generated-pass'></p>"""
"एक अकॉर्डियन मेन्यू बनाओ जिसमें एक समय पर एक ही टैब खुले","""<script>\nvar accordions = document.getElementsByClassName('accordion-btn');\nfor (var i = 0; i < accordions.length; i++) {\n  accordions[i].addEventListener('click', function() {\n    // ... JS logic to close all other panels before opening the current one ...\n    this.classList.toggle('active');\n  });\n}\n</script>"""
"क्लिक करने पर एक रिपल (ripple) इफ़ेक्ट वाला बटन बनाओ","""<style>.ripple-button{position:relative; overflow:hidden;}</style><button class='ripple-button'>Click Me</button>\n<script>// JS to create a span element on click, position it, and animate its scale and opacity to create a ripple.</script>"""
"स्मूथ स्क्रॉलिंग (Smooth Scrolling) वाले एंकर लिंक्स","""<a href='#section1'>Go to Section 1</a><div id='section1'></div>\n<script>\ndocument.querySelectorAll('a[href^=""#""]').forEach(anchor => {\n  anchor.addEventListener('click', function(e){ \n    e.preventDefault(); \n    document.querySelector(this.getAttribute('href')).scrollIntoView({ behavior: 'smooth' });\n  });\n});\n</script>"""
"एक फुल-स्क्रीन ओवरले नेविगेशन मेन्यू","""<style>.overlay-nav{height:0; width:100%; position:fixed; background:rgba(0,0,0,0.95); overflow-y:hidden; transition:0.5s;}</style>\n<span onclick=""openNav()"">Open Menu</span>\n<div id='myNav' class='overlay-nav'>...</div>"""
"एक टेक्स्टएरिया बनाओ जो कैरेक्टर लिमिट पहुंचने पर लाल हो जाए","""<style>.limit-warning{color:red; font-weight:bold;}</style>\n<textarea maxlength='100' oninput=""var remaining = 100 - this.value.length; document.getElementById('char-rem').innerText=remaining; document.getElementById('char-rem').className = remaining < 10 ? 'limit-warning' : '';""></textarea><p><span id='char-rem'>100</span> characters remaining.</p>"""
"एक सिंपल पोल (poll) कॉम्पोनेन्ट बनाओ जो वोट करने के बाद नतीजे दिखाए","""<div id='poll'><h3>Favorite?</h3><p onclick='vote(this)'>A</p><p onclick='vote(this)'>B</p></div>\n<script>function vote(element){ document.getElementById('poll').innerHTML = '<h3>Thanks for voting!</h3>'; }</script>"""
"एक मूवी टिकट बुकिंग सीट सिलेक्टर UI","""<style>.seat.selected{background-color:green;}.seat.occupied{background-color:grey;}</style>\n<div class='seat' onclick=""this.classList.toggle('selected')""></div>\n<div class='seat occupied'></div>"""
"एक सिंपल WYSIWYG टेक्स्ट एडिटर के बटन","""<div id='text-editor' contenteditable='true' style='border:1px solid #ccc; height:150px; padding:5px;'>Type here...</div>\n<button onclick=""document.execCommand('bold')""><b>B</b></button>\n<button onclick=""document.execCommand('italic')""><i>I</i></button>\n<button onclick=""document.execCommand('underline')""><u>U</u></button>"""
"एक GitHub प्रोफाइल कार्ड का UI जो API से डेटा दिखाए","""<div id='gh-card' style='display:flex;'></div>\n<script>\nfetch('https://api.github.com/users/google').then(r=>r.json()).then(d=>{\n  document.getElementById('gh-card').innerHTML = `<img src='${d.avatar_url}' width='50'><h4>${d.name}</h4>`;\n});\n</script>"""
"एक पासवर्ड जेनरेटर जिसमें चेकबॉक्स (अपरकेस, नंबर, सिंबल) हों","""<input type='checkbox' id='inc-uppercase'> Uppercase\n<input type='checkbox' id='inc-numbers'> Numbers\n<input type='checkbox' id='inc-symbols'> Symbols\n<button onclick=""generatePassword()"">Generate</button>"""
"एक प्रोग्रेस बार जो एक टाइमर के साथ चले","""<progress id='timer-progress' max='100' value='0'></progress>\n<script>var i=0; var interval = setInterval(() => { i++; document.getElementById('timer-progress').value=i; if(i>=100) clearInterval(interval); }, 100);</script>"""
"एक 'Infinite Scroll' पेज का ढाँचा","""<div id='content-container'>...initial items...</div>\n<script>\nwindow.addEventListener('scroll', ()=>{\n  if (window.innerHeight + window.scrollY >= document.body.offsetHeight - 50) {\n    // loadMoreItems() function would be called here to fetch and append new content\n  }\n});\n</script>"""
"एक डायनामिक ब्रेडक्रंब (breadcrumb) नेविगेशन बनाओ","""<nav id='breadcrumbs'></nav>\n<script>\n// JavaScript to generate breadcrumbs based on the current URL path (window.location.pathname)\n</script>"""
"एक क्विज ऐप बनाओ जो स्कोर दिखाए","""<div id='quiz-container'>...questions...</div>\n<button onclick='calculateScore()'>Submit Quiz</button>\n<h3>Your Score: <span id='quiz-score'></span></h3>"""
"एक Pomodoro टाइमर ऐप","""<h2 id='pomodoro-display'>25:00</h2>\n<button id='start-pomodoro'>Start</button>\n<button id='reset-pomodoro'>Reset</button>\n<script>// JS logic for countdown timer</script>"""
"एक ड्राइंग ऐप जिसमें रंग और ब्रश का साइज़ बदलने का ऑप्शन हो","""<canvas id='drawing-app-canvas'></canvas>\n<input type='color' id='color-picker'>\n<input type='range' id='brush-size' min='1' max='20'>"""
"एक इमेज पर ज़ूम करने के लिए एक स्लाइडर","""<img id='zoomable-img' src='...' style='transform: scale(1); transition: transform 0.2s;'>\n<input type='range' min='1' max='3' step='0.1' value='1' oninput=""document.getElementById('zoomable-img').style.transform = `scale(${this.value})`"">"""
"एक 'Kanban' बोर्ड का UI (जैसे Trello)","""<style>.kanban-board{display:flex;}.board-column{flex:1; border:1px solid; margin:5px;}</style>\n<div class='kanban-board'>\n  <div class='board-column'><h3>To Do</h3><div class='card'>Task 1</div></div>\n  <div class='board-column'><h3>In Progress</h3></div>\n  <div class='board-column'><h3>Done</h3></div>\n</div>"""
"एक मेमोरी गेम (कार्ड मैचिंग) का UI","""<style>.card-flipped{transform:rotateY(180deg);}</style>\n<div class='game-board'>\n  <div class='card' onclick=""this.classList.add('card-flipped')"">...</div>\n  ...\n</div>"""
"एक वेब-बेस्ड पियानो का UI","""<style>.white-key{border:1px solid;...}.black-key{background:black;...}</style>\n<div class='piano'>\n  <div class='white-key'></div>\n  <div class='black-key'></div>\n  ...\n</div>"""
"एक कस्टम वीडियो प्लेयर कंट्रोल्स बनाओ","""<video id='custom-video' src='... '></video>\n<div>\n  <button onclick=""document.getElementById('custom-video').play()"">Play</button>\n  <button onclick=""document.getElementById('custom-video').pause()"">Pause</button>\n  <input type='range' oninput=""document.getElementById('custom-video').volume = this.value"">\n</div>"""
"एक इंटरैक्टिव Periodic Table का UI","""<style>.element{border:1px solid; text-align:center;}</style>\n<div style='display:grid; grid-template-columns:repeat(18, 1fr);'>\n  <div class='element'>H</div>\n  ...\n</div>"""
"एक 'Wheel of Fortune' स्पिनर बनाओ","""<canvas id='fortune-wheel'></canvas>\n<button onclick='spinTheWheel()'>Spin</button>\n<script>// JS to draw segments on canvas and animate rotation</script>"""
"एक स्लाइड-आउट साइडबार मेन्यू","""<style>#mySidebar{position:fixed; left:-250px; width:250px; height:100%; background:#111; transition:0.3s;}</style>\n<div id='mySidebar'>...</div>\n<button onclick=""document.getElementById('mySidebar').style.left='0'"">Open Sidebar</button>"""
"एक 'drag-to-upload' फाइल अपलोडर","""<div id='drop-area' ondragover='...' ondragleave='...' ondrop='handleDrop(event)'>Drop files here to upload</div>"""
"एक इंटरैक्टिव SVG एनीमेशन बनाओ (जैसे पाथ ड्रॉ करना)","""<svg><path id='my-animated-path' d='...' style='stroke-dasharray: 1000; stroke-dashoffset: 1000; animation: draw 5s linear forwards;'></path></svg>\n<style>@keyframes draw{to{stroke-dashoffset:0;}}</style>"""
"एक 'cookie consent' बैनर जो localStorage का उपयोग करे","""<div id='cookie-consent-banner'>...<button onclick=""localStorage.setItem('cookies_accepted','true'); this.parentElement.remove();"">Accept</button></div>\n<script>if(localStorage.getItem('cookies_accepted')) document.getElementById('cookie-consent-banner').remove();</script>"""
"एक ऑटो-सजेस्ट (autocomplete) सर्च बार जो API से डेटा लाए","""<input onkeyup='getSuggestions(this.value)'><div id='suggestions-box'></div>\n<script>async function getSuggestions(query){ const res=await fetch(`/api/search?q=${query}`); ... }</script>"""
"एक मल्टी-लैंग्वेज वेबसाइट का ढाँचा (JS)","""<nav><button onclick=""setLanguage('en')"">EN</button><button onclick=""setLanguage('hi')"">HI</button></nav>\n<h1 data-key='welcome_message'></h1>\n<script>const translations = {en:{...}, hi:{...}}; function setLanguage(lang){...}</script>"""
"एक 'lazy loading' इमेज स्क्रिप्ट (Intersection Observer)","""<img data-src='real-image.jpg' class='lazy-image'>\n<script>\nconst lazyImages = document.querySelectorAll('.lazy-image');\nconst observer = new IntersectionObserver(entries => { ... });\nlazyImages.forEach(img => observer.observe(img));\n</script>"""
"एक कस्टम ऑडियो विज़ुअलाइज़र (Web Audio API)","""<audio id='my-audio' src='...'></audio>\n<canvas id='audio-visualizer'></canvas>\n<script>// JS to use Web Audio API to analyze audio frequency and draw on canvas</script>"""
"एक 'No Internet' कनेक्शन डिटेक्टर और नोटिफिकेशन","""<div id='offline-alert' style='display:none;'>You are offline!</div>\n<script>\nwindow.addEventListener('offline', ()=>document.getElementById('offline-alert').style.display='block');\nwindow.addEventListener('online', ()=>document.getElementById('offline-alert').style.display='none');\n</script>"""
"SQL में `INNER JOIN` का उपयोग करो","SELECT users.name, orders.product FROM users INNER JOIN orders ON users.id = orders.user_id;"
"SQL में `LEFT JOIN` का उपयोग करो (सभी यूज़र्स, भले ही उन्होंने आर्डर न किया हो)","SELECT users.name, orders.product FROM users LEFT JOIN orders ON users.id = orders.user_id;"
"SQL में तीन टेबल्स को एक साथ ज्वाइन करो","SELECT u.name, p.product_name, c.category_name FROM users u JOIN products p ON u.id = p.user_id JOIN categories c ON p.category_id = c.id;"
"SQL में एक `CASE` स्टेटमेंट का उपयोग करो","SELECT name, CASE WHEN age >= 18 THEN 'Adult' WHEN age < 18 THEN 'Minor' ELSE 'Unknown' END AS age_group FROM users;"
"SQL में एक कॉमन टेबल एक्सप्रेशन (CTE) बनाओ","WITH RegionalSales AS (\n  SELECT region, SUM(amount) AS total_sales FROM orders GROUP BY region\n) \nSELECT region, total_sales FROM RegionalSales WHERE total_sales > 1000;"
"SQL में एक विंडो फंक्शन (`ROW_NUMBER`) का उपयोग करो","SELECT name, salary, ROW_NUMBER() OVER (ORDER BY salary DESC) as rank FROM employees;"
"SQL में एक विंडो फंक्शन (`RANK`) का उपयोग करो","SELECT name, salary, RANK() OVER (PARTITION BY department ORDER BY salary DESC) as rank_in_department FROM employees;"
"SQL में एक विंडो फंक्शन (`LEAD` or `LAG`) का उपयोग करो","SELECT date, sales, LAG(sales, 1, 0) OVER (ORDER BY date) as previous_day_sales FROM daily_sales;"
"SQL में एक ट्रांसैक्शन (Transaction) का उपयोग करो","BEGIN TRANSACTION; \nUPDATE accounts SET balance = balance - 100 WHERE id = 1; \nUPDATE accounts SET balance = balance + 100 WHERE id = 2; \nCOMMIT;"
"SQL में एक `ROLLBACK` स्टेटमेंट का उपयोग करो","BEGIN TRANSACTION; \n-- ... some operations ... \nROLLBACK;"
"SQL में एक परफॉरमेंस के लिए इंडेक्स (Index) बनाओ","CREATE INDEX idx_user_email ON users (email);"
"एक कम्पोजिट इंडेक्स (Composite Index) बनाओ","CREATE INDEX idx_lastname_firstname ON users (lastname, firstname);"
"SQL में एक `VIEW` बनाओ","CREATE VIEW vw_active_users AS SELECT id, name, email FROM users WHERE is_active = TRUE;"
"एक स्टोर्ड प्रोसीजर (Stored Procedure) बनाओ","CREATE PROCEDURE GetUserByID @UserID INT \nAS \nSELECT * FROM users WHERE id = @UserID;"
"SQL में `UNION` का उपयोग करके डुप्लीकेट हटाओ","SELECT city FROM customers UNION SELECT city FROM suppliers;"
"SQL में `UNION ALL` का उपयोग करके डुप्लीकेट समेत सभी रिजल्ट्स पाओ","SELECT city FROM customers UNION ALL SELECT city FROM suppliers;"
"एक सेल्फ-ज्वाइन (Self-Join) करो ताकि एम्प्लॉई और मेनेजर का पता चले","SELECT e1.name AS Employee, e2.name AS Manager FROM employees e1 JOIN employees e2 ON e1.manager_id = e2.id;"
"एक क्रॉस-ज्वाइन (Cross-Join) करो","SELECT * FROM table1 CROSS JOIN table2;"
"PostgreSQL में `JSONB` डेटा टाइप का उपयोग करके एक टेबल बनाओ","CREATE TABLE products (id SERIAL PRIMARY KEY, data JSONB);"
"MongoDB में एक नया डॉक्यूमेंट इंसर्ट करो","db.users.insertOne({ name: 'Amit', age: 25, skills: ['Python', 'JS'], address: { city: 'Lucknow' } });"
"MongoDB में कई डाक्यूमेंट्स इंसर्ट करो","db.inventory.insertMany([{ item: 'journal', qty: 25 }, { item: 'notebook', qty: 50 }]);"
"MongoDB में एक डॉक्यूमेंट ढूंढो (`findOne`)","db.users.findOne({ name: 'Amit' });"
"MongoDB में कई डाक्यूमेंट्स ढूंढो (`find`) और उन्हें सॉर्ट करो","db.users.find({ age: { $gt: 20 } }).sort({ name: 1 });"
"MongoDB में एक डॉक्यूमेंट को अपडेट करो (`updateOne`)","db.users.updateOne({ name: 'Amit' }, { $set: { city: 'Lucknow', status: 'active' } });"
"MongoDB में कई डाक्यूमेंट्स को अपडेट करो (`updateMany`)","db.inventory.updateMany({ qty: { $lt: 50 } }, { $set: { 'reorder': true } });"
"MongoDB में एक डॉक्यूमेंट को डिलीट करो (`deleteOne`)","db.users.deleteOne({ name: 'Ria' });"
"MongoDB में एक इंडेक्स बनाओ","db.users.createIndex({ name: 1 }); // 1 for ascending"
"MongoDB एग्रीगेशन पाइपलाइन का एक उदाहरण","db.orders.aggregate([\n  { $match: { status: 'completed' } },\n  { $group: { _id: '$customer_id', total_amount: { $sum: '$amount' } } }\n]);"
"Redis में एक की-वैल्यू पेयर सेट करो और उसकी एक्सपायरी भी","SET mykey 'myvalue' EX 60 # Expires in 60 seconds"
"Redis से एक की-व-ैल्यू पेयर प्राप्त करो","GET mykey"
"Redis में एक हैश (Hash) सेट करो","HSET user:1001 name 'Amit' city 'Lucknow' age 25"
"Redis में एक लिस्ट के अंत में आइटम जोड़ो","RPUSH my_list 'item1' 'item2'"
"Redis में एक सेट में मेंबर्स जोड़ो","SADD my_set 'member1' 'member2' 'member1' # 'member1' will be added only once"
"SQL में `COALESCE` फंक्शन का उपयोग करके NULL वैल्यू को बदलो","SELECT name, COALESCE(nickname, 'N/A') FROM users;"
"एक ट्रिगर (Trigger) बनाओ जो अपडेट होने पर एक लॉग टेबल में एंट्री करे","CREATE TRIGGER my_trigger AFTER UPDATE ON my_table FOR EACH ROW BEGIN INSERT INTO audit_log(...); END;"
"SQL में एक यूजर-डिफाइंड फंक्शन (UDF) बनाओ","CREATE FUNCTION GetFullName(@FirstName NVARCHAR(50), @LastName NVARCHAR(50)) RETURNS NVARCHAR(101) AS BEGIN RETURN @FirstName + ' ' + @LastName; END;"
"एक recursive CTE का उपयोग करके एक हायरार्की (hierarchy) को क्वेरी करो","WITH RECURSIVE employee_hierarchy AS ( ... ) SELECT ... FROM employee_hierarchy;"
"ACID (Atomicity, Consistency, Isolation, Durability) क्या है","// A set of properties of database transactions intended to guarantee data validity despite errors, power failures, and other mishaps, ensuring reliable processing."
"NoSQL डेटाबेस के प्रकार (Key-Value, Document, Column-Family, Graph)","// Key-Value (Redis), Document (MongoDB), Column-Family (Cassandra), Graph (Neo4j) are different types of NoSQL databases."
"CAP प्रमेय (CAP Theorem) क्या है","// A theorem for distributed data storage stating that it's impossible for a distributed data store to simultaneously provide more than two out of Consistency, Availability, and Partition tolerance."
"डेटाबेस नॉर्मलाइजेशन (Normalization) का कॉन्सेप्ट","// The process of organizing columns and tables in a relational database to minimize data redundancy and improve data integrity."
"डेटाबेस डीनॉर्मलाइजेशन (Denormalization) का कॉन्सेप्ट","// The process of trying to improve the read performance of a database by adding redundant data or grouping data, at the expense of some write performance."
"शार्डिंग (Sharding) का कॉन्सेप्ट","// A type of database partitioning that separates one large database into many smaller, faster, more easily managed parts called data shards."
"रेप्लीकेशन (Replication) का कॉन्सेप्ट","// The process of storing data in more than one site or node. It is a key feature for fault tolerance, scalability, and disaster recovery."
"ORM (Object-Relational Mapping) क्या है","// A programming technique for converting data between incompatible type systems using object-oriented programming languages. Examples: SQLAlchemy for Python, TypeORM for TypeScript."
"MongoDB में `$lookup` (JOIN के समान) का उपयोग करो","db.orders.aggregate([{ $lookup: { from: 'inventory', localField: 'item', foreignField: 'sku', as: 'inventory_docs' } }])"
"Elasticsearch में एक डॉक्यूमेंट को इंडेक्स करो","POST /my-index/_doc/1\n{ ""field"": ""some value"", ""timestamp"": ""2025-10-07"" }"
"ऑप्शनल चेनिंग (`?.`) का उपयोग करो","const user = { profile: { name: 'Amit' } };\nconst street = user.address?.street; // Returns undefined instead of an error"
"नल्लिश कोएलेसिंग ऑपरेटर (`??`) का उपयोग करो","const value = null ?? 'default string'; // returns 'default string', while 0 || 'default' would return 'default'"
"`Promise.allSettled` का उपयोग करो ताकि सभी प्रॉमिसेस पूरे हो जाएं","const promises = [Promise.resolve(1), Promise.reject('fail')];\nPromise.allSettled(promises).then(results => console.log(results)); // Shows status of all promises"
"डायनामिक `import()` का उपयोग करके एक मॉड्यूल को कंडीशनली लोड करो","if (userIsLoggedIn) {\n  import('./dashboard.js').then(module => {\n    module.loadDashboard();\n  });\n}"
"`globalThis` का उपयोग करो","// Access the global 'this' context in any environment (browser, Node.js, web worker)\nconsole.log(globalThis);"
"`BigInt` का उपयोग करके बहुत बड़े नंबरों के साथ काम करो","const veryLargeNumber = 9007199254740991n;\nconst result = veryLargeNumber + 1n;"
"`String.prototype.matchAll()` का उपयोग करके एक स्ट्रिंग में सभी मैच ढूंढो","const regex = /t(e)(st(\\d?))/g;\nconst str = 'test1test2';\nconst array = [...str.matchAll(regex)];"
"लॉजिकल OR असाइनमेंट ऑपरेटर `||=` का उपयोग करो","let user = { name: 'Amit' };\nuser.city ||= 'Unknown'; // Assigns 'Unknown' only if user.city is falsy"
"लॉजिकल AND असाइनमेंट ऑपरेटर `&&=` का उपयोग करो","let user = { isLoggedIn: true };\nuser.isLoggedIn &&= doSomething(); // Calls doSomething() only if user.isLoggedIn is true"
"लॉजिकल Nullish असाइनमेंट ऑपरेटर `??=` का उपयोग करो","let user = { name: 'Amit' };\nuser.city ??= 'Unknown'; // Assigns 'Unknown' only if user.city is null or undefined"
"न्यूमेरिक सेपरेटर्स का उपयोग करके नंबर्स को पठनीय (readable) बनाओ","const oneBillion = 1_000_000_000;"
"`Array.prototype.at()` का उपयोग करके एक एरे का आखिरी एलिमेंट प्राप्त करो","const arr = ['a', 'b', 'c'];\nconst lastElement = arr.at(-1); // returns 'c'"
"एक ऑब्जेक्ट में `private` क्लास फील्ड बनाओ","class MyClass { \n  #privateField = 42;\n  getPrivateValue() { return this.#privateField; }\n}"
"एक क्लास में `private` मेथड बनाओ","class MyClass { \n  #privateMethod() { return 'This is private'; }\n  publicMethod() { return this.#privateMethod(); }\n}"
"एक क्लास में `static` ब्लॉक बनाओ","class MyClass { \n  static myStaticProperty;\n  static { \n    // Complex initialization logic for static properties\n    this.myStaticProperty = 'initialized in a static block';\n  }\n}"
"`Object.hasOwn()` का उपयोग करो (hasOwnProperty से बेहतर)","const obj = { prop: 'exists' };\nconsole.log(Object.hasOwn(obj, 'prop')); // true\nconsole.log(Object.hasOwn(obj, 'toString')); // false"
"`Array.prototype.findLast()` का उपयोग करके एक एरे में आखिरी एलिमेंट ढूंढो","const array = [{val:1}, {val:2}, {val:3}, {val:2}];\nconst lastTwo = array.findLast(element => element.val === 2);"
"`Temporal` API का कॉन्सेप्ट","// A new, modern API for working with dates and times in JavaScript, designed to replace the old and problematic Date object. (Still a proposal)"
"रिकॉर्ड्स और टपल्स (Records & Tuples) का कॉन्सेप्ट","// A proposal for adding deeply immutable primitive data structures to JavaScript. Record is for objects, Tuple is for arrays."
"शेयर्ड एरे बफर (`SharedArrayBuffer`) का उपयोग करो","// Used for sharing memory between web workers to allow for high-performance parallel computation."
"एटॉमिक्स (`Atomics`) का उपयोग करो","// Provides atomic operations on SharedArrayBuffer objects, ensuring that operations complete without interruption."
"`WeakRef` का उपयोग करके एक ऑब्जेक्ट का एक कमजोर रिफरेन्स (weak reference) बनाओ","const weak_ref = new WeakRef({ some: 'large object' }); // Allows garbage collection if this is the only reference"
"एक `FinalizationRegistry` बनाओ","const registry = new FinalizationRegistry(heldValue => {\n  // Cleanup logic that runs after an object has been garbage collected.\n});"
"`import.meta` का उपयोग करके एक मॉड्यूल के बारे में मेटाडेटा प्राप्त करो","// Get metadata about the current module, like its URL, which can be useful for resolving assets.\nconst moduleUrl = import.meta.url;"
"टॉप-लेवल `await` का उपयोग करो","// In an ES module, you can now use 'await' outside of an 'async' function.\nconst response = await fetch('...');\nconst data = await response.json();"
"रेगुलर एक्सप्रेशन में 'd' फ्लैग का उपयोग करके मैच इंडिसेस प्राप्त करो","const re = /a+(?<Z>z)/d;\nconst s = 'xaaaz';\nconst m = re.exec(s);\n// m.indices contains start and end indices of the match"
"`Intl.DisplayNames` का उपयोग करके एक देश का नाम प्राप्त करो","const regionNames = new Intl.DisplayNames(['en'], { type: 'region' });\nconsole.log(regionNames.of('IN')); // 'India'"
"`Intl.DateTimeFormat` का उपयोग करके एक तारीख को फॉर्मेट करो","const date = new Date();\nconst formatter = new Intl.DateTimeFormat('hi-IN', { dateStyle: 'full' });\nconsole.log(formatter.format(date));"
"डेकोरेटर्स (Decorators) का कॉन्सेप्ट","// A Stage 3 proposal for a feature that allows modifying class and method definitions with functions, often used in frameworks like Angular and MobX."
"पाइपलाइन ऑपरेटर `|>` का कॉन्सेप्ट","// A Stage 2 proposal for a new operator to make function chaining more readable. Example: `x |> f |> g` is equivalent to `g(f(x))`."
"एक एसिंक्रोनस जेनरेटर फंक्शन बनाओ","async function* asyncNumberStream() {\n  for (let i = 0; i < 3; i++) {\n    await new Promise(resolve => setTimeout(resolve, 100));\n    yield i;\n  }\n}"
"`for await...of` लूप का उपयोग करके एक एसिंक्रोनस जेनरेटर को कंस्यूम करो","async function run(){\n  for await (const value of asyncNumberStream()){\n    console.log(value);\n  }\n}\nrun();"
"एक नया `Error` ऑब्जेक्ट बनाओ जिसमें `cause` प्रॉपर्टी हो","const originalError = new Error('Original problem');\nconst newError = new Error('Something went wrong', { cause: originalError });\nconsole.log(newError.cause); // Logs the originalError"
"Web Locks API का उपयोग करके एक रिसोर्स को लॉक करो","await navigator.locks.request('my_resource_lock', async lock => {\n  // This code runs while holding the lock. No other tab/worker can acquire the same lock.\n});"
"Structured Clone का उपयोग करके एक जटिल ऑब्जेक्ट को डीप कॉपी करो","const deepCopy = structuredClone(originalObject); // Can copy Maps, Sets, and other complex types."
"एक परमिशन API (`Permissions API`) का उपयोग करके जियोलोकेशन की परमिशन चेक करो","navigator.permissions.query({ name: 'geolocation' }).then(result => { console.log(`Geolocation permission state is ${result.state}`); });"
"CSS Typed Object Model का उपयोग करके CSS वैल्यूज को ऑब्जेक्ट्स के रूप में एक्सेस करो","element.attributeStyleMap.set('opacity', CSS.number(0.5));\nconst opacity = element.attributeStyleMap.get('opacity'); // Returns a CSSUnitValue object"
"Web Animations API का उपयोग करके एक कॉम्प्लेक्स एनीमेशन बनाओ","element.animate([\n  { transform: 'translateY(0px)', opacity: 1 },\n  { transform: 'translateY(-20px)', opacity: 0.5 },\n  { transform: 'translateY(0px)', opacity: 1 }\n], { duration: 2000, iterations: Infinity });"
"Web Crypto API का उपयोग करके एक रैंडम वैल्यू जेनरेट करो","const randomValues = new Uint8Array(16);\ncrypto.getRandomValues(randomValues);"
"Web Authentication API (WebAuthn) का उपयोग करो","navigator.credentials.create({ publicKey: { /* ... configuration ... */ } }); // For passwordless authentication"
"Web Bluetooth API का उपयोग करके आस-पास के डिवाइस को स्कैन करो","await navigator.bluetooth.requestDevice({ acceptAllDevices: true });"
"WebUSB API का उपयोग करके एक कनेक्टेड USB डिवाइस को लिस्ट करो","const devices = await navigator.usb.getDevices();"
"File System Access API का उपयोग करके एक फाइल को सेव करो","const fileHandle = await window.showSaveFilePicker();\nconst writable = await fileHandle.createWritable();\nawait writable.write('Hello World');\nawait writable.close();"
"एक `AbortSignal.timeout()` का उपयोग करके एक fetch रिक्वेस्ट में टाइमआउट लगाओ","const signal = AbortSignal.timeout(5000); // 5 second timeout\nfetch('...', { signal }).catch(err => { if(err.name === 'TimeoutError') console.error('Request timed out!'); });"
"`Array.prototype.toSorted()` का उपयोग करके एक एरे को बिना बदले सॉर्ट करो (immutable)","const originalArray = [3, 1, 2];\nconst sortedArray = originalArray.toSorted(); // originalArray remains [3, 1, 2]"
"`Array.prototype.toReversed()` का उपयोग करके एक एरे को बिना बदले रिवर्स करो (immutable)","const originalArray = [1, 2, 3];\nconst reversedArray = originalArray.toReversed(); // originalArray remains [1, 2, 3]"
"`Array.prototype.with()` का उपयोग करके एक एरे का एक एलिमेंट बिना बदले अपडेट करो (immutable)","const originalArray = [1, 2, 3];\nconst newArray = originalArray.with(1, 99); // returns [1, 99, 3]"
"`Array.prototype.toSpliced()` का उपयोग करके एक एरे को बिना बदले स्लाइस करो (immutable)","const originalArray = [1, 2, 3, 4];\nconst newArray = originalArray.toSpliced(1, 2); // returns [1, 4]"
"एक Flask API का बेसिक ढाँचा बनाओ","from flask import Flask, jsonify\napp = Flask(__name__)\n\n@app.route('/')\ndef index():\n    return 'API is running!'"
"सभी प्रोडक्ट्स को लौटाने के लिए एक GET एंडपॉइंट बनाओ","""products = [{ 'id': 1, 'name': 'Laptop' }]\n@app.route('/api/products', methods=['GET'])\ndef get_products():\n    return jsonify(products)"""
"एक प्रोडक्ट को उसकी ID से पाने के लिए एक GET एंडपॉइंट बनाओ","""@app.route('/api/products/<int:product_id>', methods=['GET'])\ndef get_product(product_id):\n    product = next((p for p in products if p['id'] == product_id), None)\n    return jsonify(product) if product else ('', 404)"""
"एक नया प्रोडक्ट बनाने के लिए एक POST एंडपॉइंट बनाओ","""from flask import request\n@app.route('/api/products', methods=['POST'])\ndef add_product():\n    new_product = request.json\n    products.append(new_product)\n    return jsonify(new_product), 201"""
"एक प्रोडक्ट को अपडेट करने के लिए एक PUT एंडपॉइंट बनाओ","""@app.route('/api/products/<int:product_id>', methods=['PUT'])\ndef update_product(product_id):\n    product = next((p for p in products if p['id'] == product_id), None)\n    if not product: return '', 404\n    product.update(request.json)\n    return jsonify(product)"""
"एक प्रोडक्ट को डिलीट करने के लिए एक DELETE एंडपॉइंट बनाओ","""@app.route('/api/products/<int:product_id>', methods=['DELETE'])\ndef delete_product(product_id):\n    global products\n    products = [p for p in products if p['id'] != product_id]\n    return '', 204"""
"API में 404 Not Found एरर हैंडलर बनाओ","""@app.errorhandler(404)\ndef not_found(error):\n    return jsonify({'error': 'Not found'}), 404"""
"इनपुट डेटा को वैलिडेट करो (सिंपल)","""@app.route('/api/products', methods=['POST'])\ndef add_product_validated():\n    if not request.json or not 'name' in request.json:\n        return jsonify({'error': 'Missing name'}), 400\n    # ..."""
"API वर्जनिंग के लिए एक ब्लूप्रिंट (Blueprint) बनाओ","""from flask import Blueprint\napi_v1 = Blueprint('api_v1', __name__, url_prefix='/api/v1')"""
"ब्लूप्रिंट में एक रूट डिफाइन करो","""@api_v1.route('/products')\ndef get_products_v1():\n    return jsonify(products)"""
"API में क्वेरी पैरामीटर्स का उपयोग करो (जैसे, `limit`)","""@app.route('/api/products')\ndef get_products_with_limit():\n    limit = request.args.get('limit', type=int)\n    if limit:\n        return jsonify(products[:limit])\n    return jsonify(products)"""
"API में ऑथेंटिकेशन के लिए एक सिंपल API की (key) चेक करो","""@app.before_request\ndef check_api_key():\n    if request.headers.get('X-API-KEY') != 'my-secret-key':\n        return jsonify({'error': 'Unauthorized'}), 401"""
"FastAPI में एक सिंपल API बनाओ","""from fastapi import FastAPI\napp = FastAPI()\n@app.get('/items/{item_id}')\ndef read_item(item_id: int):\n    return {'item_id': item_id}"""
"FastAPI में Pydantic का उपयोग करके डेटा वैलिडेशन करो","""from pydantic import BaseModel\nclass Item(BaseModel):\n    name: str\n    price: float\n\n@app.post('/items/')\ndef create_item(item: Item):\n    return item"""
"API रिस्पॉन्स के लिए कस्टम हेडर्स जोड़ो","""response = jsonify({'data': '...'})response.headers['X-Custom-Header'] = 'MyValue'\nreturn response"""
"एक API को सुरक्षित करने के लिए JWT (JSON Web Token) का उपयोग करो","""# Requires PyJWT library\nimport jwt\ntoken = jwt.encode({'user': 'amit'}, 'secret', algorithm='HS256')"""
"JWT को वैलिडेट करने के लिए एक डेकोरेटर बनाओ","""from functools import wraps\ndef token_required(f):\n    @wraps(f)\n    def decorated(*args, **kwargs):\n        # ... logic to check for token in request headers ...\n        return f(*args, **kwargs)\n    return decorated"""
"API में HATEOAS (Hypermedia) लिंक जोड़ो","""return jsonify({'name': 'Laptop', 'links': [{'rel': 'self', 'href': '/api/products/1'}]})"""
"Flask-Smorest का उपयोग करके एक OpenAPI (Swagger) डॉक्युमेंटेशन बनाओ","""from flask_smorest import Blueprint, Api\nblp = Blueprint('api', __name__, description='My API')\n@blp.route('/items')\nclass ItemList(MethodView):\n    def get(self):\n        return items"""
"एक API के लिए रेट लिमिटिंग लागू करो (जैसे, 10 रिक्वेस्ट प्रति मिनट)","""from flask_limiter import Limiter\nlimiter = Limiter(app)\n\n@app.route('/api/slow')\n@limiter.limit('10/minute')\ndef slow_endpoint():\n    return 'OK'"""
"API से एक फाइल डाउनलोड करने की अनुमति दो","""from flask import send_file\n@app.route('/download/report')\ndef download_report():\n    return send_file('report.pdf', as_attachment=True)"""
"API में पेजिनेशन (Pagination) लागू करो","""@app.route('/api/items')\ndef get_items_paginated():\n    page = request.args.get('page', 1, type=int)\n    per_page = request.args.get('per_page', 10, type=int)\n    paginated_items = items[(page-1)*per_page : page*per_page]\n    return jsonify(paginated_items)"""
"API में सॉर्टिंग लागू करो","""@app.route('/api/items')\ndef get_items_sorted():\n    sort_by = request.args.get('sort_by', 'name')\n    # ... logic to sort items by the 'sort_by' field ...\n    return jsonify(sorted_items)"""
"API में फ़िल्टरिंग लागू करो","""@app.route('/api/items')\ndef get_items_filtered():\n    category = request.args.get('category')\n    if category:\n        filtered_items = [item for item in items if item['category'] == category]\n        return jsonify(filtered_items)\n    return jsonify(items)"""
"एक API एंडपॉइंट बनाओ जो GraphQL क्वेरी को हैंडल करे","""from flask_graphql import GraphQLView\napp.add_url_rule('/graphql', view_func=GraphQLView.as_view('graphql', schema=my_schema, graphiql=True))"""
"एक API जो बाहरी API से डेटा लाकर लौटाए","""import requests\n@app.route('/api/github-status')\ndef github_status():\n    response = requests.get('https://www.githubstatus.com/api/v2/status.json')\n    return jsonify(response.json())"""
"API में एक हेल्थ चेक एंडपॉइंट बनाओ","""@app.route('/health')\ndef health_check():\n    return jsonify({'status': 'ok'}), 200"""
"FastAPI में एक डायनामिक पाथ पैरामीटर का उपयोग करो","""@app.get('/files/{file_path:path}')\ndef read_file(file_path: str):\n    return {'file_path': file_path}"""
"FastAPI में डिपेंडेंसी इंजेक्शन का उपयोग करके डेटाबेस कनेक्शन मैनेज करो","""async def get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\n\n@app.get('/users/')\ndef read_users(db: Session = Depends(get_db)):\n    return db.query(User).all()"""
"API में बैकग्राउंड टास्क (जैसे ईमेल भेजना) चलाओ","""from threading import Thread\ndef send_email_async(...):\n    ...\n\n@app.route('/register')\ndef register():\n    # ...\n    Thread(target=send_email_async, args=(...)).start()\n    return 'OK'"""
"API में कैशिंग के लिए ETag हेडर का उपयोग करो","""# ETag is a hash of the content. Browser sends it back in If-None-Match header.\n# If it matches, server returns a 304 Not Modified status."""
"API में CORS (Cross-Origin Resource Sharing) को कॉन्फ़िगर करो","""from flask_cors import CORS\nCORS(app, resources={r'/api/*': {'origins': 'https://my-frontend.com'}})"""
"एक Webhook को हैंडल करने के लिए एक API एंडपॉइंट बनाओ","""@app.route('/webhook/github', methods=['POST'])\ndef handle_github_webhook():\n    if request.headers['Content-Type'] == 'application/json':\n        payload = request.json\n        # Process the payload from GitHub\n        return 'OK', 200"""
"FastAPI में एक WebSocket एंडपॉइंट बनाओ","""from fastapi import WebSocket\n@app.websocket('/ws')\nasync def websocket_endpoint(websocket: WebSocket):\n    await websocket.accept()\n    while True:\n        data = await websocket.receive_text()\n        await websocket.send_text(f'Message text was: {data}')"""
"API में लॉगिंग (Logging) को कॉन्फ़िगर करो","""import logging\nlogging.basicConfig(level=logging.INFO)\n\n@app.route('/api/test')\ndef test_api():\n    app.logger.info('API was called')\n    return 'OK'"""
"HTTP Basic Authentication का उपयोग करो","""from flask_httpauth import HTTPBasicAuth\nauth = HTTPBasicAuth()\n\n@app.route('/secret')\n@auth.login_required\ndef secret():\n    return 'Secret Content!'"""
"API डिजाइन में 'stateless' का क्या मतलब है","// Each request from a client to the server must contain all of the information needed to understand and complete the request. The server does not store any session state."
"API में एक idempotency की (key) का उपयोग करो","""# To prevent accidental duplicate requests (e.g., creating two orders for one click)\nidempotency_key = request.headers.get('Idempotency-Key')\n# ... check if this key has been processed before ..."""
"एक API को Prometheus मेट्रिक्स के लिए एक्सपोज़ करो","""from prometheus_flask_exporter import PrometheusMetrics\nmetrics = PrometheusMetrics(app)"""
"API में सर्वर-सेंट इवेंट्स (Server-Sent Events) का उपयोग करो","""from flask import Response\nimport time\n\n@app.route('/stream')\ndef stream():\n    def event_stream():\n        while True:\n            yield 'data: Hello\\n\\n'\n            time.sleep(1)\n    return Response(event_stream(), mimetype='text/event-stream')"""
"API की स्केलेबिलिटी का कॉन्सेप्ट","// The ability of an API to handle a growing amount of work by adding resources to the system."
"API में 'Throttling' का क्या मतलब है","// Throttling is the process of controlling the rate of requests sent or received by an API."
"API डिजाइन में 'Richardson Maturity Model' क्या है","// A model to classify the maturity of a web API, ranging from Level 0 (plain XML/HTTP) to Level 3 (fully hypermedia-driven)."
"एक GraphQL स्कीमा डिफाइन करो","""type Query {\n    hello: String\n}"""
"एक GraphQL रिजोल्वर (resolver) फंक्शन लिखो","""def resolve_hello(obj, info):\n    return 'world'"""
"AsyncAPI का कॉन्सेप्ट","// An open-source specification for defining asynchronous APIs, similar to OpenAPI for REST APIs."
"API के लिए एक 'Canary Release' का कॉन्सेप्ट","// A deployment strategy where a new API version is slowly rolled out to a small subset of users before making it available to everyone."
"API में 'Blue-Green Deployment' का कॉन्सेप्ट","// A strategy with two identical production environments (Blue and Green). Traffic is switched from the old version (Blue) to the new version (Green)."
"API के लिए एक मॉक सर्वर (mock server) बनाओ","// Use tools like Mockoon or Postman's mock server feature to simulate an API before it is built."
"API के लिए एंड-टू-एंड (end-to-end) टेस्टिंग लिखो","// Use a tool like Cypress or Playwright to test the full flow from a frontend client to the backend API."
"एक Singleton डिजाइन पैटर्न का इम्प्लीमेंटेशन","class Singleton:\n    _instance = None\n    def __new__(cls):\n        if cls._instance is None:\n            cls._instance = super().__new__(cls)\n        return cls._instance"
"एक Factory मेथड डिजाइन पैटर्न का इम्प्लीमेंटेशन","class Dog:\n    def speak(self): return 'Woof'\n\nclass Cat:\n    def speak(self): return 'Meow'\n\ndef get_pet(pet='dog'):\n    pets = dict(dog=Dog(), cat=Cat())\n    return pets[pet]"
"एक Abstract Factory डिजाइन पैटर्न का ढाँचा","class AbstractFactory:\n    def create_product_a(self): pass\n    def create_product_b(self): pass"
"एक Builder डिजाइन पैटर्न का ढाँचा","class Car:\n    # ...\n\nclass CarBuilder:\n    def set_wheels(self, n): pass\n    def set_color(self, color): pass\n    def get_car(self): return Car()"
"एक Prototype डिजाइन पैटर्न का इम्प्लीमेंटेशन","import copy\nclass Prototype:\n    def clone(self):\n        return copy.deepcopy(self)"
"एक Adapter डिजाइन पैटर्न का ढाँचा","class EuropeanSocket:\n    # ...\nclass USASocket:\n    # ...\nclass Adapter(USASocket):\n    def __init__(self, euro_socket):\n        self._euro_socket = euro_socket"
"एक Bridge डिजाइन पैटर्न का ढाँचा","class DrawingAPI: pass\nclass CircleShape:\n    def __init__(self, drawing_api): ... "
"एक Composite डिजाइन पैटर्न का ढाँचा","class Graphic: # Component\n    def render(self): pass\n\nclass CompositeGraphic(Graphic): # Composite\n    def __init__(self):\n        self.graphics = []"
"एक Decorator डिजाइन पैटर्न का इम्प्लीमेंटेशन","def my_decorator(func):\n    def wrapper():\n        print('Something is happening before.')\n        func()\n        print('Something is happening after.')\n    return wrapper"
"एक Facade डिजाइन पैटर्न का ढाँचा","class ComputerFacade:\n    def __init__(self):\n        self.cpu = CPU()\n        self.memory = Memory()\n    def start(self):\n        self.cpu.start()\n        self.memory.load()"
"एक Flyweight डिजाइन पैटर्न का कॉन्सेप्ट","// A pattern used to minimize memory usage by sharing as much data as possible with other similar objects."
"एक Proxy डिजाइन पैटर्न का ढाँचा","class RealSubject:\n    def request(self): pass\n\nclass Proxy:\n    def __init__(self):\n        self._real_subject = RealSubject()\n    def request(self):\n        # ... add extra logic ...\n        return self._real_subject.request()"
"एक Chain of Responsibility डिजाइन पैटर्न का ढाँचा","class Handler:\n    def __init__(self, successor=None):\n        self._successor = successor\n    def handle_request(self, request):\n        if self._successor:\n            self._successor.handle_request(request)"
"एक Command डिजाइन पैटर्न का ढाँचा","from abc import ABC, abstractmethod\nclass Command(ABC):\n    @abstractmethod\n    def execute(self): pass"
"एक Interpreter डिजाइन पैटर्न का कॉन्सेप्ट","// A pattern that specifies how to evaluate sentences in a language. Used in SQL parsers, etc."
"एक Iterator डिजाइन पैटर्न का इम्प्लीमेंटेशन","class MyIterator:\n    def __init__(self, data):\n        self.index = 0\n        self.data = data\n    def __next__(self):\n        if self.index >= len(self.data):\n            raise StopIteration\n        result = self.data[self.index]\n        self.index += 1\n        return result"
"एक Mediator डिजाइन पैटर्न का ढाँचा","class Mediator:\n    def notify(self, sender, event): pass\n\nclass Component:\n    def __init__(self, mediator):\n        self.mediator = mediator"
"एक Memento डिजाइन पैटर्न का ढाँचा","import copy\nclass Memento:\n    def __init__(self, state):\n        self._state = copy.deepcopy(state)\n\nclass Originator:\n    def create_memento(self): return Memento(self._state)"
"एक Observer डिजाइन पैटर्न का इम्प्लीमेंटेशन","class Subject:\n    def __init__(self):\n        self._observers = []\n    def attach(self, observer):\n        self._observers.append(observer)\n    def notify(self, message):\n        for observer in self._observers:\n            observer.update(message)"
"एक State डिजाइन पैटर्न का ढाँचा","from abc import ABC, abstractmethod\nclass State(ABC):\n    @abstractmethod\n    def handle(self): pass\n\nclass ConcreteStateA(State): pass"
"एक Strategy डिजाइन पैटर्न का इम्प्लीमेंटेशन","class Strategy: pass\nclass ConcreteStrategyA(Strategy): pass\nclass Context:\n    def __init__(self, strategy):\n        self._strategy = strategy"
"एक Template Method डिजाइन पैटर्न का ढाँचा","from abc import ABC, abstractmethod\nclass AbstractClass(ABC):\n    def template_method(self):\n        self.base_operation1()\n        self.required_operation1()\n    @abstractmethod\n    def required_operation1(self): pass"
"एक Visitor डिजाइन पैटर्न का ढाँचा","class Visitor: pass\nclass Element:\n    def accept(self, visitor): pass"
"MVC (Model-View-Controller) आर्किटेक्चर का कॉन्सेप्ट","// An architectural pattern that separates an application into three main logical components: the model, the view, and the controller."
"MVP (Model-View-Presenter) आर्किटेक्चर का कॉन्सेप्ट","// A derivation of MVC where the Presenter assumes the functionality of the 'middle-man'."
"MVVM (Model-View-ViewModel) आर्किटेक्चर का कॉन्सेप्ट","// An architectural pattern that facilitates a separation of development of the graphical user interface from development of the business logic or back-end logic (the data model)."
"मोनोलिथिक (Monolithic) आर्किटेक्चर का कॉन्सेप्ट","// An application built as a single, unified unit."
"माइक्रोसर्विसेज (Microservices) आर्किटेक्चर का कॉन्सेप्ट","// An architectural style that structures an application as a collection of loosely coupled, independently deployable services."
"इवेंट-ड्रिवन (Event-Driven) आर्किटेक्चर का कॉन्सेप्ट","// A software architecture paradigm promoting the production, detection, consumption of, and reaction to events."
"CQRS (Command Query Responsibility Segregation) का कॉन्सेप्ट","// A pattern that separates read and update operations for a data store."
"एक API Gateway डिजाइन पैटर्न","// A server that is the single entry point into the system, used to encapsulate the internal system architecture and provide an API that is tailored to each client."
"एक Circuit Breaker डिजाइन पैटर्न","// A pattern used to detect failures and encapsulates the logic of preventing a failure from constantly recurring."
"एक Service Discovery पैटर्न","// The process of automatically detecting devices and services on a network."
"एक Pub/Sub (Publish-Subscribe) पैटर्न","// A messaging pattern where senders (publishers) do not programmatically send their messages to specific receivers (subscribers). Instead, they publish messages to a topic, without knowledge of which subscribers, if any, there may be."
"एक Repository पैटर्न का ढाँचा","class UserRepository:\n    def get_by_id(self, id): pass\n    def add(self, user): pass"
"एक Unit of Work पैटर्न का कॉन्सेप्ट","// Maintains a list of objects affected by a business transaction and coordinates the writing out of changes."
"एक Dependency Injection (DI) का कॉन्सेप्ट","// A design pattern in which an object or function receives other objects or functions that it depends on."
"Inversion of Control (IoC) का कॉन्सेप्ट","// A programming principle where custom-written portions of a computer program receive the flow of control from a generic framework."
"SOLID सिद्धांत: Single Responsibility Principle (SRP)","// A class should have only one reason to change."
"SOLID सिद्धांत: Open/Closed Principle (OCP)","// Software entities should be open for extension, but closed for modification."
"SOLID सिद्धांत: Liskov Substitution Principle (LSP)","// Subtypes must be substitutable for their base types."
"SOLID सिद्धांत: Interface Segregation Principle (ISP)","// No client should be forced to depend on methods it does not use."
"SOLID सिद्धांत: Dependency Inversion Principle (DIP)","// High-level modules should not depend on low-level modules. Both should depend on abstractions."
"DRY (Don't Repeat Yourself) सिद्धांत","// A principle of software development aimed at reducing repetition of software patterns."
"KISS (Keep It Simple, Stupid) सिद्धांत","// A design principle that states that most systems work best if they are kept simple rather than made complicated."
"YAGNI (You Ain't Gonna Need It) सिद्धांत","// A principle of extreme programming (XP) that states a programmer should not add functionality until deemed necessary."
"Domain-Driven Design (DDD) का कॉन्सेप्ट","// A major software design approach, focusing on modeling software to match a domain according to input from that domain's experts."
"एक ग्राफ में बेलमैन-फोर्ड (Bellman-Ford) एल्गोरिथ्म का ढाँचा","def bellman_ford(graph, source):\n    # ... algorithm for single-source shortest paths with negative weights ..."
"एक ग्राफ में फ्लोयड-वॉर्शल (Floyd-Warshall) एल्गोरिथ्म का ढाँचा","def floyd_warshall(graph):\n    # ... algorithm for all-pairs shortest paths ..."
"एक मिनिमम स्पैनिंग ट्री (Minimum Spanning Tree) के लिए क्रुस्कल (Kruskal's) एल्गोरिथ्म","class Graph:\n    # ... Kruskal's algorithm implementation ..."
"एक मिनिमम स्पैनिंग ट्री के लिए प्रिम (Prim's) एल्गोरिथ्म","import heapq\ndef prims_algorithm(graph, start):\n    # ... Prim's algorithm implementation ..."
"एक डायरेक्टेड एसाइक्लिक ग्राफ (DAG) का टोपोलॉजिकल सॉर्ट (Topological Sort)","from collections import deque\ndef topological_sort(graph):\n    # ... Kahn's algorithm for topological sorting ..."
"एक AVL ट्री का नोड बनाओ","class AVLNode:\n    def __init__(self, key):\n        self.key = key\n        self.left = None\n        self.right = None\n        self.height = 1"
"एक रेड-ब्लैक ट्री (Red-Black Tree) का कॉन्सेप्ट","// A self-balancing binary search tree where each node has an extra bit for storing color (red or black)."
"एक बी-ट्री (B-Tree) का कॉन्सेप्ट","// A self-balancing tree data structure that maintains sorted data and allows searches, sequential access, insertions, and deletions in logarithmic time. Commonly used in databases."
"एक सेगमेंट ट्री (Segment Tree) का ढाँचा","class SegmentTree:\n    def __init__(self, arr):\n        # ... build the segment tree ..."
"एक फेनविक ट्री (Fenwick Tree) या बाइनरी इंडेक्स्ड ट्री (BIT)","class FenwickTree:\n    def __init__(self, size):\n        # ... initialize BIT ..."
"एक स्ट्रिंग में KMP (Knuth-Morris-Pratt) एल्गोरिथ्म का उपयोग करो","def kmp_search(pattern, text):\n    # ... KMP string-searching algorithm ..."
"रबिन-कार्प (Rabin-Karp) एल्गोरिथ्म का उपयोग करो","def rabin_karp_search(pattern, text):\n    # ... Rabin-Karp string-searching algorithm using hashing ..."
"एक 'Least Recently Used' (LRU) कैश का इम्प्लीमेंटेशन","from collections import OrderedDict\nclass LRUCache:\n    def __init__(self, capacity: int):\n        self.cache = OrderedDict()\n        self.capacity = capacity\n    # ... get and put methods ..."
"ट्रैवलिंग सेल्समैन प्रॉब्लम (Traveling Salesman Problem) का कॉन्सेप्ट","// Given a list of cities and the distances between each pair of cities, what is the shortest possible route that visits each city exactly once and returns to the origin city?"
"बैकट्रैकिंग (Backtracking) एल्गोरिथ्म का एक उदाहरण (N-Queens प्रॉब्लम)","def solve_n_queens(n):\n    # ... backtracking algorithm to solve N-Queens ..."
"एक डिवाइड एंड कॉन्कर (Divide and Conquer) एल्गोरिथ्म का उदाहरण (Merge Sort)","// Merge Sort is a classic divide and conquer algorithm."
"एक ग्रीडी एल्गोरिथ्म (Greedy Algorithm) का एक उदाहरण (Coin Change)","def greedy_coin_change(coins, amount):\n    # ... greedy approach to making change ..."
"कॉन्वेक्स हल (Convex Hull) को खोजने के लिए एक एल्गोरिथ्म","def convex_hull(points):\n    # ... Graham scan or Monotone Chain algorithm ..."
"एक लाइन इंटरसेक्शन एल्गोरिथ्म","def line_intersection(line1, line2):\n    # ... algorithm to find the intersection point of two lines ..."
"एक मैक्सिमम फ्लो (Maximum Flow) प्रॉब्लम (Ford-Fulkerson)","def ford_fulkerson(graph, source, sink):\n    # ... Ford-Fulkerson algorithm for max flow problem ..."
"एक बिटमास्किंग (Bitmasking) तकनीक का उपयोग करो","mask = 1 << 5 # Set the 5th bit"
"एक फास्ट फूरियर ट्रांसफॉर्म (FFT) का कॉन्सेप्ट","// An algorithm that computes the discrete Fourier transform (DFT) of a sequence, or its inverse (IDFT)."
"मोंटे कार्लो (Monte Carlo) सिमुलेशन का एक उदाहरण (पाई का अनुमान)","import random\ndef estimate_pi(n):\n    # ... Monte Carlo simulation ..."
"एक मार्कोव चेन (Markov Chain) का कॉन्सेप्ट","// A stochastic model describing a sequence of possible events in which the probability of each event depends only on the state attained in the previous event."
"एक जेनेटिक एल्गोरिथ्म (Genetic Algorithm) का ढाँचा","def genetic_algorithm():\n    # 1. Initialization\n    # 2. Selection\n    # 3. Crossover\n    # 4. Mutation"
"एक न्यूरल नेटवर्क का 'फॉरवर्ड पास' मैन्युअल रूप से लिखो","import numpy as np\n# ... define weights and biases ...\noutput = np.dot(weights, input) + bias"
"एक न्यूरल नेटवर्क का 'बैकप्रोपेगेशन' का कॉन्सेप्ट","// The primary algorithm for training artificial neural networks, used to calculate the gradient of the loss function with respect to the network's weights."
"एक सिंपल डिसेंट्रलाइज्ड एप्लीकेशन (DApp) का कॉन्सेप्ट (ब्लॉकचैन)","// An application that runs on a decentralized peer-to-peer network, like Ethereum."
"एक स्मार्ट कॉन्ट्रैक्ट (Smart Contract) का उदाहरण (Solidity)","pragma solidity ^0.8.0;\ncontract HelloWorld {\n    string public greet = ""Hello, World!"";\n}"
"क्रिप्टोग्राफिक हैश फंक्शन (SHA-256) का उपयोग करो","import hashlib\nhash_object = hashlib.sha256(b'Hello World')\nhex_dig = hash_object.hexdigest()"
"पब्लिक-की क्रिप्टोग्राफी (Public-Key Cryptography) का कॉन्सेप्ट","// A cryptographic system that uses pairs of keys: public keys, which may be disseminated widely, and private keys, which are known only to the owner."
"एक ब्लॉसम फ़िल्टर (Blossom Filter) का कॉन्सेप्ट","// A data structure that is an extension of a bloom filter and used for approximate counting of elements in a multiset."
"एक काउंट-मिन स्केच (Count-Min Sketch) का कॉन्सेप्ट","// A probabilistic data structure that serves as a frequency table of events in a stream of data."
"एक हाइपरलॉगॉग (HyperLogLog) का कॉन्सेप्ट","// A probabilistic algorithm for the count-distinct problem, approximating the number of distinct elements in a multiset."
"एक K-d ट्री (K-d Tree) का कॉन्सेप्ट","// A space-partitioning data structure for organizing points in a k-dimensional space."
"एक R-ट्री (R-Tree) का कॉन्सेप्ट","// A tree data structure used for spatial access methods, i.e., for indexing multi-dimensional information such as geographical coordinates."
"एक स्पेस-टाइम ट्रेडऑफ (Space-Time Tradeoff) का कॉन्सेप्ट","// A situation where a problem can be solved in less time by using more storage space, or in less space by taking more time."
"एक क्रिप्टोग्राफिक साल्ट (Salt) का उपयोग करो","import os\nsalt = os.urandom(16)"
"एक की डेरिवेशन फंक्शन (Key Derivation Function) जैसे PBKDF2 का उपयोग करो","import hashlib\npassword = b'my-pass'\nsalt = os.urandom(16)\nkey = hashlib.pbkdf2_hmac('sha256', password, salt, 100000)"
"एक कांस्टेंट-टाइम तुलना (Constant-Time Comparison) का उपयोग करो","import hmac\nhmac.compare_digest(a, b)"
"एक लीप ईयर (Leap Year) की गणना करने के लिए एक फंक्शन लिखो","def is_leap(year):\n    return year % 4 == 0 and (year % 100 != 0 or year % 400 == 0)"
"एक स्ट्रिंग के सभी सबस्ट्रिंग्स को जेनरेट करो","def get_all_substrings(s):\n    return [s[i:j] for i in range(len(s)) for j in range(i+1, len(s)+1)]"
"एक 'Edit Distance' (Levenshtein Distance) एल्गोरिथ्म लिखो","def levenshtein_distance(s1, s2):\n    # ... DP solution for edit distance ..."
"एक 'Reservoir Sampling' एल्गोरिथ्म का इम्प्लीमेंटेशन","import random\ndef reservoir_sample(stream, k):\n    # ... algorithm to get a random sample of k items from a stream of unknown size ..."
"एक 'Fisher-Yates Shuffle' एल्गोरिथ्म का इम्प्लीमेंटेशन","import random\ndef fisher_yates_shuffle(arr):\n    # ... algorithm to shuffle a list in-place ..."
"एक M-वे ट्री (M-way Tree) का कॉन्सेप्ट","// A tree where each node can have more than two children (unlike a binary tree)."
"एक B+ ट्री का कॉन्सेप्ट","// A variation of the B-tree. The main difference is that in a B+ tree, all data is stored in the leaf nodes."
"एक Quadtree का कॉन्सेप्ट","// A tree data structure in which each internal node has exactly four children, used to partition a two-dimensional space."
"एक प्रोडक्ट कार्ड कॉम्पोनेन्ट बनाओ","<div class='product-card' style='border:1px solid #ddd; width:200px; text-align:center;'><img src='product.jpg' width='100%' alt='Product'><h3 class='product-title'>Product Name</h3><p class='product-price'>$19.99</p><button>Add to Cart</button></div>"
"एक प्रोडक्ट ग्रिड लेआउट बनाओ","<div class='product-grid' style='display:grid; grid-template-columns:repeat(auto-fit, minmax(200px, 1fr)); gap:15px;'>...product cards here...</div>"
"एक 'Add to Cart' बटन बनाओ जो एक आइटम को कार्ट में जोड़े","<button onclick=""addToCart({id:1, name:'Product 1', price:20})"">Add to Cart</button><script>let cart=[]; function addToCart(product){cart.push(product); console.log(cart);}</script>"
"शॉपिंग कार्ट में आइटम्स की संख्या दिखाने वाला एक आइकन बनाओ","<div id='cart-icon'>Cart (<span id='cart-count'>0</span>)</div>"
"शॉपिंग कार्ट का UI बनाओ","<div class='shopping-cart'><h2>Your Cart</h2><ul id='cart-items'></ul><p>Total: $<span id='cart-total'>0.00</span></p></div>"
"जावास्क्रिप्ट में शॉपिंग कार्ट के टोटल की गणना करो","function calculateTotal(){\n  let total = cart.reduce((sum, item) => sum + item.price, 0);\n  document.getElementById('cart-total').innerText = total.toFixed(2);\n}"
"एक प्रोडक्ट की मात्रा (quantity) को बदलने के लिए एक इनपुट बनाओ","<input type='number' value='1' min='1' onchange='updateQuantity(1, this.value)'>"
"एक चेकआउट फॉर्म का ढाँचा बनाओ","<form id='checkout-form'><fieldset><legend>Shipping Address</legend>...</fieldset><fieldset><legend>Payment Details</legend>...</fieldset><button>Place Order</button></form>"
"प्रोडक्ट्स को फ़िल्टर करने के लिए एक साइडबार बनाओ","<aside><div class='filter-group'><h3>Category</h3><input type='checkbox'> Electronics</div></aside>"
"एक प्रोडक्ट सर्च बार बनाओ","<input type='search' placeholder='Search for products...'>"
"एक प्रोडक्ट पेज पर इमेज थंबनेल गैलरी बनाओ","<img id='main-image' src='img1.jpg' width='300'><div class='thumbnails'><img src='img1.jpg' onclick=""document.getElementById('main-image').src=this.src"">...</div>"
"एक स्टार रेटिंग डिस्प्ले कॉम्पोनेन्ट बनाओ","<div><span>★★★★</span>☆</div>"
"एक 'Sale' (बिक्री) बैज बनाओ","<div style='position:relative;'><img src='product.jpg'><span style='position:absolute; top:10px; left:10px; background:red; color:white; padding:5px;'>SALE</span></div>"
"एक 'Out of Stock' (स्टॉक में नहीं) लेबल दिखाओ","<button disabled>Out of Stock</button>"
"एक इच्छा-सूची (wishlist) में जोड़ने के लिए एक बटन बनाओ","<button onclick='addToWishlist(1)'>❤️ Add to Wishlist</button>"
"प्रोडक्ट्स को कीमत के आधार पर सॉर्ट करने के लिए एक ड्रॉपडाउन","<select onchange='sortProducts(this.value)'><option value='price_asc'>Price: Low to High</option><option value='price_desc'>Price: High to Low</option></select>"
"एक प्रोडक्ट की तुलना (compare) करने के लिए चेकबॉक्स बनाओ","<input type='checkbox' onchange='compareProduct(1, this.checked)'> Compare"
"एक 'Quick View' मोडल (modal) बनाओ","<button onclick=""showQuickView(1)"">Quick View</button>"
"एक 'Related Products' (संबंधित उत्पाद) सेक्शन बनाओ","<section><h2>Related Products</h2>...product cards...</section>"
"एक ब्रेडक्रंब (breadcrumb) नेविगेशन बनाओ","<nav>Home > Electronics > Laptops</nav>"
"एक डिस्काउंट कूपन अप्लाई करने के लिए एक इनपुट फील्ड बनाओ","<input placeholder='Coupon Code'><button>Apply</button>"
"शिपिंग विकल्पों के लिए रेडियो बटन बनाओ","<div><input type='radio' name='shipping'> Standard</div><div><input type='radio' name='shipping'> Express</div>"
"एक प्रोडक्ट ज़ूम इफ़ेक्ट बनाओ","<style>.zoom-img:hover{transform:scale(1.2);}</style><img class='zoom-img' src='product.jpg' style='transition:transform 0.2s;'>"
"एक 'Recently Viewed' (हाल ही में देखे गए) प्रोडक्ट्स का सेक्शन बनाओ","<section><h2>Recently Viewed</h2><div id='recently-viewed-container'></div></section>"
"एक प्रोडक्ट के लिए कस्टमर रिव्यु (review) सेक्शन बनाओ","<div class='reviews'><h3>Reviews</h3><div class='review'>...</div></div>"
"एक रिव्यु सबमिट करने के लिए एक फॉर्म बनाओ","<form><label>Rating:</label><select>...</select><label>Review:</label><textarea></textarea><button>Submit Review</button></form>"
"एक 'Best Sellers' (सबसे ज़्यादा बिकने वाले) सेक्शन बनाओ","<section><h2>Best Sellers</h2>...</section>"
"एक 'New Arrivals' (नए आगमन) सेक्शन बनाओ","<section><h2>New Arrivals</h2>...</section>"
"एक प्रोडक्ट के विभिन्न रंगों (color swatches) को दिखाओ","<div class='swatches'><span style='background:red; width:20px; height:20px; display:inline-block;'></span>...</div>"
"प्रोडक्ट के विभिन्न साइज़ चुनने के लिए बटन बनाओ","<div class='sizes'><button>S</button><button>M</button><button>L</button></div>"
"एक 'Add to Cart' कन्फर्मेशन मैसेज दिखाओ","<div id='confirm-msg' style='display:none;'>Product added to cart!</div>"
"शॉपिंग कार्ट से एक आइटम को हटाने के लिए एक बटन","<li id='cart-item-1'>Product 1 <button onclick=""document.getElementById('cart-item-1').remove()"">Remove</button></li>"
"चेकआउट पेज पर आर्डर का सारांश (order summary) दिखाओ","<div class='order-summary'><h3>Order Summary</h3>...</div>"
"एक 'Notify Me' फॉर्म बनाओ जब प्रोडक्ट स्टॉक में न हो","<p>Out of stock.</p><form><input type='email' placeholder='Enter your email'><button>Notify Me</button></form>"
"एक 'Size Chart' (साइज़ चार्ट) लिंक बनाओ जो एक मोडल खोले","<a href='#' onclick=""showSizeChartModal()"">Size Chart</a>"
"एक 'Gift Wrap' (गिफ्ट रैप) विकल्प के लिए एक चेकबॉक्स","<input type='checkbox'> Add gift wrap"
"एक प्रोडक्ट की डिलीवरी की अनुमानित तारीख दिखाओ","<p>Estimated delivery: Oct 10, 2025</p>"
"सोशल मीडिया पर एक प्रोडक्ट को शेयर करने के लिए बटन","<button>Share on Facebook</button>"
"एक 'Customers who bought this also bought' सेक्शन","<section><h2>Customers also bought</h2>...</section>"
"एक प्रोडक्ट के लिए FAQ सेक्शन","<section><h2>Questions & Answers</h2>...</section>"
"एक 'Terms and Conditions' चेकबॉक्स जो चेकआउट पर ज़रूरी हो","<input type='checkbox' required> I agree to the Terms and Conditions"
"पेमेंट मेथड (Credit Card, PayPal) चुनने के लिए आइकन","<div><img src='visa.png'> <img src='paypal.png'></div>"
"एक 'Track Order' पेज का UI बनाओ","<form><label>Order ID:</label><input><button>Track</button></form>"
"एक 'My Account' पेज का डैशबोर्ड UI","<div class='dashboard'>...links to Orders, Profile, etc...</div>"
"एक 'Order History' टेबल बनाओ","<table><tr><th>Order ID</th><th>Date</th><th>Total</th><th>Status</th></tr>...</table>"
"एक 'Write a Review' बटन जो एक फॉर्म खोले","<button>Write a Review</button>"
"एक इनवॉइस (invoice) का HTML टेम्पलेट बनाओ","<div class='invoice'>...</div>"
"एक 'Abandoned Cart' ईमेल का कॉन्सेप्ट","// An email sent to a user who added items to their cart but did not complete the purchase."
"अपसेल (Upsell) और क्रॉस-सेल (Cross-sell) का कॉन्सेप्ट","// Upsell: Encouraging a customer to buy a more expensive version. Cross-sell: Encouraging a customer to buy related items."
"पेज लोड होने पर सभी ब्लॉग पोस्ट्स को फेच करो और दिखाओ","""<div id='posts-container'></div>\n<script>\nwindow.onload = () => {\n  fetch('/api/posts').then(r=>r.json()).then(posts => {\n    const container = document.getElementById('posts-container');\n    posts.forEach(post => {\n      container.innerHTML += `<h2>${post.title}</h2>`;\n    });\n  });\n};\n</script>"""
"एक लिंक पर क्लिक करके एक सिंगल पोस्ट का कंटेंट फेच करो","""<a href='#' onclick=""fetchPost(1)"">Read Post 1</a>\n<div id='single-post'></div>\n<script>\nfunction fetchPost(id) {\n  fetch(`/api/posts/${id}`).then(r=>r.json()).then(post=>{\n    document.getElementById('single-post').innerHTML = `<p>${post.content}</p>`;\n  });\n}\n</script>"""
"एक नया ब्लॉग पोस्ट बनाने के लिए एक फॉर्म बनाओ","""<form id='new-post-form'>\n  <input id='title-input' placeholder='Title'>\n  <textarea id='content-input' placeholder='Content'></textarea>\n  <button type='submit'>Create Post</button>\n</form>"""
"AJAX का उपयोग करके नया पोस्ट बनाने वाले फॉर्म को सबमिट करो","""<script>\ndocument.getElementById('new-post-form').addEventListener('submit', e => {\n  e.preventDefault();\n  const title = document.getElementById('title-input').value;\n  const content = document.getElementById('content-input').value;\n  fetch('/api/posts', {\n    method: 'POST',\n    headers: {'Content-Type': 'application/json'},\n    body: JSON.stringify({title: title, content: content})\n  });\n});\n</script>"""
"एक पोस्ट को डिलीट करने के लिए एक बटन बनाओ","""<button onclick=""deletePost(1)"">Delete Post 1</button>\n<script>\nfunction deletePost(id) {\n  if(confirm('Are you sure?')){\n    fetch(`/api/posts/${id}`, { method: 'DELETE' });\n  }\n}\n</script>"""
"एक पोस्ट को एडिट करने के लिए एक फॉर्म दिखाओ","""<button onclick=""showEditForm(1)"">Edit Post 1</button>\n<div id='edit-form-container'></div>"""
"जावास्क्रिप्ट से एक डायनामिक सर्च फंक्शन बनाओ","""<input placeholder='Search posts...' onkeyup=""fetch('/api/search?q='+this.value).then(r=>r.json()).then(results => {\n  // ... display search results ...\n});"">"""
"पेजिनेशन बटन्स (Next/Previous) के लिए जावास्क्रिप्ट लिखो","""let currentPage = 1;\nfunction loadPage(page) {\n  fetch(`/api/posts-paginated?page=${page}`).then(r=>r.json()).then(data => {\n    // ... display posts for the page ...\n    currentPage = page;\n  });\n}"""
"एक 'Load More' बटन बनाओ जो और पोस्ट्स लोड करे","""<button id='load-more' onclick=""loadPage(currentPage + 1)"">Load More</button>"""
"एक पोस्ट पर कमेंट करने के लिए एक फॉर्म बनाओ","""<form onsubmit=""addComment(1, this.comment.value); return false;"">\n  <input name='comment' placeholder='Add a comment...'>\n  <button>Submit</button>\n</form>"""
"एक पोस्ट के सभी कमेंट्स को फेच करो और दिखाओ","""<ul id='comments-list'></ul>\n<script>\nfetch('/api/posts/1/comments').then(r=>r.json()).then(comments => {\n  // ... loop and display comments in the list ...\n});\n</script>"""
"एक 'Like' बटन बनाओ जो API को कॉल करे और लाइक काउंट अपडेट करे","""<p>Likes: <span id='like-count-1'>0</span></p>\n<button onclick=""fetch('/api/posts/1/like', {method:'POST'}).then(r=>r.json()).then(d=>document.getElementById('like-count-1').innerText=d.likes);"">Like</button>"""
"यूज़र रजिस्ट्रेशन के लिए एक AJAX फॉर्म बनाओ","""<form id='register-form'>...</form>\n<script>// JS to submit registration form data as JSON via fetch POST</script>"""
"यूज़र लॉगइन के लिए एक AJAX फॉर्म बनाओ और JWT टोकन को सेव करो","""<script>\n// ... on form submit ...\nfetch('/api/login', ...).then(r=>r.json()).then(d=>{\n  if(d.token) localStorage.setItem('jwt_token', d.token);\n});\n</script>"""
"हर प्रोटेक्टेड API रिक्वेस्ट के साथ JWT टोकन भेजो","""<script>\nconst token = localStorage.getItem('jwt_token');\nfetch('/api/protected', { headers: {'Authorization': `Bearer ${token}`} });\n</script>"""
"लॉगआउट बटन बनाओ जो JWT टोकन को हटाए","""<button onclick=""localStorage.removeItem('jwt_token');"">Logout</button>"""
"Markdown कंटेंट को HTML में बदलने के लिए एक लाइब्रेरी (जैसे Showdown) का उपयोग करो","""<script src='showdown.min.js'></script>\n<script>\n  const converter = new showdown.Converter();\n  const markdownText = '**Hello**';\n  const html = converter.makeHtml(markdownText);\n</script>"""
"API से मिले Markdown कंटेंट को पेज पर रेंडर करो","""fetch('/api/posts/1').then(r=>r.json()).then(post => {\n  const htmlContent = new showdown.Converter().makeHtml(post.content);\n  document.getElementById('post-body').innerHTML = htmlContent;\n});"""
"तारीख को एक रीडेबल फॉर्मेट में दिखाने के लिए एक जावास्क्रिप्ट फंक्शन","""function formatDate(isoString) {\n  return new Date(isoString).toLocaleDateString();\n}"""
"एक लोडिंग स्पिनर दिखाओ जब API कॉल चल रही हो","""function fetchData(){\n  document.getElementById('spinner').style.display = 'block';\n  fetch('...').finally(() => {\n    document.getElementById('spinner').style.display = 'none';\n  });\n}"""
"API से एरर आने पर यूज़र को एक एरर मैसेज दिखाओ","""<p id='error-display' style='color:red;'></p>\n<script>\nfetch('/api/invalid').catch(err => {\n  document.getElementById('error-display').innerText = 'Could not load data.';\n});\n</script>"""
"एक 'Single Page Application' (SPA) का बेसिक राउटर बनाओ","""<script>\nwindow.onhashchange = function() {\n  // Logic to show content based on URL hash (e.g., #/about)\n}\n</script>"""
"वेबसाइट में एक सिंपल डार्क मोड टॉगल बनाओ","""<button onclick=""document.body.classList.toggle('dark-mode')"">Toggle Dark Mode</button>"""
"एक ब्लॉग पोस्ट के लिए 'टैग्स' की लिस्ट दिखाओ","""// Assuming API returns post.tags = ['tech', 'python']\nconst tagsHtml = post.tags.map(tag => `<span>${tag}</span>`).join(' ');"""
"एक ब्लॉग पोस्ट के लेखक का नाम दिखाओ","""// Assuming API returns post.author = {name: 'Amit'}\ndocument.getElementById('author').innerText = `By ${post.author.name}`;"""
"एक नया पोस्ट बनाने के बाद पेज को री-रेंडर करो","""fetch('/api/posts', {method:'POST',...}).then(() => {\n  // Call the function that fetches and renders all posts again\n  fetchAllPosts();\n});"""
"URL से पोस्ट ID निकालो और उस पोस्ट को फेच करो","""<script>\nconst postId = window.location.pathname.split('/').pop();\nif(postId) fetchPost(postId);\n</script>"""
"WebSocket का उपयोग करके रियल-टाइम कमेंट्स दिखाओ","""<script>\nconst socket = io();\nsocket.on('new_comment', function(comment) {\n  // Add the new comment to the comments list without reloading\n});\n</script>"""
"WebSocket से कनेक्ट करने के लिए जावास्क्रिप्ट कोड","""<script src='https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.0.1/socket.io.js'></script>\n<script>var socket = io.connect('http://' + document.domain + ':' + location.port);</script>"""
"यूज़र को एक पोस्ट एडिट करने के लिए एक इन-प्लेस एडिटर दो","""<div id='content-div' ondblclick=""this.contentEditable=true"">...</div>"""
"फ्रंटएंड पर फॉर्म वैलिडेशन (ईमेल) करो","""<form onsubmit=""const email = this.email.value; if(!email.includes('@')){alert('Invalid email'); return false;}"">...</form>"""
"API से मिले पेजिनेशन डेटा को हैंडल करो","""// API returns { 'posts': [...], 'has_next': true, 'next_page': 3 }\nif (data.has_next) {\n  document.getElementById('load-more-btn').style.display = 'block';\n}"""
"एक इमेज अपलोड फॉर्म बनाओ जो `FormData` का उपयोग करे","""<input type='file' id='image-input'>\n<script>\nconst fileInput = document.getElementById('image-input');\nconst formData = new FormData();\nformData.append('image', fileInput.files[0]);\nfetch('/api/upload', {method:'POST', body:formData});\n</script>"""
"एक 'infinite scroll' फीचर बनाओ","""<script>\nwindow.addEventListener('scroll', () => {\n  if (window.innerHeight + window.scrollY >= document.body.offsetHeight - 100) {\n    // Load more posts\n  }\n});\n</script>"""
"एक 'debounce' फंक्शन का उपयोग करके सर्च API कॉल्स को ऑप्टिमाइज़ करो","""<script>\nfunction debounce(func, delay) {\n  let timeout;\n  return function(...args) {\n    clearTimeout(timeout);\n    timeout = setTimeout(() => func.apply(this, args), delay);\n  };\n}\n\nconst efficientSearch = debounce(searchTerm => fetch('/api/search?q='+searchTerm), 300);\n</script>"""
"एक 'throttle' फंक्शन का उपयोग करके स्क्रॉल इवेंट्स को ऑप्टिमाइज़ करो","""<script>\nfunction throttle(func, limit) { ... }\nwindow.addEventListener('scroll', throttle(() => console.log('Scrolled!'), 100));\n</script>"""
"एक ब्राउज़र नोटिफिकेशन (Notification API) भेजो","""<button onclick=""Notification.requestPermission().then(p=>{if(p==='granted') new Notification('New Post!')});"">Notify</button>"""
"एक पोस्ट को शेयर करने के लिए Web Share API का उपयोग करो","""<button onclick=""navigator.share({title: 'Blog Post', url: '/posts/1'})"">Share</button>"""
"फ्रंटएंड पर एक JSON ऑब्जेक्ट को सुंदर तरीके से दिखाओ","""<pre id='json-output'></pre>\n<script>\nconst myJson = {a:1, b:2};\ndocument.getElementById('json-output').textContent = JSON.stringify(myJson, null, 2);\n</script>"""
"एक पोस्ट को localStorage का उपयोग करके 'बुकमार्क' करो","""<button onclick=""localStorage.setItem('bookmark_1', 'true')"">Bookmark Post 1</button>"""
"एक लोडिंग स्केलेटन (skeleton) स्क्रीन बनाओ","""<div class='post-skeleton' style='background:#eee; height:100px; margin:10px;'></div>"""
"एक पोस्ट के 'पढ़ने का समय' (reading time) कैलकुलेट करो","""<script>\nfunction calculateReadingTime(text) {\n  const wordsPerMinute = 200;\n  const wordCount = text.trim().split(/\s+/).length;\n  return Math.ceil(wordCount / wordsPerMinute);\n}\n</script>"""
"एक ब्लॉग पोस्ट के लिए एक 'Table of Contents' जेनरेट करो","""<ul id='toc'></ul>\n<script>\ndocument.querySelectorAll('h2').forEach(h2 => {\n  const id = h2.textContent.toLowerCase().replace(/ /g, '-');\n  h2.id = id;\n  document.getElementById('toc').innerHTML += `<li><a href='#${id}'>${h2.textContent}</a></li>`;\n});\n</script>"""
"यूज़र से एक कन्फर्मेशन डायलॉग (dialog) दिखाओ","""<button onclick=""if(confirm('Are you sure you want to delete this?')){...}"">Delete</button>"""
"Fetch API में `AbortController` का उपयोग करके एक रिक्वेस्ट को कैंसिल करो","""<script>\nconst controller = new AbortController();\nconst signal = controller.signal;\nfetch('...', {signal});\n// To cancel:\ncontroller.abort();\n</script>"""
"एक नया पोस्ट बनाने के बाद यूज़र को उस पोस्ट पर रीडायरेक्ट करो","""fetch('/api/posts', {method:'POST',...}).then(r=>r.json()).then(d=>{\n  window.location.href = `/posts/${d.id}`;\n});"""
"एक API कॉल के लिए एक टाइमआउट सेट करो","""<script>\nconst controller = new AbortController();\nconst timeoutId = setTimeout(() => controller.abort(), 5000); // 5 second timeout\nfetch('...', {signal: controller.signal}).finally(()=>clearTimeout(timeoutId));\n</script>"""
"एक सिंपल WYSIWYG एडिटर का ढाँचा बनाओ","""<div contenteditable='true' style='border:1px solid; height:150px;'></div>\n<button onclick=""document.execCommand('bold')"">Bold</button>"""
"एक ब्लॉग के लिए User और Post डेटाबेस मॉडल बनाओ","""# In models.py\nfrom flask_sqlalchemy import SQLAlchemy\ndb = SQLAlchemy()\n\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    username = db.Column(db.String(80), unique=True, nullable=False)\n\nclass Post(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    title = db.Column(db.String(120), nullable=False)\n    content = db.Column(db.Text, nullable=False)\n    author_id = db.Column(db.Integer, db.ForeignKey('user.id'))"""
"Flask ऐप को SQLAlchemy डेटाबेस के साथ कॉन्फ़िगर करो","""# In app.py\nfrom flask import Flask\nfrom models import db\n\napp = Flask(__name__)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///blog.db'\ndb.init_app(app)"""
"सभी ब्लॉग पोस्ट्स को लौटाने वाला एक API एंडपॉइंट बनाओ","""@app.route('/api/posts', methods=['GET'])\ndef get_all_posts():\n    posts = Post.query.all()\n    return jsonify([{'id': p.id, 'title': p.title} for p in posts])"""
"एक सिंगल ब्लॉग पोस्ट को ID से लौटाने वाला API बनाओ","""@app.route('/api/posts/<int:post_id>', methods=['GET'])\ndef get_post(post_id):\n    post = Post.query.get_or_404(post_id)\n    return jsonify({'title': post.title, 'content': post.content})"""
"एक नया ब्लॉग पोस्ट बनाने के लिए एक API एंडपॉइंट बनाओ","""@app.route('/api/posts', methods=['POST'])\ndef create_post():\n    data = request.json\n    new_post = Post(title=data['title'], content=data['content'])\n    db.session.add(new_post)\n    db.session.commit()\n    return jsonify({'id': new_post.id}), 201"""
"एक ब्लॉग पोस्ट को अपडेट करने के लिए एक API एंडपॉइंट बनाओ","""@app.route('/api/posts/<int:post_id>', methods=['PUT'])\ndef update_post(post_id):\n    post = Post.query.get_or_404(post_id)\n    data = request.json\n    post.title = data.get('title', post.title)\n    post.content = data.get('content', post.content)\n    db.session.commit()\n    return jsonify({'message': 'Post updated'})"""
"एक ब्लॉग पोस्ट को डिलीट करने के लिए एक API एंडपॉइंट बनाओ","""@app.route('/api/posts/<int:post_id>', methods=['DELETE'])\ndef delete_post(post_id):\n    post = Post.query.get_or_404(post_id)\n    db.session.delete(post)\n    db.session.commit()\n    return jsonify({'message': 'Post deleted'})"""
"Flask-Migrate का उपयोग करके डेटाबेस माइग्रेशन सेटअप करो","""from flask_migrate import Migrate\nmigrate = Migrate(app, db)"""
"Alembic माइग्रेशन स्क्रिप्ट बनाओ","flask db migrate -m 'Initial migration.'"
"Alembic माइग्रेशन को डेटाबेस पर अप्लाई करो","flask db upgrade"
"एक Flask कमांड बनाओ जो डेटाबेस को इनिशियलाइज़ करे","""@app.cli.command('init-db')\ndef init_db_command():\n    db.create_all()\n    print('Initialized the database.')"""
"ब्लॉग के लिए एक 'Comment' मॉडल बनाओ","""class Comment(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    text = db.Column(db.String(200), nullable=False)\n    post_id = db.Column(db.Integer, db.ForeignKey('post.id'))"""
"एक पोस्ट के सभी कमेंट्स को लौटाने वाला API बनाओ","""@app.route('/api/posts/<int:post_id>/comments')\ndef get_comments(post_id):\n    comments = Comment.query.filter_by(post_id=post_id).all()\n    return jsonify([{'text': c.text} for c in comments])"""
"एक पोस्ट पर नया कमेंट करने के लिए API बनाओ","""@app.route('/api/posts/<int:post_id>/comments', methods=['POST'])\ndef add_comment(post_id):\n    new_comment = Comment(text=request.json['text'], post_id=post_id)\n    db.session.add(new_comment)\n    db.session.commit()\n    return jsonify({'id': new_comment.id})"""
"ब्लॉग पोस्ट मॉडल में एक 'created_at' फील्ड जोड़ो","""created_at = db.Column(db.DateTime, default=datetime.utcnow)"""
"पोस्ट्स को लेटेस्ट पहले के क्रम में क्वेरी करो","""posts = Post.query.order_by(Post.created_at.desc()).all()"""
"एक API बनाओ जो पोस्ट्स को पेजिनेट (paginate) करे","""@app.route('/api/posts-paginated')\ndef get_paginated_posts():\n    page = request.args.get('page', 1, type=int)\n    pagination = Post.query.paginate(page=page, per_page=5)\n    return jsonify([...]) # Return paginated data"""
"एक यूज़र रजिस्ट्रेशन के लिए API एंडपॉइंट","""@app.route('/api/register', methods=['POST'])\ndef register():\n    # ... create user and hash password ...\n    return jsonify({'message': 'User created'})"""
"एक यूज़र लॉगइन के लिए API एंडपॉइंट जो JWT टोकन लौटाए","""@app.route('/api/login', methods=['POST'])\ndef login():\n    # ... check credentials ...\n    # token = create_jwt_token(...)\n    return jsonify({'token': token})"""
"एक प्रोटेक्टेड API रूट बनाओ जो JWT टोकन की जाँच करे","""@app.route('/api/protected')\n@jwt_required()\ndef protected():\n    return jsonify({'message': 'This is a protected route'})"""
"ब्लॉग के लिए एक 'Tag' मॉडल बनाओ (Many-to-Many)","""tags = db.Table('tags', ...)\nclass Post(db.Model):\n    tags = db.relationship('Tag', secondary=tags, backref='posts')"""
"एक पोस्ट को उसके टैग्स के साथ लौटाने वाला API","""@app.route('/api/posts/<int:id>')\ndef get_post_with_tags(id):\n    post = Post.query.get(id)\n    return jsonify({'title': post.title, 'tags': [tag.name for tag in post.tags]})"""
"एक सर्च API बनाओ जो टाइटल और कंटेंट में खोजे","""@app.route('/api/search')\ndef search():\n    query = request.args.get('q')\n    results = Post.query.filter(Post.title.contains(query) | Post.content.contains(query)).all()\n    return jsonify([...])"""
"Flask-CORS का उपयोग करके API पर CORS इनेबल करो","""from flask_cors import CORS\nCORS(app, resources={r'/api/*': {'origins': '*'}})"""
"Flask-SQLAlchemy में रिलेशनशिप के लिए `back_populates` का उपयोग करो","""class User(db.Model):\n    posts = db.relationship('Post', back_populates='author')\n\nclass Post(db.Model):\n    author = db.relationship('User', back_populates='posts')"""
"एक ब्लॉग पोस्ट पर 'लाइक' करने के लिए API","""@app.route('/api/posts/<int:id>/like', methods=['POST'])\ndef like_post(id):\n    post = Post.query.get(id)\n    post.likes += 1\n    db.session.commit()\n    return jsonify({'likes': post.likes})"""
"ब्लॉग पोस्ट मॉडल में `likes` कॉलम जोड़ो","""likes = db.Column(db.Integer, default=0)"""
"ब्लॉग पोस्ट्स को लाइक्स की संख्या के आधार पर सॉर्ट करो","""popular_posts = Post.query.order_by(Post.likes.desc()).limit(5).all()"""
"Flask में यूनिट टेस्ट के लिए एक टेस्ट डेटाबेस कॉन्फ़िगर करो","""app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///:memory:'"""
"एक API एंडपॉइंट का pytest से टेस्ट लिखो","""def test_get_posts(client):\n    response = client.get('/api/posts')\n    assert response.status_code == 200"""
"ब्लूप्रिंट का उपयोग करके एडमिन सेक्शन बनाओ","""admin_bp = Blueprint('admin', __name__, url_prefix='/admin')"""
"एक API बनाओ जो YAML डेटा लौटाए","""import yaml\n@app.route('/api/data.yaml')\ndef get_yaml():\n    data = {'a': 1}\n    return Response(yaml.dump(data), mimetype='text/yaml')"""
"Flask में एक कस्टम CLI कमांड बनाओ","""@app.cli.command('create-user')\n@click.argument('name')\ndef create_user(name):\n    # ... logic to create user ..."""
"SQLAlchemy में eager लोडिंग का उपयोग करो","""posts = Post.query.options(db.joinedload(Post.author)).all()"""
"SQLAlchemy में lazy लोडिंग का उपयोग करो","""# This is the default behavior\npost = Post.query.get(1)\n# The author is fetched from the DB only when you access it:\nprint(post.author.name)"""
"एक API बनाओ जो एक फाइल डाउनलोड करवाए","""from flask import send_file\n@app.route('/download')\ndef download_file():\n    return send_file('my_file.zip', as_attachment=True)"""
"अपने Flask ऐप के लिए एक `config.py` फाइल बनाओ","""# config.py\nclass Config:\n    SECRET_KEY = os.environ.get('SECRET_KEY')\n    SQLALCHEMY_DATABASE_URI = os.environ.get('DATABASE_URI')"""
"फैक्ट्री पैटर्न का उपयोग करके Flask ऐप बनाओ","""def create_app(config_class=Config):\n    app = Flask(__name__)\n    app.config.from_object(config_class)\n    db.init_app(app)\n    return app"""
"ब्लॉग पोस्ट में Markdown कंटेंट को सपोर्ट करो","""import markdown\n@app.route('/posts/<int:id>')\ndef show_post(id):\n    post = Post.query.get(id)\n    post.content = markdown.markdown(post.content)\n    return render_template('post.html', post=post)"""
"एक API बनाओ जो इमेज अपलोड को हैंडल करे","""@app.route('/api/upload', methods=['POST'])\ndef upload_image():\n    file = request.files['image']\n    # ... save file securely ...\n    return jsonify({'url': file_url})"""
"ब्लॉग पोस्ट मॉडल में एक 'status' फील्ड (draft, published) जोड़ो","""status = db.Column(db.String(10), default='draft')"""
"सिर्फ पब्लिश हुए पोस्ट्स को दिखाने वाला एक API बनाओ","""@app.route('/api/published-posts')\ndef get_published_posts():\n    posts = Post.query.filter_by(status='published').all()\n    return jsonify([...])"""
"SQLAlchemy में एक हाइब्रिड प्रॉपर्टी बनाओ","""from sqlalchemy.ext.hybrid import hybrid_property\nclass User(db.Model):\n    # ...\n    @hybrid_property\n    def full_name(self):\n        return self.first_name + ' ' + self.last_name"""
"API रिस्पॉन्स के लिए एक कस्टम JSON एन्कोडर बनाओ","""import json\nfrom datetime import datetime\nclass CustomJSONEncoder(json.JSONEncoder):\n    def default(self, obj):\n        if isinstance(obj, datetime):\n            return obj.isoformat()\n        return super().default(obj)"""
"Flask में एक WebSocket का उपयोग करके रियल-टाइम नोटिफिकेशन भेजो","""# Using Flask-SocketIO\n@socketio.on('new_post')\ndef handle_new_post(data):\n    emit('notification', {'message': 'A new post was created!'}, broadcast=True)"""
"पाइथन में UUID का उपयोग करके एक यूनिक आईडी जेनरेट करो","""import uuid\npublic_id = str(uuid.uuid4())"""
"ब्लॉग पोस्ट मॉडल में एक स्लग (slug) फील्ड जोड़ो","""slug = db.Column(db.String(120), unique=True, nullable=False)"""
"एक फंक्शन बनाओ जो टाइटल से एक स्लग जेनरेट करे","""def slugify(title):\n    return title.lower().replace(' ', '-')"""
"एक API बनाओ जो XML डेटा लौटाए (Jinja2 टेम्पलेट का उपयोग करके)","""@app.route('/feed.xml')\ndef get_xml_feed():\n    # ... get posts ...\n    return Response(render_template('feed.xml', posts=posts), mimetype='application/xml')"""

"pytest का उपयोग करके एक सिंपल टेस्ट फंक्शन लिखो","""# test_math.py\ndef test_addition():\n    assert 1 + 1 == 2"""
"pytest को कमांड-लाइन से चलाओ","pytest"
"unittest का उपयोग करके एक टेस्ट क्लास बनाओ","""import unittest\n\nclass TestSum(unittest.TestCase):\n    def test_sum(self):\n        self.assertEqual(sum([1, 2, 3]), 6, ""Should be 6"")"""
"unittest को चलाने के लिए कोड लिखो","""if __name__ == '__main__':\n    unittest.main()"""
"एक टेस्ट जो एरर को एक्सपेक्ट करे (pytest)","""import pytest\ndef test_zero_division():\n    with pytest.raises(ZeroDivisionError):\n        1 / 0"""
"एक टेस्ट जो एरर को एक्सपेक्ट करे (unittest)","""def test_divide_by_zero(self):\n    with self.assertRaises(ZeroDivisionError):\n        1 / 0"""
"pytest में एक 'fixture' बनाओ","""import pytest\n@pytest.fixture\ndef my_data():\n    return [1, 2, 3]"""
"pytest में एक 'fixture' का उपयोग करो","""def test_my_data_length(my_data):\n    assert len(my_data) == 3"""
"pytest में टेस्ट को पैरामीटराइज़ (parametrize) करो","""import pytest\n@pytest.mark.parametrize('test_input,expected', [('3+5', 8), ('2+4', 6)])\ndef test_eval(test_input, expected):\n    assert eval(test_input) == expected"""
"एक टेस्ट को 'skip' करो","@pytest.mark.skip(reason='not implemented yet')"
"एक टेस्ट को 'xfail' (expected to fail) मार्क करो","@pytest.mark.xfail"
"मॉक (Mock) ऑब्जेक्ट बनाने के लिए `unittest.mock` का उपयोग करो","""from unittest.mock import Mock\n\nmock = Mock()"""
"एक mock ऑब्जेक्ट के रिटर्न वैल्यू को सेट करो","""mock.my_method.return_value = 'mocked value'"""
"एक mock ऑब्जेक्ट को कितनी बार कॉल किया गया, यह चेक करो","""mock.my_method.assert_called_once()"""
"`patch` का उपयोग करके एक फंक्शन को मॉक करो","""from unittest.mock import patch\n\n@patch('my_module.my_function')\ndef test_something(mock_my_function):\n    ..."""
"जावास्क्रिप्ट में Jest को इनस्टॉल करो","npm install --save-dev jest"
"Jest का उपयोग करके एक सिंपल टेस्ट लिखो","""// sum.test.js\nconst sum = require('./sum');\ntest('adds 1 + 2 to equal 3', () => {\n  expect(sum(1, 2)).toBe(3);\n});"""
"Jest को चलाने के लिए `package.json` में एक स्क्रिप्ट जोड़ो","""// In package.json\n""scripts"": {\n  ""test"": ""jest""\n}"""
"Jest में `describe` और `it` का उपयोग करो","""describe('sum function', () => {\n  it('should add positive numbers', () => {\n    expect(sum(1, 1)).toBe(2);\n  });\n});"""
"Jest में एक mock फंक्शन बनाओ","const mockCallback = jest.fn();"
"Jest में एक एसिंक्रोनस (async) कोड को टेस्ट करो","""test('the data is peanut butter', async () => {\n  const data = await fetchData();\n  expect(data).toBe('peanut butter');\n});"""
"Jest में DOM मैनिपुलेशन को टेस्ट करो (jsdom)","""document.body.innerHTML = '<div>...</div>';\n// ... test the DOM ..."""
"Cypress का उपयोग करके एक एंड-टू-एंड (E2E) टेस्ट लिखो","""describe('My App', () => {\n  it('navigates to the about page', () => {\n    cy.visit('http://localhost:3000')\n    cy.contains('About').click()\n    cy.url().should('include', '/about')\n  })\n})"""
"यूनिट टेस्ट, इंटीग्रेशन टेस्ट, और एंड-टू-एंड टेस्ट में क्या अंतर है","// Unit tests check a single piece of code. Integration tests check how pieces work together. E2E tests check the entire application flow from a user's perspective."
"टेस्ट-ड्रिवन डेवलपमेंट (TDD) का कॉन्सेप्ट","// A software development process where you write tests *before* you write the code to pass those tests."
"बिहेवियर-ड्रिवन डेवलपमेंट (BDD) का कॉन्सेप्ट","// An extension of TDD which focuses on writing tests in a natural language format that non-technical stakeholders can understand."
"एक Gherkin सिंटैक्स (BDD) का उदाहरण","Feature: Login\n  Scenario: Successful login\n    Given I am on the login page\n    When I enter valid credentials\n    Then I should be redirected to the dashboard"
"Selenium WebDriver का उपयोग करके एक ब्राउज़र ऑटोमेशन टेस्ट लिखो","""from selenium import webdriver\ndriver = webdriver.Chrome()\ndriver.get('http://example.com')\nassert 'Example' in driver.title"""
"Flask एप्लीकेशन को टेस्ट करने के लिए एक टेस्ट क्लाइंट बनाओ","""def test_home_page():\n    app = create_app() # Using app factory\n    client = app.test_client()\n    response = client.get('/')\n    assert response.status_code == 200"""
"Django एप्लीकेशन को टेस्ट करने के लिए एक टेस्ट क्लाइंट बनाओ","""from django.test import TestCase, Client\n\nclass MyViewTest(TestCase):\n    def test_home_page(self):\n        client = Client()\n        response = client.get('/')\n        self.assertEqual(response.status_code, 200)"""
"कोड कवरेज (code coverage) को मापने के लिए `coverage.py` का उपयोग करो","coverage run -m pytest\ncoverage report"
"एक 'canary' टेस्ट क्या है","// A small test run in a production environment against a small subset of live traffic to ensure a new deployment is stable."
"एक 'smoke' टेस्ट क्या है","// A preliminary test to reveal simple failures severe enough to reject a prospective software release. A quick check to see if the application starts and runs."
"A/B टेस्टिंग का कॉन्सेप्ट","// A method of comparing two versions of a webpage or app against each other to determine which one performs better."
"Postman का उपयोग करके एक API एंडपॉइंट को टेस्ट करो","// Create a new request in Postman, set the method to GET/POST, enter the URL, and hit Send."
"पाइथन में `doctest` का उपयोग करो","""def add(a, b):\n    """>>> add(1, 2)\n    3\n    ""\n    return a + b"""
"एक 'faker' लाइब्रेरी का उपयोग करके टेस्ट के लिए फेक डेटा जेनरेट करो","from faker import Faker\nfake = Faker()\n\nfake_name = fake.name()"
"स्ट्रेस टेस्टिंग (Stress Testing) का कॉन्सेप्ट","// Testing to determine the robustness of software by testing it beyond the limits of normal operation."
"लोड टेस्टिंग (Load Testing) का कॉन्सेप्ट","// The process of putting demand on a system and measuring its response."
"Playwright का उपयोग करके एक ब्राउज़र टेस्ट लिखो","""from playwright.sync_api import sync_playwright\n\nwith sync_playwright() as p:\n    browser = p.chromium.launch()\n    page = browser.new_page()\n    page.goto('http://whatsmyuseragent.org/')"""
"म्यूटेशन टेस्टिंग (Mutation Testing) का कॉन्सेप्ट","// A type of software testing where we change (mutate) certain statements in the source code and check if the test cases are able to find the errors."
"एक प्रॉपर्टी-बेस्ड टेस्ट लिखो (Hypothesis)","from hypothesis import given\nfrom hypothesis.strategies import text\n\n@given(text())\ndef test_decode_inverts_encode(s):\n    assert decode(encode(s)) == s"
"Selenium IDE का उपयोग करके एक टेस्ट रिकॉर्ड और प्लेबैक करो","// Use the Selenium IDE browser extension to record user interactions and export them as a test script."
"एक पाइथन फंक्शन को मॉक (mock) करो","""@patch('my_module.my_api_call', return_value={'status':'success'})\ndef test_with_mock(mock_api_call):\n    # ... your test code ..."""
"Jest में एक स्नैपशॉट टेस्ट (snapshot test) लिखो","""it('renders correctly', () => {\n  const tree = renderer.create(<MyComponent />).toJSON();\n  expect(tree).toMatchSnapshot();\n});"""
"एक लॉगिंग स्टेटमेंट को टेस्ट करो","""with self.assertLogs('my_logger', level='INFO') as cm:\n    logging.getLogger('my_logger').info('first message')\n    self.assertEqual(cm.output, ['INFO:my_logger:first message'])"""
"पाइथन में `assert` स्टेटमेंट का उपयोग करो","x = 1\nassert x == 1, 'x should be 1'"
"एक 'setup' और 'teardown' मेथड लिखो (unittest)","""class MyTest(unittest.TestCase):\n    def setUp(self):\n        # Runs before each test\n        print('Setting up')\n    def tearDown(self):\n        # Runs after each test\n        print('Tearing down')"""
"एक सॉर्ट करने योग्य (sortable) HTML टेबल बनाओ","""<table id='mySortableTable'>...</table>\n<script>\nfunction sortTable(n) { ... logic to sort table rows ... }\n</script>"""
"एक सिंपल ड्राइंग पैड (drawing pad) बनाओ","""<canvas id='drawing-pad' width='300' height='200' style='border:1px solid;'></canvas>\n<script>\nconst canvas = document.getElementById('drawing-pad');\nconst ctx = canvas.getContext('2d');\n// ... event listeners for mousedown, mousemove, mouseup ...\n</script>"""
"एक टू-डू लिस्ट बनाओ जिसमें आइटम्स को डिलीट किया जा सके","""<ul id='my-list'></ul><input id='item-input'><button onclick=""... li.onclick=function(){this.remove()}; ..."">Add</button>"""
"एक मल्टी-स्टेप फॉर्म (multi-step form) बनाओ","""<style>.tab{display:none;}</style>\n<form>\n  <div class='tab'>Step 1</div>\n  <div class='tab'>Step 2</div>\n  <button type='button' onclick='nextPrev(1)'>Next</button>\n</form>"""
"एक कलर पिकर बनाओ जो चुने हुए रंग का hex कोड दिखाए","<input type='color' value='#ff0000' oninput=""this.nextElementSibling.innerText=this.value""><span>#ff0000</span>"
"एक थीम स्विचर (switcher) बनाओ जो localStorage में थीम को सेव करे","""<button onclick=""toggleTheme()"">Toggle Theme</button>\n<script>\nfunction toggleTheme(){\n  document.body.classList.toggle('dark-mode');\n  localStorage.setItem('theme', document.body.className);\n}\n// On page load:\ndocument.body.className = localStorage.getItem('theme');\n</script>"""
"एक इंटरैक्टिव SVG मैप बनाओ (जैसे भारत का नक्शा)","""<svg> <path d='...' onclick=""alert('You clicked on a state')""></path> </svg>"""
"CSS और JS से एक कस्टम राइट-क्लिक मेन्यू बनाओ","""<div id='context-menu' style='display:none; position:absolute;'>...</div>\n<script>\ndocument.addEventListener('contextmenu', e => {\n  e.preventDefault();\n  // ... show menu at e.clientX, e.clientY ...\n});\n</script>"""
"एक 'before/after' इमेज स्लाइडर बनाओ","""<style>.img-comp-container{position:relative;} .img-comp-overlay{position:absolute;...}</style><div class='img-comp-container'>...</div><script>initComparisons();</script>"""
"एक ड्रैग-एंड-ड्रॉप सॉर्टेबल लिस्ट बनाओ","""<ul id='sortable'>\n  <li draggable='true'>Item 1</li>\n  <li draggable='true'>Item 2</li>\n</ul>\n<script>\n// ... event listeners for dragstart, dragover, drop ...\n</script>"""
"एक स्टिकी नेविगेशन बार बनाओ जो स्क्रॉल करने पर चिपके","""<style>.sticky{position:fixed; top:0;}</style>\n<div id='navbar'>...</div>\n<script>\nwindow.onscroll = function(){\n  if(window.pageYOffset > 100){...}\n}\n</script>"""
"एक फिल्टर करने वाली इमेज गैलरी बनाओ","""<button onclick=""filter('cars')"">Cars</button>\n<div class='item cars'>...</div>\n<div class='item animals'>...</div>"""
"एनिमेटेड स्किल बार्स बनाओ जो स्क्रॉल करने पर एक्टिवेट हों","""<div class='skill-bar'></div>\n<script>\n// Use Intersection Observer to trigger animation when visible\n</script>"""
"एक रैंडम पासवर्ड जेनरेटर ऐप बनाओ","""<input id='pass-output'><button onclick=""document.getElementById('pass-output').value = Math.random().toString(36).slice(-10);"">Generate</button>"""
"एक अकॉर्डियन मेन्यू बनाओ जिसमें एक समय पर एक ही टैब खुले","""<script>\nvar acc = document.getElementsByClassName('accordion');\nfor (var i = 0; i < acc.length; i++) {\n  acc[i].addEventListener('click', function() {\n    // ... logic to close other panels ...\n    this.classList.toggle('active');\n  });\n}\n</script>"""
"क्लिक करने पर एक रिपल (ripple) इफ़ेक्ट वाला बटन बनाओ","""<style>.ripple-btn{position:relative; overflow:hidden;}</style><button class='ripple-btn'>Click</button>\n<script>// JS to create and animate a span element on click</script>"""
"स्मूथ स्क्रॉलिंग (Smooth Scrolling) वाले एंकर लिंक्स","""<a href='#section1'>Go</a><div id='section1'></div>\n<script>\ndocument.querySelectorAll('a[href^=""#""]').forEach(a=>{\n  a.addEventListener('click', function(e){ e.preventDefault(); document.querySelector(this.getAttribute('href')).scrollIntoView({behavior:'smooth'});});\n});\n</script>"""
"एक फुल-स्क्रीन ओवरले नेविगेशन मेन्यू","""<style>.overlay{height:0;...transition:0.5s;}</style>\n<span onclick=""openNav()"">Open</span>\n<div id='myNav' class='overlay'>...</div>"""
"एक टेक्स्टएरिया बनाओ जो कैरेक्टर लिमिट पहुंचने पर लाल हो जाए","""<style>.limit-reached{color:red;}</style>\n<textarea maxlength='100' oninput=""... document.getElementById('counter').className = remaining < 10 ? 'limit-reached' : '';""></textarea><p><span id='counter'>100</span></p>"""
"एक सिंपल पोल (poll) कॉम्पोनेन्ट बनाओ जो नतीजे दिखाए","""<h3>Favorite?</h3>\n<p>Option A <span id='resA'>0</span></p><button onclick=""document.getElementById('resA').innerText++"">Vote</button>"""
"एक मूवी टिकट बुकिंग सीट सिलेक्टर UI","""<style>.seat.selected{background:green;}</style>\n<div class='seat' onclick=""this.classList.toggle('selected')""></div>"""
"एक सिंपल WYSIWYG टेक्स्ट एडिटर के बटन","""<div id='editor' contenteditable='true'>...</div>\n<button onclick=""document.execCommand('bold')"">B</button>"""
"एक करेंसी कनवर्टर का UI","""<input id='usd' oninput=""document.getElementById('inr').value=this.value*83""> USD = <input id='inr'> INR"""
"एक GitHub प्रोफाइल कार्ड का UI","""<div style='display:flex;'><img width='50'><div style='margin-left:10px;'><h4>Username</h4><p>Bio</p></div></div>"""
"एक पासवर्ड जेनरेटर जिसमें चेकबॉक्स (अपरकेस, नंबर) हों","""<input type='checkbox' id='inc-numbers'> Include Numbers\n<button onclick=""generatePassword()"">Generate</button>"""
"एक प्रोग्रेस बार जो एक टाइमर के साथ चले","""<progress id='timerBar' max='100' value='0'></progress>\n<script>var i=0; var interval = setInterval(()=>{i++; document.getElementById('timerBar').value=i; if(i>=100) clearInterval(interval);},100);</script>"""
"एक 'Infinite Scroll' पेज का ढाँचा","""<div id='content'>...</div>\n<script>\nwindow.addEventListener('scroll', ()=>{\n  if(window.innerHeight + window.scrollY >= document.body.offsetHeight){\n    // load more content\n  }\n});\n</script>"""
"एक डायनामिक ब्रेडक्रंब (breadcrumb) नेविगेशन बनाओ","""<nav id='breadcrumbs'></nav>\n<script>\n// JS to generate breadcrumbs based on current URL path\n</script>"""
"एक क्विज ऐप बनाओ जो स्कोर दिखाए","""<div id='quiz'>...</div>\n<button onclick='submitQuiz()'>Submit</button>\n<p>Score: <span id='score'></span></p>"""
"एक Pomodoro टाइमर ऐप","""<h2 id='pomodoro-timer'>25:00</h2>\n<button>Start</button><button>Reset</button>"""
"एक ड्राइंग ऐप जिसमें रंग बदलने का ऑप्शन हो","""<canvas id='draw'></canvas>\n<input type='color' onchange=""ctx.strokeStyle = this.value;"">"""
"एक इमेज पर ज़ूम करने के लिए एक स्लाइडर","""<img id='zoom-img' src='...' style='transform: scale(1); transition: transform 0.2s;'>\n<input type='range' min='1' max='3' step='0.1' oninput=""document.getElementById('zoom-img').style.transform = `scale(${this.value})`"">"""
"एक 'Kanban' बोर्ड का UI (जैसे Trello)","""<div style='display:flex; gap:10px;'>\n  <div class='board-column'><h3>To Do</h3><div class='card'>Task 1</div></div>\n  <div class='board-column'><h3>In Progress</h3></div>\n</div>"""
"एक मेमोरी गेम (कार्ड मैचिंग) का UI","""<style>.card-flipped{...}</style>\n<div class='game-board'>\n  <div class='card' onclick=""this.classList.add('card-flipped')""></div>\n  ...\n</div>"""
"एक वेब-बेस्ड पियानो का UI","""<style>.key{border:1px solid; ...}</style>\n<div class='piano'>\n  <div class='key white'></div>\n  <div class='key black'></div>\n  ...\n</div>"""
"एक कस्टम वीडियो प्लेयर कंट्रोल्स बनाओ","""<video id='my-video'></video>\n<button onclick=""document.getElementById('my-video').play()"">Play</button>"""
"एक इंटरैक्टिव Periodic Table का UI","""<div style='display:grid; grid-template-columns:repeat(18,1fr);'>\n  <div class='element'>H</div>\n  ...\n</div>"""
"एक 'Wheel of Fortune' स्पिनर बनाओ","""<canvas id='wheel'></canvas>\n<button onclick='spinWheel()'>Spin</button>"""
"एक स्लाइड-आउट साइडबार मेन्यू","""<style>#sidebar{position:fixed; left:-250px; ...}</style>\n<div id='sidebar'>...</div>\n<button onclick=""document.getElementById('sidebar').style.left='0'"">Open</button>"""
"एक 'drag-to-upload' फाइल अपलोडर","""<div id='drop-area' ondragover='...' ondrop='...'>Drop files here</div>"""
"एक इंटरैक्टिव SVG एनीमेशन बनाओ","""<svg><path id='myPath' ... /></svg>\n<script>// JS to animate drawing the path</script>"""
"एक 'cookie consent' बैनर","""<div id='cookie-banner' style='position:fixed; bottom:0; width:100%;'>...<button onclick=""this.parentElement.remove()"">Accept</button></div>"""
"एक ऑटो-सजेस्ट (autocomplete) सर्च बार","""<input onkeyup='getSuggestions()'><div id='suggestions'></div>"""
"एक 'dark mode' टॉगल जो localStorage का उपयोग करे","""<script>\nconst isDark = localStorage.getItem('theme') === 'dark';\nif(isDark) document.body.classList.add('dark-mode');\n</script>"""
"एक मल्टी-लैंग्वेज वेबसाइट का UI","""<nav><button onclick=""changeLang('en')"">EN</button><button onclick=""changeLang('hi')"">HI</button></nav><h1 data-key='welcome'>Welcome</h1>"""
"एक 'lazy loading' इमेज स्क्रिप्ट","""<img data-src='real-image.jpg' class='lazy-load'>\n<script>// JS with Intersection Observer to load images</script>"""
"एक कस्टम ऑडियो विज़ुअलाइज़र","""<audio id='my-audio' src='...'></audio>\n<canvas id='visualizer'></canvas>\n<script>// JS to analyze audio frequency and draw on canvas</script>"""
"एक 'No Internet' कनेक्शन डिटेक्टर","""<script>\nwindow.addEventListener('offline', ()=>alert('You are offline!'));\nwindow.addEventListener('online', ()=>alert('Back online!'));\n</script>"""
"SQL में `INNER JOIN` का उपयोग करो","SELECT users.name, orders.product FROM users INNER JOIN orders ON users.id = orders.user_id;"
"SQL में `LEFT JOIN` का उपयोग करो","SELECT users.name, orders.product FROM users LEFT JOIN orders ON users.id = orders.user_id;"
"SQL में तीन टेबल्स को एक साथ ज्वाइन करो","SELECT a.name, b.product, c.category FROM tableA a JOIN tableB b ON a.id = b.a_id JOIN tableC c ON b.c_id = c.id;"
"SQL में एक `CASE` स्टेटमेंट का उपयोग करो","SELECT name, CASE WHEN age >= 18 THEN 'Adult' ELSE 'Minor' END AS status FROM users;"
"SQL में एक कॉमन टेबल एक्सप्रेशन (CTE) बनाओ","WITH RegionalSales AS (SELECT region, SUM(amount) AS total_sales FROM orders GROUP BY region) SELECT region, total_sales FROM RegionalSales WHERE total_sales > 1000;"
"SQL में एक विंडो फंक्शन (`ROW_NUMBER`) का उपयोग करो","SELECT name, ROW_NUMBER() OVER (ORDER BY salary DESC) as rank FROM employees;"
"SQL में एक विंडो फंक्शन (`RANK`) का उपयोग करो","SELECT name, RANK() OVER (PARTITION BY department ORDER BY salary DESC) as rank_in_dept FROM employees;"
"SQL में एक विंडो फंक्शन (`LEAD` or `LAG`) का उपयोग करो","SELECT date, sales, LAG(sales, 1) OVER (ORDER BY date) as previous_day_sales FROM daily_sales;"
"SQL में एक ट्रांसैक्शन (Transaction) का उपयोग करो","BEGIN TRANSACTION; UPDATE accounts SET balance = balance - 100 WHERE id = 1; UPDATE accounts SET balance = balance + 100 WHERE id = 2; COMMIT;"
"SQL में एक `ROLLBACK` स्टेटमेंट का उपयोग करो","BEGIN TRANSACTION; -- ... some operations ... ROLLBACK;"
"SQL में एक इंडेक्स (Index) बनाओ","CREATE INDEX idx_user_email ON users (email);"
"एक कम्पोजिट इंडेक्स (Composite Index) बनाओ","CREATE INDEX idx_name_city ON users (lastname, firstname);"
"SQL में एक `VIEW` बनाओ","CREATE VIEW vw_active_users AS SELECT id, name FROM users WHERE is_active = TRUE;"
"एक स्टोर्ड प्रोसीजर (Stored Procedure) बनाओ","CREATE PROCEDURE GetUser @UserID INT AS SELECT * FROM users WHERE id = @UserID;"
"SQL में `UNION` का उपयोग करो","SELECT city FROM customers UNION SELECT city FROM suppliers;"
"SQL में `UNION ALL` का उपयोग करो","SELECT city FROM customers UNION ALL SELECT city FROM suppliers;"
"एक सेल्फ-ज्वाइन (Self-Join) करो","SELECT e1.name AS Employee, e2.name AS Manager FROM employees e1 JOIN employees e2 ON e1.manager_id = e2.id;"
"एक क्रॉस-ज्वाइन (Cross-Join) करो","SELECT * FROM table1 CROSS JOIN table2;"
"PostgreSQL में `JSONB` डेटा टाइप का उपयोग करो","CREATE TABLE products (id SERIAL, data JSONB);"
"MongoDB में एक नया डॉक्यूमेंट इंसर्ट करो","db.collection('users').insertOne({ name: 'Amit', age: 25, skills: ['Python', 'JS'] });"
"MongoDB में कई डाक्यूमेंट्स इंसर्ट करो","db.collection('users').insertMany([{ name: 'Ria' }, { name: 'Sita' }]);"
"MongoDB में एक डॉक्यूमेंट ढूंढो (`findOne`)","db.collection('users').findOne({ name: 'Amit' });"
"MongoDB में कई डाक्यूमेंट्स ढूंढो (`find`)","db.collection('users').find({ age: { $gt: 20 } });"
"MongoDB में एक डॉक्यूमेंट को अपडेट करो (`updateOne`)","db.collection('users').updateOne({ name: 'Amit' }, { $set: { city: 'Lucknow' } });"
"MongoDB में कई डाक्यूमेंट्स को अपडेट करो (`updateMany`)","db.collection('users').updateMany({ city: 'Delhi' }, { $set: { country: 'India' } });"
"MongoDB में एक डॉक्यूमेंट को डिलीट करो (`deleteOne`)","db.collection('users').deleteOne({ name: 'Amit' });"
"MongoDB में एक इंडेक्स बनाओ","db.collection('users').createIndex({ name: 1 });"
"MongoDB एग्रीगेशन पाइपलाइन का एक उदाहरण","db.orders.aggregate([ { $match: { status: 'A' } }, { $group: { _id: '$cust_id', total: { $sum: '$amount' } } } ]);"
"Redis में एक की-वैल्यू पेयर सेट करो","SET mykey 'Hello'"
"Redis से एक की-वैल्यू पेयर प्राप्त करो","GET mykey"
"Redis में एक हैश (Hash) सेट करो","HSET user:1 name 'Amit' city 'Lucknow'"
"Redis में एक लिस्ट के अंत में आइटम जोड़ो","RPUSH mylist 'item1'"
"Redis में एक सेट में मेंबर्स जोड़ो","SADD myset 'member1'"
"SQL में `COALESCE` फंक्शन का उपयोग करो","SELECT COALESCE(nullable_column, 'default_value') FROM my_table;"
"SQL में एक पिवट (PIVOT) टेबल का कॉन्सेप्ट","// A PIVOT table is used to rotate rows into columns to provide a different view of the data."
"एक ट्रिगर (Trigger) बनाओ जो इंसर्ट होने पर चले","CREATE TRIGGER my_trigger AFTER INSERT ON my_table FOR EACH ROW BEGIN -- ... logic ... END;"
"SQL में एक यूजर-डिफाइंड फंक्शन (UDF) बनाओ","CREATE FUNCTION MyFunction(@param INT) RETURNS INT AS BEGIN RETURN @param * 2; END;"
"एक recursive CTE का उपयोग करो","WITH RECURSIVE subordinates AS ( ... ) SELECT ... FROM subordinates;"
"ACID (Atomicity, Consistency, Isolation, Durability) क्या है","// A set of properties of database transactions intended to guarantee data validity despite errors, power failures, and other mishaps."
"NoSQL डेटाबेस के प्रकार (Key-Value, Document, Column-Family, Graph)","// Different types of NoSQL databases, each designed for specific use cases."
"CAP प्रमेय (CAP Theorem) क्या है","// A theorem for distributed data storage that states it is impossible for a distributed data store to simultaneously provide more than two out of the following three guarantees: Consistency, Availability, and Partition tolerance."
"डेटाबेस नॉर्मलाइजेशन (Normalization) का कॉन्सेप्ट","// The process of organizing columns and tables in a relational database to minimize data redundancy."
"डेटाबेस डीनॉर्मलाइजेशन (Denormalization) का कॉन्सेप्ट","// The process of trying to improve the read performance of a database, at the expense of losing some write performance, by adding redundant data."
"शार्डिंग (Sharding) का कॉन्सेप्ट","// A type of database partitioning that separates one large database into many smaller, faster, more easily managed parts called data shards."
"रेप्लीकेशन (Replication) का कॉन्सेप्ट","// The process of sharing information to ensure consistency between redundant resources, such as software or hardware components, to improve reliability, fault-tolerance, or accessibility."
"ORM (Object-Relational Mapping) क्या है","// A programming technique for converting data between incompatible type systems using object-oriented programming languages. Examples: SQLAlchemy, Django ORM."
"MongoDB में `$lookup` (JOIN) का उपयोग करो","db.orders.aggregate([{ $lookup: { from: 'inventory', localField: 'item', foreignField: 'sku', as: 'inventory_docs' } }])"
"Elasticsearch में एक डॉक्यूमेंट को इंडेक्स करो","POST /my-index/_doc/1\n{ ""field"": ""value"" }"
"ऑप्शनल चेनिंग (`?.`) का उपयोग करो","const user = { profile: { name: 'Amit' } };\nconst name = user.profile?.name;"
"नल्लिश कोएलेसिंग ऑपरेटर (`??`) का उपयोग करो","const value = null ?? 'default string'; // returns 'default string'"
"`Promise.allSettled` का उपयोग करो","const promises = [Promise.resolve(1), Promise.reject('fail')];\nPromise.allSettled(promises).then(results => console.log(results));"
"डायनामिक `import()` का उपयोग करो","const button = document.getElementById('btn');\nbutton.addEventListener('click', () => {\n  import('./module.js').then(module => {\n    module.doSomething();\n  });\n});"
"`globalThis` का उपयोग करो","// Access the global 'this' context in any environment\nconsole.log(globalThis);"
"`BigInt` का उपयोग करो","const veryLargeNumber = 9007199254740991n;\nconst anotherBigInt = BigInt('9007199254740992');"
"`String.prototype.matchAll()` का उपयोग करो","const regex = /t(e)(st(\\d?))/g;\nconst str = 'test1test2';\nconst array = [...str.matchAll(regex)];"
"लॉजिकल असाइनमेंट ऑपरेटर `||=` का उपयोग करो","let x = null;\nx ||= 'default'; // x is now 'default'"
"लॉजिकल असाइनमेंट ऑपरेटर `&&=` का उपयोग करो","let x = 'hello';\nx &&= 'world'; // x is now 'world'"
"लॉजिकल असाइनमेंट ऑपरेटर `??=` का उपयोग करो","let x = null;\nx ??= 'default'; // x is now 'default'"
"न्यूमेरिक सेपरेटर्स का उपयोग करो","const bigNumber = 1_000_000_000;"
"`Array.prototype.at()` का उपयोग करो","const arr = ['a', 'b', 'c'];\nconst last = arr.at(-1); // returns 'c'"
"एक ऑब्जेक्ट में `private` क्लास फील्ड बनाओ","class MyClass { #privateField = 10; getPrivate(){return this.#privateField;} }"
"एक क्लास में `private` मेथड बनाओ","class MyClass { #privateMethod() { return 'hello'; } }"
"एक क्लास में `static` ब्लॉक बनाओ","class MyClass { static myStaticProperty; static { this.myStaticProperty = 'initialized'; } }"
"`Object.hasOwn()` का उपयोग करो","const obj = { prop: 'exists' };\nconsole.log(Object.hasOwn(obj, 'prop'));"
"`Array.prototype.findLast()` का उपयोग करो","const array = [5, 12, 50, 130, 44];\nconst found = array.findLast(element => element > 45);"
"`Temporal` API का कॉन्सेप्ट","// A new, modern API for working with dates and times in JavaScript (replaces the old Date object)."
"रिकॉर्ड्स और टपल्स (Records & Tuples) का कॉन्सेप्ट","// A proposal for adding immutable data structures to JavaScript."
"शेयर्ड एरे बफर (`SharedArrayBuffer`) का उपयोग करो","const buffer = new SharedArrayBuffer(1024);"
"एटॉमिक्स (`Atomics`) का उपयोग करो","Atomics.add(typedArray, 0, 2);"
"`WeakRef` का उपयोग करो","const weak_ref = new WeakRef({ some: 'object' });"
"एक `FinalizationRegistry` बनाओ","const registry = new FinalizationRegistry(heldValue => {\n  // Cleanup logic\n});"
"`import.meta` का उपयोग करो","// Get metadata about the current module, like its URL."
"टॉप-लेवल `await` का उपयोग करो","// In an ES module:\nconst response = await fetch('...');\nconst data = await response.json();"
"रेगुलर एक्सप्रेशन में 'd' फ्लैग का उपयोग करो","const re = /\\p{Number}/d;"
"`Intl.DisplayNames` का उपयोग करो","const regionNames = new Intl.DisplayNames(['en'], { type: 'region' });\nconsole.log(regionNames.of('US')); // 'United States'"
"`Intl.DateTimeFormat` का उपयोग करो","const date = new Date();\nconst formatter = new Intl.DateTimeFormat('en-US');\nconsole.log(formatter.format(date));"
"डेकोरेटर्स (Decorators) का कॉन्सेप्ट","// A proposal for a feature that allows modifying class and method definitions."
"पाइपलाइन ऑपरेटर `|>` का कॉन्सेप्ट","// A proposal for a new operator to chain function calls: x |> f |> g"
"एक एसिंक्रोनस जेनरेटर फंक्शन बनाओ","async function* asyncGenerator() {\n  yield 'hello';\n  await new Promise(r => setTimeout(r, 1000));\n  yield 'world';\n}"
"`for await...of` लूप का उपयोग करो","async function run(){\n  for await (const value of asyncGenerator()){\n    console.log(value);\n  }\n}"
"एक नया `Error` ऑब्जेक्ट बनाओ जिसमें `cause` हो","const myError = new Error('Something went wrong', { cause: originalError });"
"Web Locks API का उपयोग करो","await navigator.locks.request('my_lock', async lock => {\n  // ... critical section ...\n});"
"Structured Clone का उपयोग करके एक ऑब्जेक्ट को डीप कॉपी करो","const deepCopy = structuredClone(originalObject);"
"एक परमिशन API (`Permissions API`) का उपयोग करो","navigator.permissions.query({ name: 'geolocation' }).then(result => {});"
"CSS Typed Object Model का उपयोग करो","element.attributeStyleMap.set('opacity', CSS.number(0.5));"
"Web Animations API का उपयोग करो","element.animate([{ transform: 'translateY(0px)' }, { transform: 'translateY(-10px)' }], { duration: 1000 });"
"Web Crypto API का उपयोग करके एक डाइजेस्ट जेनरेट करो","const digest = await crypto.subtle.digest('SHA-256', data);"
"Web Authentication API (WebAuthn) का उपयोग करो","navigator.credentials.create({ publicKey: ... });"
"Web Bluetooth API का उपयोग करो","await navigator.bluetooth.requestDevice({ filters: [{ services: ['heart_rate'] }] });"
"WebUSB API का उपयोग करो","await navigator.usb.requestDevice({ filters: [{ vendorId: 0x2341 }] });"
"File System Access API का उपयोग करो","const fileHandle = await window.showOpenFilePicker();"
"एक `AbortSignal.timeout()` का उपयोग करो","const signal = AbortSignal.timeout(5000); // 5 second timeout"
"`Array.prototype.toSorted()` का उपयोग करो (immutable)","const sorted = originalArray.toSorted();"
"`Array.prototype.toReversed()` का उपयोग करो (immutable)","const reversed = originalArray.toReversed();"
"`Array.prototype.with()` का उपयोग करो (immutable)","const newArray = originalArray.with(1, 'new_value');"
"`Array.prototype.toSpliced()` का उपयोग करो (immutable)","const newArray = originalArray.toSpliced(1, 1, 'new_item');"
"RESTful API में GET मेथड का उपयोग (सभी रिसोर्स पाएं)","@app.route('/api/v1/items', methods=['GET'])"
"RESTful API में GET मेथड का उपयोग (एक रिसोर्स पाएं)","@app.route('/api/v1/items/<int:item_id>', methods=['GET'])"
"RESTful API में POST मेथड का उपयोग (नया रिसोर्स बनाएं)","@app.route('/api/v1/items', methods=['POST'])"
"RESTful API में PUT मेथड का उपयोग (एक रिसोर्स को पूरी तरह अपडेट करें)","@app.route('/api/v1/items/<int:item_id>', methods=['PUT'])"
"RESTful API में PATCH मेथड का उपयोग (एक रिसोर्स को आंशिक रूप से अपडेट करें)","@app.route('/api/v1/items/<int:item_id>', methods=['PATCH'])"
"RESTful API में DELETE मेथड का उपयोग (एक रिसोर्स को डिलीट करें)","@app.route('/api/v1/items/<int:item_id>', methods=['DELETE'])"
"API में 200 OK स्टेटस कोड लौटाएं","return jsonify({'status': 'success'}), 200"
"API में 201 Created स्टेटस कोड लौटाएं","return jsonify({'id': new_item.id}), 201"
"API में 204 No Content स्टेटस कोड लौटाएं","return '', 204"
"API में 400 Bad Request स्टेटस कोड लौटाएं","return jsonify({'error': 'Invalid input'}), 400"
"API में 401 Unauthorized स्टेटस कोड लौटाएं","return jsonify({'error': 'Authentication required'}), 401"
"API में 403 Forbidden स्टेटस कोड लौटाएं","return jsonify({'error': 'Permission denied'}), 403"
"API में 404 Not Found स्टेटस कोड लौटाएं","return jsonify({'error': 'Resource not found'}), 404"
"API वर्जनिंग का एक उदाहरण (URL में)","/api/v2/items"
"FastAPI में एक सिंपल API एंडपॉइंट बनाओ","from fastapi import FastAPI\napp = FastAPI()\n@app.get('/')\ndef root():\n    return {'message': 'Hello World'}"
"FastAPI में पाथ पैरामीटर का उपयोग करो","@app.get('/items/{item_id}')\ndef read_item(item_id: int):\n    return {'item_id': item_id}"
"FastAPI में क्वेरी पैरामीटर का उपयोग करो","@app.get('/items/')\ndef read_items(skip: int = 0, limit: int = 10):\n    return {'items': fake_items[skip : skip + limit]}"
"FastAPI में Pydantic मॉडल का उपयोग करके रिक्वेस्ट बॉडी को वैलिडेट करो","from pydantic import BaseModel\nclass Item(BaseModel):\n    name: str\n    price: float\n\n@app.post('/items/')\ndef create_item(item: Item):\n    return item"
"FastAPI में एक बैकग्राउंड टास्क बनाओ","from fastapi import BackgroundTasks\n\n@app.post('/send-notification/{email}')\ndef send_notification(email: str, background_tasks: BackgroundTasks):\n    background_tasks.add_task(write_notification, email, message='some notification')"
"FastAPI में डिपेंडेंसी इंजेक्शन का उपयोग करो","async def common_parameters(q: str | None = None):\n    return {'q': q}\n\n@app.get('/items/')\nasync def read_items(commons: dict = Depends(common_parameters)):\n    return commons"
"FastAPI में एक API राउटर बनाओ","from fastapi import APIRouter\nrouter = APIRouter()\n@router.get('/users/')\ndef get_users():\n    return [{'username': 'Amit'}]"
"FastAPI ऐप में एक राउटर को शामिल करो","app.include_router(router, prefix='/api/v1')"
"FastAPI में Swagger UI (OpenAPI) डॉक्युमेंटेशन","// FastAPI automatically generates interactive API documentation at /docs"
"FastAPI में ReDoc डॉक्युमेंटेशन","// FastAPI automatically generates ReDoc documentation at /redoc"
"Flask-Smorest का उपयोग करके एक API बनाओ","from flask_smorest import Blueprint, Api\nblp = Blueprint('items', __name__, description='Operations on items')"
"GraphQL क्वेरी का एक उदाहरण","query { product(id: ""123"") { name, price, reviews { rating } } }"
"GraphQL म्यूटेशन (mutation) का एक उदाहरण","mutation { createReview(episode: JEDI, review: { stars: 5 }) { stars } }"
"GraphQL सब्सक्रिप्शन (subscription) का कॉन्सेप्ट","// A way to get real-time updates from the server, typically over WebSockets."
"API में HATEOAS (Hypermedia as the Engine of Application State) का कॉन्सेप्ट","// The principle that a client interacts with a network application entirely through hypermedia provided dynamically by application servers."
"एक HATEOAS रिस्पॉन्स का उदाहरण","{'id': 1, 'name': 'Item 1', 'links': [{'rel': 'self', 'href': '/items/1'}]}"
"WebRTC (Web Real-Time Communication) का कॉन्सेप्ट","// An open-source project providing web browsers and mobile applications with real-time communication (RTC) via simple APIs."
"gRPC (Google Remote Procedure Call) का कॉन्सेप्ट","// A high-performance, open-source universal RPC framework."
"एक Protocol Buffers (.proto) फाइल का उदाहरण","syntax = 'proto3';\nmessage Person {\n  string name = 1;\n  int32 id = 2;\n}"
"Flask में `url_for` का उपयोग करके एक डायनामिक URL बनाओ","from flask import url_for\nurl_for('show_post', post_id=5)"
"API डिजाइन में 'Idempotency' क्या है","// An operation is idempotent if an identical request can be made once or several times in a row with the same effect, returning the same result."
"PUT और PATCH मेथड में क्या अंतर है","// PUT updates a full resource, while PATCH applies a partial update."
"API में पेजिनेशन (pagination) का उपयोग","// /api/items?page=3&page_size=20"
"API में सॉर्टिंग का एक उदाहरण","// /api/products?sort_by=price&order=ascending"
"API में फ़िल्टरिंग का एक उदाहरण","// /api/orders?status=shipped&date_after=2025-01-01"
"एक WebSocket API का उपयोग","const socket = new WebSocket('wss://api.example.com/stream');"
"Server-Sent Events (SSE) का उपयोग","const eventSource = new EventSource('/events');"
"API ऑथेंटिकेशन के लिए 'Basic Auth' का उपयोग","// Sending a header like: Authorization: Basic Zm9vOmJhcg=="
"API के लिए एक हेल्थ चेक (health check) एंडपॉइंट बनाओ","@app.route('/healthz')\ndef health_check():\n    return jsonify({'status': 'healthy'}), 200"
"API Gateway का कॉन्सेप्ट","// A server that acts as a single entry point for a group of microservices, handling tasks like routing, authentication, and rate limiting."
"Microservices आर्किटेक्चर का कॉन्सेप्ट","// An architectural style that structures an application as a collection of loosely coupled, independently deployable services."
"WebAssembly (WASM) क्या है","// A binary instruction format for a stack-based virtual machine, designed as a portable compilation target for programming languages, enabling deployment on the web for client and server applications."
"एक RSS फीड का XML स्ट्रक्चर","<rss version='2.0'><channel><title>My Blog</title><item><title>Post 1</title></item></channel></rss>"
"API के लिए एक SDK (Software Development Kit) क्या है","// A set of tools, libraries, relevant documentation, code samples, and guides that allow developers to create software applications on a specific platform."
"एक webhook.site का उपयोग करके webhooks को टेस्ट करो","// Go to webhook.site to get a unique, random URL for receiving and inspecting incoming HTTP requests (webhooks)."
"API डॉक्युमेंटेशन का एक उदाहरण (Markdown)","""## Get a specific user\n\n**Endpoint:** `GET /api/users/{id}`\n\nReturns a single user object identified by its ID."""
"Idempotency Key का उपयोग","// A unique key sent in a header (e.g., `Idempotency-Key: some-unique-value`) to prevent duplicate POST requests from accidentally creating multiple resources."
"GraphQL में Fragments का उपयोग","""fragment userFields on User {\n  id\n  name\n  email\n}\nquery { user(id:1) { ...userFields } }"""
"git का उपयोग करके एक नई रिपॉजिटरी इनिशियलाइज़ करो","git init"
"git में एक फाइल को स्टेज करो","git add my_file.txt"
"git में सभी फाइलों को स्टेज करो","git add ."
"git में एक कमिट (commit) करो","git commit -m 'Add new feature: user login'"
"git का स्टेटस चेक करो","git status"
"git का लॉग (log) देखो","git log --oneline --graph --decorate"
"एक नई git ब्रांच बनाओ","git branch feature/new-design"
"एक दूसरी git ब्रांच पर स्विच करो","git checkout feature/new-design"
"एक git ब्रांच को मर्ज करो","git checkout main\ngit merge feature/new-design"
"एक git रिमोट (remote) जोड़ो","git remote add origin https://github.com/my-user/my-repo.git"
"एक लोकल ब्रांच को एक रिमोट रिपॉजिटरी पर पुश करो","git push -u origin main"
"एक रिमोट रिपॉजिटरी से बदलावों को पुल करो","git pull origin main"
"एक git रिपॉजिटरी को क्लोन करो","git clone https://github.com/some-user/some-repo.git"
"`.gitignore` में एक फाइल या फोल्डर को इग्नोर करो","""# In .gitignore file:\nnode_modules/\n.env\n*.log"""
"एक सिंपल Dockerfile बनाओ (पाइथन Flask के लिए)","FROM python:3.9-slim-buster\nWORKDIR /app\nCOPY requirements.txt requirements.txt\nRUN pip install -r requirements.txt\nCOPY . .\nCMD [""gunicorn"", ""--bind"", ""0.0.0.0:8000"", ""app:app""]"
"एक Docker इमेज को बिल्ड करो","docker build -t my-flask-app:latest ."
"एक Docker कंटेनर को रन करो और पोर्ट को मैप करो","docker run -d -p 5000:8000 my-flask-app:latest"
"Docker Hub पर एक इमेज को पुश करो","docker push your-username/my-flask-app:latest"
"Docker Compose का एक सिंपल उदाहरण (वेब + डेटाबेस)","version: '3.8'\nservices:\n  webapp:\n    build: .\n    ports:\n      - '80:5000'\n  database:\n    image: 'postgres:13'"
"एक Bash स्क्रिप्ट का 'shebang' लिखो","#!/bin/bash"
"एक Bash स्क्रिप्ट में एक वेरिएबल बनाओ और उसे प्रिंट करो","MY_VARIABLE='Hello World'\necho $MY_VARIABLE"
"एक Bash स्क्रिप्ट में `if` स्टेटमेंट का उपयोग करो","if [ -f '/etc/hosts' ]; then\n  echo 'Hosts file exists.'\nfi"
"एक Bash स्क्रिप्ट में `for` लूप का उपयोग करो","for i in {1..5}; do\n  echo 'Welcome '$i\ndone"
"एक फाइल के परमिशन को 'executable' बनाओ (`chmod`)","chmod +x my_script.sh"
"VS Code में एक नया टर्मिनल खोलो","// Use the shortcut Ctrl+` (backtick) or go to the menu: Terminal > New Terminal"
"VS Code में JSON फाइल को फॉर्मेट करो","// Right-click inside the JSON file and select 'Format Document'"
"एक `requirements.txt` फाइल से सभी पाइथन पैकेजेज इनस्टॉल करो","pip install -r requirements.txt"
"SSH का उपयोग करके एक रिमोट सर्वर से कनेक्ट करो","ssh my-user@my-server-ip.com"
"SCP का उपयोग करके एक फाइल को रिमोट सर्वर पर कॉपी करो","scp /path/to/local/file.txt my-user@my-server-ip:/remote/path/"
"एक Cron Job का उदाहरण लिखो जो हर रोज़ आधी रात को चले","0 0 * * * /usr/bin/python3 /path/to/my_script.py"
"JSON डेटा को `jq` का उपयोग करके कमांड-लाइन पर पार्स करो","cat my_data.json | jq '.user.name'"
"CI/CD (Continuous Integration/Continuous Deployment) क्या है","// A modern software development practice where incremental code changes are frequently and reliably built, tested, and deployed to production."
"GitHub Actions का एक सिंपल वर्कफ्लो बनाओ","name: Simple CI\non: [push]\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v3\n    - run: echo 'A sample job in the workflow!'"
"एक Makefile का एक सिंपल उदाहरण","install:\n\tpip install -r requirements.txt\n\nrun:\n\tpython app.py"
"एक Nginx कॉन्फ़िगरेशन का एक सिंपल उदाहरण (static server)","server {\n    listen 80;\n    server_name mydomain.com;\n    root /var/www/mydomain.com/html;\n    index index.html;\n}"
"एक `.env` फाइल का उपयोग करके एनवायरनमेंट वेरिएबल्स को मैनेज करो","""# In .env file:\nDATABASE_URL='postgresql://user:pass@host/db'\n\n# In Python code:\nfrom dotenv import load_dotenv\nimport os\nload_dotenv()\ndb_url = os.getenv('DATABASE_URL')"""
"Linter (जैसे Flake8) का उपयोग करके पाइथन कोड को चेक करो","flake8 my_app_directory/"
"एक 'Hello World' C++ प्रोग्राम","""#include <iostream>\n\nint main() {\n    std::cout << ""Hello, World!"";\n    return 0;\n}"""
"एक 'Hello World' Java प्रोग्राम","""class HelloWorldApp {\n    public static void main(String[] args) {\n        System.out.println(""Hello, World!"");\n    }\n}"""
"एक 'Hello World' Go प्रोग्राम","""package main\n\nimport ""fmt""\n\nfunc main() {\n    fmt.Println(""Hello, World!"")\n}"""
"एक 'Hello World' Rust प्रोग्राम","""fn main() {\n    println!(""Hello, world!"");\n}"""
"एक 'Hello World' PHP स्क्रिप्ट","""<?php echo '<h1>Hello, World!</h1>'; ?>"""
"git रिबेस (rebase) का एक उदाहरण","git checkout feature-branch\ngit rebase main"
"git चेरी-पिक (cherry-pick) का एक उदाहरण","git cherry-pick <commit-hash-to-pick>"
"एक Docker कंटेनर के अंदर शेल (shell) में जाओ","docker exec -it my_container_name /bin/bash"
"सभी चल रहे Docker कंटेनरों को लिस्ट करो","docker ps"
"सभी Docker इमेजेज को लिस्ट करो","docker images"
"एक Kubernetes Pod का YAML कॉन्फ़िगरेशन","apiVersion: v1\nkind: Pod\nmetadata:\n  name: my-nginx-pod\nspec:\n  containers:\n  - name: my-nginx-container\n    image: nginx:latest"
"AWS S3 बकेट में एक फाइल अपलोड करो (CLI)","aws s3 cp my-local-file.txt s3://my-unique-s3-bucket/"
"एक सिंपल Ansible प्लेबुक का ढाँचा","---\n- hosts: all\n  become: true\n  tasks:\n    - name: Ensure nginx is installed\n      apt: name=nginx state=latest"
"Terraform का उपयोग करके एक रिसोर्स बनाओ","resource ""aws_instance"" ""web_server"" {\n  ami           = ""ami-0c55b159cbfafe1f0""\n  instance_type = ""t2.micro""\n}"
"वेब स्क्रैपिंग के लिए `requests` और `BeautifulSoup` को इम्पोर्ट करो","import requests\nfrom bs4 import BeautifulSoup"
"एक वेबसाइट का HTML कंटेंट प्राप्त करो","import requests\nURL = 'http://example.com'\npage = requests.get(URL)"
"HTML कंटेंट को `BeautifulSoup` ऑब्जेक्ट में पार्स करो","from bs4 import BeautifulSoup\n# page = requests.get(...)\nsoup = BeautifulSoup(page.content, 'html.parser')"
"एक वेब पेज का टाइटल निकालो","soup = BeautifulSoup(html_content, 'html.parser')\ntitle = soup.title.string"
"एक वेब पेज से पहला पैराग्राफ निकालो","soup = BeautifulSoup(html_content, 'html.parser')\nfirst_paragraph = soup.find('p').get_text()"
"एक वेब पेज से सभी पैराग्राफ (`p`) टैग्स निकालो","soup = BeautifulSoup(html_content, 'html.parser')\nall_paragraphs = soup.find_all('p')"
"एक वेब पेज से सभी लिंक्स (`a`) टैग्स निकालो","soup = BeautifulSoup(html_content, 'html.parser')\nall_links = soup.find_all('a')"
"सभी लिंक्स से URL (href) निकालो","for link in soup.find_all('a'):\n    print(link.get('href'))"
"एक खास `id` वाले एलिमेंट को ढूंढो","main_content_div = soup.find(id='main-content')"
"एक खास `class` वाले सभी एलिमेंट्स को ढूंढो","blog_posts = soup.find_all(class_='blog-post')"
"एक एलिमेंट के पैरेंट को एक्सेस करो","p_tag = soup.find('p')\nparent_element = p_tag.parent"
"एक एलिमेंट के चिल्ड्रेन को एक्सेस करो","div_tag = soup.find('div')\nfor child in div_tag.children:\n    print(child.name)"
"CSS सिलेक्टर का उपयोग करके एक एलिमेंट ढूंढो","title_element = soup.select_one('head > title')"
"CSS सिलेक्टर का उपयोग करके कई एलिमेंट्स ढूंढो","all_list_items = soup.select('ul > li')"
"एक इमेज का `src` एट्रिब्यूट निकालो","image_tag = soup.find('img')\nimage_source_url = image_tag['src']"
"एक टेबल से सभी रो (`tr`) निकालो","table = soup.find('table')\nif table:\n    table_rows = table.find_all('tr')"
"एक टेबल के हेडर और डेटा को अलग-अलग निकालो","table = soup.find('table')\nheaders = [th.get_text() for th in table.find_all('th')]\ndata_rows = [[td.get_text() for td in row.find_all('td')] for row in table.find_all('tr')]"
"एक वेब पेज से सभी हेडिंग्स (h1, h2, h3) निकालो","all_headings = soup.find_all(['h1', 'h2', 'h3'])"
"एक वेबसाइट पर लॉग इन करने के लिए `requests` सेशन का उपयोग करो","import requests\nsession = requests.Session()\nlogin_data = {'username': 'myuser', 'password': 'mypass'}\nsession.post('http://example.com/login', data=login_data)"
"एक लॉग-इन सेशन का उपयोग करके एक प्रोटेक्टेड पेज को स्क्रैप करो","protected_page_response = session.get('http://example.com/dashboard')"
"एक स्क्रैपिंग स्क्रिप्ट में यूजर-एजेंट सेट करो","headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36'}\npage = requests.get(URL, headers=headers)"
"स्क्रैपिंग में त्रुटियों (errors) को हैंडल करने के लिए `try-except` ब्लॉक का उपयोग करो","import requests\ntry:\n    page = requests.get('http://a-non-existent-url.xyz', timeout=5)\n    page.raise_for_status() # Raise an exception for bad status codes (4xx or 5xx)\nexcept requests.exceptions.RequestException as e:\n    print(f'An error occurred: {e}')"
"एक वेबसाइट की `robots.txt` फाइल को चेक करो","robots_txt_content = requests.get('http://example.com/robots.txt').text"
"स्क्रैप किए हुए डेटा को एक CSV फाइल में सेव करो","import csv\n# ... scraped_data is a list of lists ...\nwith open('scraped_output.csv', 'w', newline='', encoding='utf-8') as f:\n    csv_writer = csv.writer(f)\n    csv_writer.writerows(scraped_data)"
"एक वेब पेज से सभी इमेज URLs निकालो","image_urls = [img.get('src') for img in soup.find_all('img')]"
"अगले पेज (next page) के लिंक को फॉलो करो (पेजिनेशन)","next_page_tag = soup.find('a', class_='next-page-link')\nif next_page_tag:\n    next_page_url = next_page_tag.get('href')"
"Selenium लाइब्रेरी को इम्पोर्ट करो","from selenium import webdriver\nfrom selenium.webdriver.common.by import By"
"Selenium का उपयोग करके एक ब्राउज़र खोलो","from selenium import webdriver\ndriver = webdriver.Chrome()"
"Selenium से एक वेब पेज पर जाओ","driver.get('http://example.com')"
"Selenium से जावास्क्रिप्ट द्वारा लोड किए गए कंटेंट को स्क्रैप करो","import time\nfrom bs4 import BeautifulSoup\ndriver.get('http://example.com')\ntime.sleep(5) # Wait for JavaScript to load the content\nhtml_content = driver.page_source\nsoup = BeautifulSoup(html_content, 'html.parser')"
"Selenium से एक एलिमेंट को `id` से ढूंढो","my_element = driver.find_element(By.ID, 'my-element-id')"
"Selenium से एक बटन पर क्लिक करो","submit_button = driver.find_element(By.TAG_NAME, 'button')\nsubmit_button.click()"
"Selenium से एक इनपुट फील्ड में टेक्स्ट टाइप करो","input_field = driver.find_element(By.NAME, 'username_field')\ninput_field.send_keys('my_username')"
"Selenium से एक स्क्रीनशॉट लो","driver.save_screenshot('my_screenshot.png')"
"Selenium ब्राउज़र को बंद करो","driver.quit()"
"एक API से JSON डेटा स्क्रैप करो","import requests\napi_url = 'http://api.example.com/data'\njson_data = requests.get(api_url).json()"
"एक छिपे हुए (hidden) इनपुट फील्ड की वैल्यू निकालो","hidden_input_tag = soup.find('input', {'type': 'hidden'})\nif hidden_input_tag:\n    value = hidden_input_tag['value']"
"एक पेज से कमेंट्स निकालो","from bs4 import Comment\nfor comment in soup.find_all(string=lambda text: isinstance(text, Comment)):\n    print(comment)\n    comment.extract()"
"एक पेज की सभी मेटा जानकारी (meta information) निकालो","meta_tags = soup.find_all('meta')"
"स्क्रैप किए हुए टेक्स्ट को साफ़ करो (`strip()`)","raw_text = '  \\n  Hello World  \\n  '\nclean_text = raw_text.strip()"
"lxml पार्सर का उपयोग करो","soup = BeautifulSoup(html_content, 'lxml')"
"एक एलिमेंट के सभी एट्रिब्यूट्स को एक डिक्शनरी के रूप में प्राप्त करो","link_tag = soup.find('a')\nall_attributes = link_tag.attrs"
"एक खास एट्रिब्यूट वाले टैग को ढूंढो (जैसे `data-type`)","greeting_tag = soup.find('p', {'data-type': 'greeting'})"
"सिबलिंग (sibling) एलिमेंट्स पर इटरेट करो","for sibling in soup.find('h2').next_siblings:\n    if sibling.name:\n        print(sibling.name)"
"एक टेबल को Pandas DataFrame में बदलो","import pandas as pd\n# soup = BeautifulSoup(...)\ntable = soup.find('table')\ndf = pd.read_html(str(table))[0]"
"Scrapy फ्रेमवर्क का एक बेसिक स्पाइडर बनाओ","import scrapy\nclass MyBlogSpider(scrapy.Spider):\n    name = 'blogspider'\n    start_urls = ['https://example.com/blog']\n\n    def parse(self, response):\n        pass # Scrapy parsing logic here"
"एक XPath का उपयोग करके एलिमेंट्स को सिलेक्ट करो (lxml)","from lxml import html\n# page = requests.get(...)\ntree = html.fromstring(page.content)\n# Get all text from anchor tags\nlink_texts = tree.xpath('//a/text()')"
"एक पेज से सभी ईमेल एड्रेस निकालो (RegEx)","import re, requests\n# html = requests.get(...).text\nemails_found = re.findall(r'[\\w\\.-]+@[\\w\\.-]+', html)"
"Flask में एक सिंपल रजिस्ट्रेशन पेज का रूट बनाओ","""# In app.py:\nfrom flask import render_template\n@app.route('/register')\ndef register_page():\n    return render_template('register.html')"""
"एक HTML रजिस्ट्रेशन फॉर्म बनाओ","""\n<form action='/register' method='post'>\n    <input name='username' placeholder='Username' required>\n    <input name='password' type='password' placeholder='Password' required>\n    <button type='submit'>Register</button>\n</form>"""
"Flask में रजिस्ट्रेशन फॉर्म के POST डेटा को हैंडल करो","""# In app.py:\nfrom flask import request\n@app.route('/register', methods=['POST'])\ndef handle_registration():\n    username = request.form['username']\n    password = request.form['password']\n    # ... save user to database ...\n    return 'User registered successfully!'"""
"Flask में एक सिंपल लॉगइन पेज का रूट बनाओ","""# In app.py:\nfrom flask import render_template\n@app.route('/login')\ndef login_page():\n    return render_template('login.html')"""
"एक HTML लॉगइन फॉर्म बनाओ","""\n<form action='/login' method='post'>\n    <input name='username' placeholder='Username' required>\n    <input name='password' type='password' placeholder='Password' required>\n    <button type='submit'>Login</button>\n</form>"""
"Flask में लॉगइन फॉर्म के POST डेटा को हैंडल करो","""# In app.py:\nfrom flask import request\n@app.route('/login', methods=['POST'])\ndef handle_login():\n    username = request.form['username']\n    # ... check user credentials from database ...\n    return f'Welcome back, {username}'"""
"Flask में सेशन (session) को मैनेज करने के लिए एक सीक्रेट की (secret key) सेट करो","""# In app.py:\nfrom flask import Flask\napp = Flask(__name__)\napp.secret_key = 'your_super_secret_key_should_be_random'"""
"लॉगइन होने पर सेशन में यूज़र का नाम सेव करो","""# In app.py:\nfrom flask import session\n@app.route('/login', methods=['POST'])\ndef handle_login():\n    # ... after checking credentials ...\n    session['username'] = request.form['username']\n    return 'Logged in successfully!'"""
"एक प्रोटेक्टेड पेज बनाओ जो सिर्फ लॉग-इन यूज़र ही देख सके","""# In app.py:\nfrom flask import session, redirect, url_for\n@app.route('/dashboard')\ndef dashboard():\n    if 'username' in session:\n        return f'Hello, {session[""username""]}. This is the dashboard.'\n    return redirect(url_for('login_page'))"""
"एक लॉगआउट रूट बनाओ जो सेशन को क्लियर करे","""# In app.py:\nfrom flask import session, redirect, url_for\n@app.route('/logout')\ndef logout():\n    session.pop('username', None)\n    return redirect(url_for('login_page'))"""
"टेम्पलेट में दिखाओ कि यूज़र लॉग-इन है या नहीं","""\n<nav>\n{% if session.username %}\n    <a href='/dashboard'>Dashboard</a>\n    <a href='/logout'>Logout</a>\n{% else %}\n    <a href='/login'>Login</a>\n    <a href='/register'>Register</a>\n{% endif %}\n</nav>"""
"Flask में पासवर्ड को सुरक्षित रूप से हैश (hash) करो","""from werkzeug.security import generate_password_hash\nhashed_password = generate_password_hash('my_plain_text_password', method='pbkdf2:sha256')"""
"लॉगइन के समय हैश किए हुए पासवर्ड को चेक करो","""from werkzeug.security import check_password_hash\n# is_password_correct = check_password_hash(hashed_password_from_db, submitted_password)"""
"Flask-Login लाइब्रेरी को इनस्टॉल करो","pip install Flask-Login"
"Flask-Login के लिए एक User क्लास बनाओ","""from flask_login import UserMixin\n\nclass User(UserMixin):\n    def __init__(self, id, username):\n        self.id = id\n        self.username = username"""
"Flask-Login को इनिशियलाइज़ करो","""from flask_login import LoginManager\napp = Flask(__name__)\nlogin_manager = LoginManager()\nlogin_manager.init_app(app)\nlogin_manager.login_view = 'login' # Redirect to login page"""
"`@login_required` डेकोरेटर का उपयोग करो","""from flask_login import login_required\n@app.route('/protected-page')\n@login_required\ndef protected():\n    return 'This is a protected page.'"""
"Flask-Login में `login_user` फंक्शन का उपयोग करो","""from flask_login import login_user\n# ... after checking credentials ...\n# user_object should be an instance of your User class\nlogin_user(user_object)"""
"Flask-Login में `logout_user` फंक्शन का उपयोग करो","""from flask_login import logout_user, login_required\n@app.route('/logout')\n@login_required\ndef logout():\n    logout_user()\n    return 'You are now logged out.'"""
"Flask-Login में `current_user` का उपयोग करो","""from flask_login import current_user\n@app.route('/')\ndef index():\n    if current_user.is_authenticated:\n        return f'Hello, {current_user.username}'\n    return 'Hello, Guest. Please log in.'"""
"एक रजिस्ट्रेशन API बनाओ जो JSON लौटाए","""# In app.py:\n@app.route('/api/v1/register', methods=['POST'])\ndef api_register_user():\n    # ... logic to create user ...\n    return jsonify({'status':'success', 'message': 'User created'}), 201"""
"AJAX का उपयोग करके एक रजिस्ट्रेशन फॉर्म सबमिट करो","""\n<script>\n// ... fetch POST call with username/password as JSON to /api/v1/register ...\n</script>"""
"एक लॉगइन API बनाओ जो एक ऑथेंटिकेशन टोकन (token) लौटाए","""# In app.py:\n@app.route('/api/v1/login', methods=['POST'])\ndef api_login_user():\n    # ... check credentials ...\n    # Generate a JWT token\n    return jsonify({'token': 'a_sample_jwt_token'})"""
"जावास्क्रिप्ट में API से मिले टोकन को localStorage में सेव करो","""\n<script>\nfetch('/api/v1/login', ...).then(res => res.json()).then(data => {\n    if (data.token) {\n        localStorage.setItem('auth_token', data.token);\n    }\n});\n</script>"""
"जावास्क्रिप्ट में हर API रिक्वेस्ट के साथ ऑथेंटिकेशन टोकन भेजो","""\n<script>\nconst token = localStorage.getItem('auth_token');\nfetch('/api/v1/protected-data', { \n    headers: {\n        'Authorization': `Bearer ${token}`\n    }\n});\n</script>"""
"Flask में Bearer टोकन को वैलिडेट करने के लिए एक डेकोरेटर बनाओ","""# In app.py:\nfrom functools import wraps\ndef token_required(f):\n    @wraps(f)\n    def decorated(*args, **kwargs):\n        token = request.headers.get('Authorization')\n        # ... logic to validate the token ...\n        return f(*args, **kwargs)\n    return decorated"""
"Flask में 'flash' मैसेज का उपयोग करके यूज़र को फीडबैक दो","""from flask import flash, redirect, url_for\n# ... in a route ...\nflash('You were successfully logged in!', 'success')\nreturn redirect(url_for('index'))"""
"Jinja2 टेम्पलेट में flash मैसेज दिखाओ","""{% with messages = get_flashed_messages(with_categories=true) %}\n  {% if messages %}\n    {% for category, message in messages %}\n      <div class='alert-{{ category }}'>{{ message }}</div>\n    {% endfor %}\n  {% endif %}\n{% endwith %}"""
"एक 'Remember Me' फंक्शनैलिटी बनाओ","""\n<input type='checkbox' name='remember'> Remember Me for 30 days\n\n# In app.py (during login):\nlogin_user(user, remember=request.form.get('remember') == 'on', duration=datetime.timedelta(days=30))"""
"Flask-WTF लाइब्रेरी को इनस्टॉल करो","pip install Flask-WTF email_validator"
"Flask-WTF का उपयोग करके एक सिक्योर रजिस्ट्रेशन फॉर्म बनाओ","""from flask_wtf import FlaskForm\nfrom wtforms import StringField, PasswordField\nfrom wtforms.validators import DataRequired, Email, Length\n\nclass RegistrationForm(FlaskForm):\n    username = StringField('Username', validators=[DataRequired(), Length(min=4)])\n    email = StringField('Email', validators=[DataRequired(), Email()])\n    password = PasswordField('Password', validators=[DataRequired()])"""
"Jinja2 टेम्पलेट में Flask-WTF फॉर्म को रेंडर करो","""<form method='POST'>\n    {{ form.hidden_tag() }} \n    <p>{{ form.username.label }}<br>{{ form.username(size=32) }}</p>\n    <p>{{ form.password.label }}<br>{{ form.password(size=32) }}</p>\n    <p><input type='submit' value='Register'></p>\n</form>"""
"Flask रूट में WTF फॉर्म को वैलिडेट और प्रोसेस करो","""@app.route('/register-wtf', methods=['GET', 'POST'])\ndef register_wtf():\n    form = RegistrationForm()\n    if form.validate_on_submit():\n        # ... create user ...\n        flash('Thanks for registering!')\n        return redirect(url_for('login'))\n    return render_template('register_wtf.html', form=form)"""
"CSRF प्रोटेक्शन के लिए Flask-WTF का उपयोग करो","""from flask_wtf.csrf import CSRFProtect\napp = Flask(__name__)\napp.config['SECRET_KEY'] = 'a_very_secret_key'\nCSRFProtect(app)"""
"पासवर्ड रीसेट के लिए एक फॉर्म बनाओ","""<form action='/forgot-password' method='post'>\n    <label>Enter your email to reset password:</label>\n    <input type='email' name='email' required>\n    <button type='submit'>Send Reset Link</button>\n</form>"""
"पासवर्ड रीसेट लिंक भेजने के लिए एक Flask रूट","""@app.route('/forgot-password', methods=['POST'])\ndef forgot_password_request():\n    email = request.form['email']\n    # ... generate a secure reset token, save it, and send an email with the link ...\n    return 'If an account with that email exists, a reset link has been sent.'"""
"एक नया पासवर्ड सेट करने के लिए एक फॉर्म","""<form action='/reset-password/<token>' method='post'>\n    <label>New Password:</label>\n    <input name='new_password' type='password' required>\n    <button type='submit'>Set New Password</button>\n</form>"""
"OAuth (Sign in with Google) का बेसिक फ्लो","""# This is conceptual\n1. User clicks 'Sign in with Google' button.\n2. Your app redirects the user to Google's consent screen with your client_id.\n3. User logs in and grants permission.\n4. Google redirects back to your specified `redirect_uri` with an authorization code.\n5. Your server exchanges this code for an access token and user information."""
"Flask में gunicorn का उपयोग करने के लिए कमांड","gunicorn --workers 4 'my_flask_app:app'"
"एक बेसिक यूजर मॉडल (SQLAlchemy) का ढाँचा","""from flask_sqlalchemy import SQLAlchemy\ndb = SQLAlchemy(app)\n\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    username = db.Column(db.String(80), unique=True, nullable=False)\n    password_hash = db.Column(db.String(128))"""
"Flask-Bcrypt का उपयोग करके पासवर्ड हैश करो","""from flask_bcrypt import Bcrypt\nbcrypt = Bcrypt(app)\n\n# Hashing a password\npw_hash = bcrypt.generate_password_hash('my-password').decode('utf-8')"""
"Flask-SQLAlchemy का उपयोग करके एक यूज़र को डेटाबेस में जोड़ो","""new_user = User(username='newuser', password_hash=hashed_pw)\ndb.session.add(new_user)\ndb.session.commit()"""
"Flask-SQLAlchemy का उपयोग करके एक यूज़र को क्वेरी करो","""user = User.query.filter_by(username='someuser').first()"""
"एक एडमिन-ओनली रूट बनाने के लिए एक डेकोरेटर बनाओ","""from functools import wraps\ndef admin_required(f):\n    @wraps(f)\n    def decorated_function(*args, **kwargs):\n        if not current_user.is_admin:\n            return 'Forbidden: Admins only', 403\n        return f(*args, **kwargs)\n    return decorated_function"""
"जावास्क्रिप्ट में लॉगआउट फंक्शन जो टोकन को क्लियर करे","""function logout() {\n    localStorage.removeItem('auth_token');\n    window.location.href = '/login';\n}"""
"एक 'Auth Guard' बनाओ जो पेज एक्सेस को रोके (JS)","""// In a Single Page Application (SPA)\n// Before rendering a protected route, check:\nif (!localStorage.getItem('auth_token')) {\n    // redirect to the login page\n}"""
"HTTP Basic Auth का एक उदाहरण (requests)","""import requests\nfrom requests.auth import HTTPBasicAuth\nrequests.get('https://api.example.com/user', auth=HTTPBasicAuth('user', 'pass'))"""
"Flask में HTTP Basic Auth को हैंडल करो (Flask-HTTPAuth)","""from flask_httpauth import HTTPBasicAuth\nauth = HTTPBasicAuth()\n\n@app.route('/secret')\n@auth.login_required\ndef secret_page():\n    return 'Secret content'"""
"2-फैक्टर ऑथेंटिकेशन (2FA) का कॉन्सेप्ट","""1. User provides username and password.\n2. If correct, the server generates a one-time code and sends it via SMS or an authenticator app (like Google Authenticator).\n3. User enters this code to complete the login process."""
"Chart.js लाइब्रेरी को HTML में शामिल करो","<script src='https://cdn.jsdelivr.net/npm/chart.js'></script>"
"एक बार चार्ट (bar chart) बनाने के लिए एक कैनवास एलिमेंट बनाओ","<canvas id='myBarChart'></canvas>"
"Chart.js का उपयोग करके एक सिंपल बार चार्ट बनाओ","<canvas id='c1'></canvas><script>new Chart(document.getElementById('c1'),{type:'bar',data:{labels:['A','B'], datasets:[{label:'Votes', data:[10,20]}]}});</script>"
"Chart.js का उपयोग करके एक सिंपल लाइन चार्ट बनाओ","<canvas id='c2'></canvas><script>new Chart(document.getElementById('c2'),{type:'line',data:{labels:['Jan','Feb'], datasets:[{label:'Sales', data:[100,150]}]}});</script>"
"Chart.js का उपयोग करके एक सिंपल पाई चार्ट बनाओ","<canvas id='c3'></canvas><script>new Chart(document.getElementById('c3'),{type:'pie',data:{labels:['Red','Blue'], datasets:[{data:[30,70]}]}});</script>"
"Chart.js का उपयोग करके एक डोनट चार्ट (doughnut chart) बनाओ","<canvas id='c4'></canvas><script>new Chart(document.getElementById('c4'),{type:'doughnut',data:{...}});</script>"
"Chart.js का उपयोग करके एक रडार चार्ट (radar chart) बनाओ","<canvas id='c5'></canvas><script>new Chart(document.getElementById('c5'),{type:'radar',data:{...}});</script>"
"Chart.js का उपयोग करके एक पोलर एरिया चार्ट (polar area chart) बनाओ","<canvas id='c6'></canvas><script>new Chart(document.getElementById('c6'),{type:'polarArea',data:{...}});</script>"
"एक चार्ट में टाइटल जोड़ो","options: { plugins: { title: { display: true, text: 'My Chart Title' } } }"
"एक चार्ट में लीजेंड (legend) को छिपाओ","options: { plugins: { legend: { display: false } } }"
"एक बार चार्ट के बार्स का रंग बदलो","datasets: [{ backgroundColor: ['red', 'blue'] }]"
"एक लाइन चार्ट की लाइन का रंग बदलो","datasets: [{ borderColor: 'green' }]"
"AJAX का उपयोग करके एक चार्ट का डेटा डायनामिक रूप से लोड करो","<script>fetch('/api/chart-data').then(r=>r.json()).then(d => { new Chart(..., { data: d }); });</script>"
"एक बटन क्लिक पर चार्ट को अपडेट करो","<script>myChart.data.datasets[0].data = [5,10,15]; myChart.update();</script>"
"D3.js लाइब्रेरी को HTML में शामिल करो","<script src='https://d3js.org/d3.v7.min.js'></script>"
"D3.js का उपयोग करके एक सिंपल SVG बनाओ","<script>const svg = d3.select('body').append('svg').attr('width', 100).attr('height', 100);</script>"
"D3.js का उपयोग करके एक सर्किल बनाओ","<script>svg.append('circle').attr('cx', 50).attr('cy', 50).attr('r', 40).style('fill', 'blue');</script>"
"D3.js का उपयोग करके एक रेक्टेंगल बनाओ","<script>svg.append('rect').attr('x', 10).attr('y', 10).attr('width', 80).attr('height', 80);</script>"
"D3.js में डेटा के आधार पर बार्स बनाओ","<script>const data=[10,20,30]; d3.select('svg').selectAll('rect').data(data).enter().append('rect').attr('height', d=>d);</script>"
"D3.js में एक स्केल (scale) बनाओ","<script>const xScale = d3.scaleLinear().domain([0, 100]).range([0, 500]);</script>"
"D3.js में एक एक्सिस (axis) बनाओ","<script>const xAxis = d3.axisBottom(xScale); svg.append('g').call(xAxis);</script>"
"D3.js में एक ट्रांजीशन (transition) का उपयोग करो","<script>d3.select('circle').transition().duration(1000).style('fill', 'red');</script>"
"D3.js में एक माउसओवर इवेंट जोड़ो","<script>d3.select('rect').on('mouseover', function(){ d3.select(this).style('fill', 'orange'); });</script>"
"D3.js का उपयोग करके एक CSV फाइल लोड करो","<script>d3.csv('my_data.csv').then(function(data) { console.log(data); });</script>"
"D3.js का उपयोग करके एक JSON फाइल लोड करो","<script>d3.json('my_data.json').then(function(data) { console.log(data); });</script>"
"Chart.js में एक हॉरिजॉन्टल बार चार्ट बनाओ","<script>new Chart(ctx, {type:'bar', data: data, options: { indexAxis: 'y' }});</script>"
"Chart.js में एक स्टैक्ड बार चार्ट (stacked bar chart) बनाओ","<script>new Chart(ctx, {type:'bar', data: data, options: { scales: { x: { stacked: true }, y: { stacked: true } } }});</script>"
"Chart.js में एक बबल चार्ट (bubble chart) बनाओ","<script>new Chart(ctx, {type:'bubble', data: { datasets: [{label:'A', data:[{x:10,y:20,r:15}]}] }});</script>"
"Chart.js में एक स्कैटर चार्ट (scatter chart) बनाओ","<script>new Chart(ctx, {type:'scatter', data: { datasets: [{label:'S', data:[{x:1,y:2},{x:3,y:4}]}] }});</script>"
"एक चार्ट के टूलटिप्स (tooltips) को कस्टमाइज करो","options: { plugins: { tooltip: { callbacks: { label: function(context){...} } } } }"
"एक चार्ट के एक्सिस लेबल्स को बदलो","options: { scales: { y: { title: { display: true, text: 'Value' } } } }"
"D3.js में एक पाई चार्ट का लेआउट बनाओ","<script>const pie = d3.pie(); const data_ready = pie([10,20,30]);</script>"
"D3.js में एक आर्क (arc) जेनरेटर बनाओ","<script>const arc = d3.arc().innerRadius(0).outerRadius(100);</script>"
"D3.js में एक फोर्स-डायरेक्टेड ग्राफ (force-directed graph) का ढाँचा","<script>const simulation = d3.forceSimulation(nodes).force('link', d3.forceLink(links));</script>"
"एक मैप (जैसे भारत का) बनाने के लिए TopoJSON और D3.js का उपयोग करो","<script>d3.json('india.json').then(function(topology) { /* draw map */ });</script>"
"Google Charts का उपयोग करके एक गेज चार्ट (gauge chart) बनाओ","<script type='text/javascript' src='https://www.gstatic.com/charts/loader.js'></script><script>google.charts.load('current', {'packages':['gauge']}); ...</script>"
"Highcharts का उपयोग करके एक 3D कॉलम चार्ट बनाओ","<script src='https://code.highcharts.com/highcharts.js'></script><script src='https://code.highcharts.com/highcharts-3d.js'></script>"
"Leaflet.js का उपयोग करके एक इंटरैक्टिव मैप बनाओ","<link rel='stylesheet' href='https://unpkg.com/leaflet/dist/leaflet.css' /><script src='https://unpkg.com/leaflet/dist/leaflet.js'></script><div id='map' style='height:200px;'></div><script>var map = L.map('map');</script>"
"एक Flask API बनाओ जो चार्ट के लिए डेटा लौटाए","@app.route('/api/chart-data')\ndef chart_data():\n    return jsonify({'labels':['A','B'], 'data':[10,20]})"
"Chart.js में एक मिक्सड-टाइप (mixed-type) चार्ट बनाओ","<script>new Chart(ctx, {data: {datasets:[{type:'bar', data:...},{type:'line', data:...}]}})</script>"
"एक चार्ट में एक बटन से नया डेटा जोड़ो","<script>function addData(chart, label, data) { chart.data.labels.push(label); chart.data.datasets.forEach((dataset) => { dataset.data.push(data); }); chart.update(); }</script>"
"एक चार्ट से डेटा को हटाओ","<script>function removeData(chart) { chart.data.labels.pop(); chart.data.datasets.forEach((dataset) => { dataset.data.pop(); }); chart.update(); }</script>"
"D3.js में एक ब्रश करने योग्य (brushable) स्कैटर प्लॉट बनाओ","<script>const brush = d3.brush()...; svg.append('g').call(brush);</script>"
"एक चार्ट को responsive बनाओ","options: { responsive: true, maintainAspectRatio: false }"
"D3.js में एक ट्रीमैप (treemap) लेआउट बनाओ","<script>const treemap = d3.treemap().size([500,500]);</script>"
"Plotly.js का उपयोग करके एक 3D सरफेस प्लॉट बनाओ","<script src='https://cdn.plot.ly/plotly-latest.min.js'></script><div id='myDiv'></div><script>Plotly.newPlot('myDiv', data, layout);</script>"
"Chart.js में एक टाइमलाइन चार्ट बनाओ","<script>new Chart(ctx, {type:'bar', options:{indexAxis:'y'}})</script>"
"एक Sparkline चार्ट बनाओ",""
"एक सनबर्स्ट (Sunburst) चार्ट का कॉन्सेप्ट","// A hierarchical chart where each level of the hierarchy is represented by a ring."
"Flask-SocketIO का उपयोग करके एक वेबसॉकेट सर्वर बनाओ","from flask import Flask\nfrom flask_socketio import SocketIO\napp = Flask(__name__)\nsocketio = SocketIO(app)"
"एक वेबसॉकेट 'connect' इवेंट को हैंडल करो","@socketio.on('connect')\ndef handle_connect():\n    print('Client connected')"
"एक वेबसॉकेट 'disconnect' इवेंट को हैंडल करो","@socketio.on('disconnect')\ndef handle_disconnect():\n    print('Client disconnected')"
"एक कस्टम वेबसॉकेट इवेंट 'my_event' को हैंडल करो","@socketio.on('my_event')\ndef handle_my_custom_event(json):\n    print('Received json: ' + str(json))"
"एक वेबसॉकेट सर्वर से क्लाइंट को एक मैसेज भेजो (`emit`)","from flask_socketio import emit\n@socketio.on('my_event')\ndef handle_event(json):\n    emit('my_response', {'data': 'Server response'})"
"जावास्क्रिप्ट क्लाइंट पर एक वेबसॉकेट मैसेज को सुनो","const socket = io(); // Assuming socket.io.js is included\nsocket.on('my_response', function(msg) {\n    console.log('Received message:', msg.data);\n});"
"जावास्क्रिप्ट क्लाइंट से सर्वर को एक वेबसॉकेट मैसेज भेजो","socket.emit('my_event', {data: 'I am a client!'});"
"Flask-SocketIO में एक रूम (room) में एक यूज़र को शामिल करो","from flask_socketio import join_room\n@socketio.on('join')\ndef on_join(data):\n    join_room(data['room'])"
"एक खास रूम में सभी क्लाइंट्स को एक मैसेज भेजो","from flask_socketio import emit\nemit('my_response', {'data': 'Hello everyone in this room!'}, room='my_room')"
"Flask में Redis के साथ एक सिंपल कैश (cache) बनाओ","import redis\nr = redis.Redis(decode_responses=True)\n\ndef get_user(user_id):\n    cached_user = r.get(f'user:{user_id}')\n    if cached_user:\n        return cached_user\n    # ... get user from database ...\n    r.set(f'user:{user_id}', user_data, ex=3600) # Cache for 1 hour\n    return user_data"
"SQLAlchemy में many-to-many रिलेशनशिप बनाओ","followers = db.Table('followers',\n    db.Column('follower_id', db.Integer, db.ForeignKey('user.id')),\n    db.Column('followed_id', db.Integer, db.ForeignKey('user.id'))\n)"
"SQLAlchemy में many-to-many रिलेशनशिप को मॉडल में जोड़ो","class User(db.Model):\n    # ...\n    followed = db.relationship(\n        'User', secondary=followers,\n        primaryjoin=(followers.c.follower_id == id),\n        secondaryjoin=(followers.c.followed_id == id),\n        backref=db.backref('followers', lazy='dynamic'), lazy='dynamic')"
"SQLAlchemy में एक जटिल क्वेरी (join और filter) लिखो","results = db.session.query(User, Post).join(Post).filter(User.username == 'amit').all()"
"Flask में एक API के लिए रेट लिमिटिंग लागू करो (Flask-Limiter)","from flask_limiter import Limiter\nlimiter = Limiter(app)\n\n@app.route('/api')\n@limiter.limit('100 per hour')\ndef api_route():\n    return 'API Response'"
"एक Celery टास्क डिफाइन करो","from celery import Celery\napp = Celery('tasks', broker='redis://localhost:6379/0')\n\n@app.task\ndef send_async_email(msg):\n    # ... email sending logic ...\n    print(f'Email sent: {msg}')"
"एक Flask रूट से एक Celery टास्क को कॉल करो","@app.route('/send-email')\ndef send_email_route():\n    send_async_email.delay('Hello from Celery!')\n    return 'Email task started in the background!'"
"एक Celery वर्कर को शुरू करने के लिए कमांड","celery -A tasks worker --loglevel=info"
"Flask में Blueprints का उपयोग करके एक बड़े एप्लीकेशन को व्यवस्थित करो","""# In products/routes.py\nfrom flask import Blueprint\nproducts_bp = Blueprint('products', __name__)\n@products_bp.route('/')\ndef list_products(): ...\n\n# In app.py\nfrom products.routes import products_bp\napp.register_blueprint(products_bp, url_prefix='/products')"""
"एक WebSocket चैट एप्लीकेशन का बैकएंड बनाओ","@socketio.on('new_message')\ndef handle_new_message(message):\n    emit('chat_message', {'user': 'Someone', 'text': message}, broadcast=True)"
"एक WebSocket चैट एप्लीकेशन का फ्रंटएंड बनाओ","socket.on('chat_message', function(msg) { $('#messages').append($('<li>').text(msg.user + ': ' + msg.text)); });"
"Flask में `before_request` हुक का उपयोग करके यूज़र ऑथेंटिकेशन चेक करो","@app.before_request\ndef check_user_auth():\n    if 'user_id' not in session and request.endpoint != 'login':\n        return redirect(url_for('login'))"
"Flask में `after_request` हुक का उपयोग करके सिक्योरिटी हेडर्स जोड़ो","@app.after_request\ndef add_security_headers(response):\n    response.headers['X-Content-Type-Options'] = 'nosniff'\n    return response"
"एक API बनाओ जो सर्वर से वर्तमान समय लौटाए","import datetime\nfrom flask import jsonify\n@app.route('/api/time')\ndef get_current_time():\n    return jsonify({'time': datetime.datetime.now().isoformat()})"
"जावास्क्रिप्ट से सर्वर का समय प्राप्त करो और दिखाओ","<p id='server-time'></p><script>fetch('/api/time').then(r=>r.json()).then(d=>document.getElementById('server-time').innerText=d.time);</script>"
"Flask में एक डायनामिक sitemap.xml जनरेट करो","from flask import render_template, Response\n@app.route('/sitemap.xml')\ndef sitemap():\n    # ... get pages from database ...\n    xml_sitemap = render_template('sitemap.xml', pages=pages)\n    return Response(xml_sitemap, mimetype='application/xml')"
"SQLAlchemy में एक async सेशन बनाओ","from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession\nengine = create_async_engine('postgresql+asyncpg://user:pass@host/db')"
"Starlette का उपयोग करके एक ASGI एप्लीकेशन बनाओ","from starlette.applications import Starlette\nfrom starlette.responses import JSONResponse\napp = Starlette()\n@app.route('/')\nasync def homepage(request):\n    return JSONResponse({'hello': 'world'})"
"uvicorn का उपयोग करके एक ASGI ऐप को चलाओ","uvicorn my_app:app --reload"
"SQLAlchemy में `.one()` का उपयोग करो (अगर न मिले तो एरर देगा)","user = session.query(User).filter_by(id=999).one()"
"SQLAlchemy में `.first()` का उपयोग करो (अगर न मिले तो None लौटाएगा)","user = session.query(User).filter_by(id=999).first()"
"SQLAlchemy Core का उपयोग करके एक क्वेरी बनाओ","from sqlalchemy import select\nquery = select(users_table).where(users_table.c.name == 'amit')"
"Flask में एक फाइल अपलोड हैंडलर बनाओ जो फाइल के प्रकार को वैलिडेट करे","""ALLOWED_EXTENSIONS = {'png', 'jpg', 'jpeg'}\ndef allowed_file(filename):\n    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS"""
"एक API बनाओ जो JSON डेटा ले और उसे प्रोसेस करे","@app.route('/api/process', methods=['POST'])\ndef process_json_data():\n    data = request.json\n    processed_data = data.get('value', 0) * 2\n    return jsonify({'result': processed_data})"
"एक API बनाओ जो डेटाबेस से डेटा लाए (स्यूडो-कोड)","@app.route('/api/users/<int:id>')\ndef get_user_api(id):\n    # user = db.get_user_from_database(id)\n    user = {'id': id, 'name': 'Dummy User'}\n    return jsonify(user)"
"एक क्लिक काउंटर बनाओ जो सर्वर पर स्टेट (सेशन में) सेव करे","@app.route('/click', methods=['POST'])\ndef click_counter():\n    session['clicks'] = session.get('clicks', 0) + 1\n    return jsonify({'clicks': session['clicks']})"
"पाइथन में एक async फंक्शन बनाओ","import asyncio\nasync def my_async_function():\n    print('Hello')\n    await asyncio.sleep(1)\n    print('World')"
"Flask में एक बैकग्राउंड टास्क चलाओ (थ्रेडिंग)","from threading import Thread\ndef long_task(): pass\n\n@app.route('/start-task')\ndef start_background_task():\n    thread = Thread(target=long_task)\n    thread.start()\n    return 'Task started in background!'"
"Flask में Google OAuth का उपयोग करके लॉग इन करने का ढाँचा","""# Requires libraries like Authlib\n@app.route('/login/google')\ndef login_google():\n    return oauth.google.authorize_redirect(redirect_uri=url_for('authorize_google', _external=True))"""
"पाइथन में एक SQLite डेटाबेस में फुल-टेक्स्ट सर्च इनेबल करो","""-- SQL Command to create a virtual table for FTS5\nCREATE VIRTUAL TABLE articles USING fts5(title, content);"""
"एक RSS फीड जनरेट करने के लिए Flask रूट बनाओ","""from werkzeug.contrib.atom import AtomFeed\n@app.route('/feed.atom')\ndef get_feed():\n    feed = AtomFeed('My Blog', feed_url=request.url, url=request.url_root)\n    # ... add entries to feed ...\n    return feed.get_response()"""
"WebSocket के ज़रिए रियल-टाइम सर्वर मॉनिटरिंग का कॉन्सेप्ट","// A Python script monitors server CPU/RAM and pushes updates via WebSocket to a live dashboard in the browser."
"GraphQL API बनाने के लिए Graphene-Python का उपयोग करो","import graphene\nclass Query(graphene.ObjectType):\n    hello = graphene.String(name=graphene.String(default_value='stranger'))\n    def resolve_hello(self, info, name):\n        return 'Hello ' + name"
"Flask में GraphQL व्यू को जोड़ो","from flask_graphql import GraphQLView\napp.add_url_rule('/graphql', view_func=GraphQLView.as_view('graphql', schema=schema, graphiql=True))"
"एक WebSocket रूम से एक यूज़र को हटाओ","from flask_socketio import leave_room\nleave_room(data['room'])"
"एक API बनाओ जो एक इमेज को रीसाइज करे","""from PIL import Image\n@app.route('/resize', methods=['POST'])\ndef resize_image():\n    file = request.files['image']\n    img = Image.open(file.stream)\n    img = img.resize((100,100))\n    # ... return resized image ..."""
"Flask में एक webhook को हैंडल करो","@app.route('/webhook', methods=['POST'])\ndef handle_webhook():\n    data = request.json\n    # Process webhook payload\n    return 'OK', 200"
"Django Channels का उपयोग करके एक वेबसॉकेट कंस्यूमर बनाओ","""# In consumers.py\nimport json\nfrom channels.generic.websocket import WebsocketConsumer\n\nclass ChatConsumer(WebsocketConsumer):\n    def connect(self):\n        self.accept()"""
"एक API को सुरक्षित करने के लिए API Key ऑथेंटिकेशन लागू करो","""@app.before_request\ndef check_api_key():\n    if request.path.startswith('/api/'):\n        api_key = request.headers.get('X-API-KEY')\n        if not api_key or not is_valid(api_key):\n            return 'Unauthorized', 401"""
"एक API बनाओ जो CSV डेटा लौटाए","from flask import Response\n@app.route('/data.csv')\ndef get_csv():\n    csv_data = 'col1,col2\\nval1,val2'\n    return Response(csv_data, mimetype='text/csv')"
"Flask में `after_this_request` का उपयोग करो","from flask import after_this_request\n@app.route('/')\ndef index():\n    @after_this_request\n    def add_header(response):\n        print('After this request')\n        return response\n    return 'Hello'"
"Pandas का उपयोग करके एक CSV फाइल पढ़ो","import pandas as pd\ndf = pd.read_csv('my_data.csv')"
"एक Pandas DataFrame से 'Name' कॉलम को सिलेक्ट करो","import pandas as pd\n# df = pd.read_csv('my_data.csv')\nnames = df['Name']"
"एक DataFrame को फ़िल्टर करो जहाँ 'Age' 30 से ज़्यादा हो","import pandas as pd\n# df = pd.read_csv('my_data.csv')\nadults = df[df['Age'] > 30]"
"एक DataFrame को एक नई CSV फाइल में सेव करो","import pandas as pd\n# df = ...\ndf.to_csv('output.csv', index=False)"
"एक DataFrame के पहले 5 रिकॉर्ड देखो","import pandas as pd\n# df = ...\nprint(df.head())"
"एक DataFrame के आखिरी 3 रिकॉर्ड देखो","import pandas as pd\n# df = ...\nprint(df.tail(3))"
"एक DataFrame का शेप (rows, columns) पता करो","import pandas as pd\n# df = ...\nprint(df.shape)"
"एक DataFrame के कॉलम्स के नाम पता करो","import pandas as pd\n# df = ...\nprint(df.columns)"
"एक DataFrame के बारे में जानकारी (info) प्रिंट करो","import pandas as pd\n# df = ...\nprint(df.info())"
"एक DataFrame की न्यूमेरिकल कॉलम्स का विवरण (describe) देखो","import pandas as pd\n# df = ...\nprint(df.describe())"
"एक DataFrame को 'Age' कॉलम के आधार पर सॉर्ट करो","import pandas as pd\n# df = ...\nsorted_df = df.sort_values(by='Age')"
"एक DataFrame में एक नया कॉलम जोड़ो","import pandas as pd\n# df = ...\ndf['New_Column'] = 0"
"एक DataFrame से एक कॉलम डिलीट करो","import pandas as pd\n# df = ...\ndf = df.drop('Column_to_delete', axis=1)"
"एक DataFrame में NaN (मिसिंग) वैल्यूज को ढूंढो","import pandas as pd\n# df = ...\nprint(df.isnull().sum())"
"NaN वैल्यूज वाली सभी रो को हटाओ","import pandas as pd\n# df = ...\ncleaned_df = df.dropna()"
"NaN वैल्यूज को 0 से भरो","import pandas as pd\n# df = ...\nfilled_df = df.fillna(0)"
"एक DataFrame को एक कॉलम ('City') के आधार पर ग्रुप करो","import pandas as pd\n# df = ...\ngrouped = df.groupby('City')"
"ग्रुप किए गए डेटा का औसत निकालो","import pandas as pd\n# df = ...\naverage_age_by_city = df.groupby('City')['Age'].mean()"
"एक डिक्शनरी से एक DataFrame बनाओ","import pandas as pd\ndata = {'Name': ['Amit', 'Ria'], 'Age': [25, 22]}\ndf = pd.DataFrame(data)"
"एक DataFrame के एक खास सेल की वैल्यू को एक्सेस करो (iloc)","import pandas as pd\n# df = ...\nvalue = df.iloc[0, 1] # First row, second column"
"एक DataFrame के एक खास सेल की वैल्यू को एक्सेस करो (loc)","import pandas as pd\n# df = ...\nvalue = df.loc[0, 'Name'] # First row, 'Name' column"
"`matplotlib` का उपयोग करके एक सिंपल लाइन प्लॉट बनाओ","import matplotlib.pyplot as plt\nplt.plot([1, 2, 3], [4, 5, 1])\nplt.show()"
"`matplotlib` का उपयोग करके एक बार चार्ट बनाओ","import matplotlib.pyplot as plt\nplt.bar(['A', 'B', 'C'], [10, 20, 15])\nplt.show()"
"`matplotlib` का उपयोग करके एक हिस्टोग्राम बनाओ","import matplotlib.pyplot as plt\ndata = [1, 2, 2, 3, 3, 3, 4, 4, 5]\nplt.hist(data, bins=4)\nplt.show()"
"`matplotlib` का उपयोग करके एक स्कैटर प्लॉट बनाओ","import matplotlib.pyplot as plt\nx_values = [1,2,3,4,5]\ny_values = [5,7,4,2,8]\nplt.scatter(x_values, y_values)\nplt.show()"
"एक प्लॉट में टाइटल और लेबल जोड़ो","import matplotlib.pyplot as plt\nplt.plot([1,2],[3,4])\nplt.title('My First Plot')\nplt.xlabel('X-axis Label')\nplt.ylabel('Y-axis Label')\nplt.show()"
"एक प्लॉट में ग्रिड दिखाओ","import matplotlib.pyplot as plt\nplt.plot([1,2,3,4])\nplt.grid(True)\nplt.show()"
"दो लाइनों को एक ही प्लॉट पर दिखाओ","import matplotlib.pyplot as plt\nplt.plot([1,2,3], [1,4,9], label='x^2')\nplt.plot([1,2,3], [1,8,27], label='x^3')\nplt.legend()\nplt.show()"
"एक पाई चार्ट बनाओ","import matplotlib.pyplot as plt\nlabels = 'Frogs', 'Hogs', 'Dogs', 'Logs'\nsizes = [15, 30, 45, 10]\nplt.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=90)\nplt.axis('equal')\nplt.show()"
"एक प्लॉट को एक फाइल में सेव करो","import matplotlib.pyplot as plt\nplt.plot([1,2,3])\nplt.savefig('my_plot.png')"
"एक कॉलम की यूनिक वैल्यूज को काउंट करो","import pandas as pd\n# df = ...\nvalue_counts_city = df['City'].value_counts()"
"दो DataFrames को मर्ज करो","import pandas as pd\n# df1, df2 = ...\nmerged_df = pd.merge(df1, df2, on='user_id')"
"एक DataFrame में `apply` फंक्शन का उपयोग करो","import pandas as pd\n# df has a column 'Age'\ndf['Age_in_dog_years'] = df['Age'].apply(lambda age: age * 7)"
"एक DataFrame को एक्सेल (Excel) फाइल में सेव करो","import pandas as pd\n# df = ...\ndf.to_excel('output.xlsx', index=False)"
"एक एक्सेल फाइल को Pandas में पढ़ो","import pandas as pd\ndf_from_excel = pd.read_excel('input.xlsx')"
"Seaborn लाइब्रेरी को इम्पोर्ट करो","import seaborn as sns"
"Seaborn का उपयोग करके एक बॉक्स प्लॉट बनाओ","import seaborn as sns\n# df = ...\nsns.boxplot(x='day', y='total_bill', data=df)"
"Seaborn का उपयोग करके एक हीटमैप (heatmap) बनाओ","import seaborn as sns\nimport numpy as np\ndata = np.random.rand(10, 10)\nsns.heatmap(data)"
"Seaborn का उपयोग करके एक पेयर प्लॉट (pairplot) बनाओ","import seaborn as sns\n# df = sns.load_dataset('iris')\nsns.pairplot(df, hue='species')"
"एक NumPy एरे बनाओ","import numpy as np\nmy_array = np.array([1, 2, 3, 4])"
"एक 2D NumPy एरे बनाओ","import numpy as np\nmy_2d_array = np.array([[1, 2], [3, 4]])"
"NumPy एरे का शेप पता करो","import numpy as np\narr = np.array([[1,2,3],[4,5,6]])\nprint(arr.shape)"
"NumPy में zeros का एक एरे बनाओ","import numpy as np\nzeros_array = np.zeros((3, 4)) # 3 rows, 4 columns"
"NumPy में ones का एक एरे बनाओ","import numpy as np\nones_array = np.ones((2, 5))"
"`arange` का उपयोग करके एक NumPy एरे बनाओ","import numpy as np\nsequential_array = np.arange(10) # Array from 0 to 9"
"NumPy में लीनियर अलजेब्रा ऑपरेशन (डॉट प्रोडक्ट) करो","import numpy as np\na = np.array([1,2,3])\nb = np.array([4,5,6])\ndot_product = np.dot(a, b)"
"NumPy एरे का औसत (mean) निकालो","import numpy as np\narr = np.array([10, 20, 30, 40])\nprint(np.mean(arr))"
"NumPy एरे का स्टैण्डर्ड डेविएशन (standard deviation) निकालो","import numpy as np\narr = np.array([1, 2, 3, 4, 5])\nprint(np.std(arr))"
"एक DataFrame को NumPy एरे में बदलो","import pandas as pd\n# df = ...\nnumpy_array_from_df = df.to_numpy()"
"React में `useReducer` हुक का उपयोग करो","""import { useReducer } from 'react';\nconst reducer = (state, action) => { switch(action.type){case 'increment': return {count: state.count+1}; default: return state;}};\nfunction Counter(){\n    const [state, dispatch] = useReducer(reducer, {count:0});\n    return <button onClick={()=>dispatch({type:'increment'})}>{state.count}</button>;\n}"""
"React में `useContext` हुक का उपयोग करो","""const ThemeContext = React.createContext('light');\nfunction App(){\n    return <ThemeContext.Provider value='dark'><Toolbar /></ThemeContext.Provider>;\n}\nfunction Toolbar(){\n    const theme = useContext(ThemeContext);\n    return <div>Active theme: {theme}</div>;\n}"""
"React में `useEffect` हुक में एक डिपेंडेंसी जोड़ो","""useEffect(() => {\n  // This runs only when 'someProp' changes\n}, [someProp]);"""
"React में `useEffect` में एक क्लीनअप (cleanup) फंक्शन लिखो","""useEffect(() => {\n  const subscription = props.source.subscribe();\n  return () => { subscription.unsubscribe(); };\n}, [props.source]);"""
"React में एक कस्टम हुक बनाओ जो विंडो का साइज़ ट्रैक करे","""function useWindowSize() {\n  const [size, setSize] = useState([window.innerWidth, window.innerHeight]);\n  // ... add event listener and return size ...\n}"""
"React Router में एक डायनामिक रूट बनाओ","""<Route path='/users/:id'><UserProfile /></Route>"""
"React Router में `useParams` हुक का उपयोग करो","""import { useParams } from 'react-router-dom';\nfunction UserProfile(){\n    let { id } = useParams();\n    return <h2>User ID: {id}</h2>;\n}"""
"React Router में एक नेस्टेड रूट (nested route) बनाओ","""<Route path='/dashboard'><Dashboard><Route path='invoices' /></Dashboard></Route>"""
"React Router में एक प्राइवेट रूट (private route) बनाओ","""function PrivateRoute({ children, ...rest }){\n    let auth = useAuth();\n    return <Route {...rest} render={()=>auth.user ? children : <Redirect to='/login' />} />;\n}"""
"Redux Toolkit का उपयोग करके एक स्लाइस (slice) बनाओ","""import { createSlice } from '@reduxjs/toolkit';\n\nconst counterSlice = createSlice({\n  name: 'counter',\n  initialState: { value: 0 },\n  reducers: { increment: state => { state.value += 1; } }\n});"""
"Redux स्टोर को कॉन्फ़िगर करो","""import { configureStore } from '@reduxjs/toolkit';\nimport counterReducer from './counterSlice';\n\nconst store = configureStore({ reducer: { counter: counterReducer } });"""
"React कंपोनेंट को Redux स्टोर से कनेक्ट करो","""import { useSelector, useDispatch } from 'react-redux';\nconst count = useSelector(state => state.counter.value);\nconst dispatch = useDispatch();"""
"Vue में एक वॉचर (watcher) का उपयोग करो","""watch: {\n  question(newQuestion, oldQuestion) {\n    // ... do something when question changes ...\n  }\n}"""
"Vue में एक कंपोनेंट के लिए `v-model` बनाओ","""app.component('custom-input', {\n  props:['modelValue'],\n  template: `<input :value='modelValue' @input='$emit(""update:modelValue"", $event.target.value)'>`\n});"""
"Vue में एक 'slot' का उपयोग करो","""// In child component:\n<div><slot></slot></div>\n\n// In parent component:\n<my-component>Hello</my-component>"""
"Vue में एक 'named slot' का उपयोग करो","""<div><slot name='header'></slot></div>"""
"Vue में एक 'scoped slot' का उपयोग करो","""<slot :user='user'></slot>"""
"Vuex में एक स्टोर बनाओ","""import { createStore } from 'vuex';\n\nconst store = createStore({ state(){...}, mutations:{...}, actions:{...} });"""
"Vuex में एक म्यूटेशन (mutation) बनाओ","""mutations: {\n  increment (state) {\n    state.count++;\n  }\n}"""
"Vuex में एक एक्शन (action) बनाओ","""actions: {\n  increment (context) {\n    context.commit('increment');\n  }\n}"""
"Vue कंपोनेंट में Vuex स्टेट को एक्सेस करो","""computed: {\n  count () {\n    return this.$store.state.count\n  }\n}"""
"Vue कंपोनेंट से Vuex एक्शन को डिस्पैच (dispatch) करो","""this.$store.dispatch('increment');"""
"Vue Router में एक नया रूट बनाओ","""const routes = [{ path: '/about', component: About }]\nconst router = createRouter({ history: createWebHistory(), routes })"""
"Vue में `<router-link>` और `<router-view>` का उपयोग करो","""<router-link to='/about'>About</router-link>\n<router-view></router-view>"""
"Vue में एक डायनामिक रूट बनाओ","""{ path: '/user/:id', component: User }"""
"Vue में रूट पैरामीटर (`$route.params`) को एक्सेस करो","""this.$route.params.id"""
"Vue में `created` लाइफसाइकिल हुक का उपयोग करो","""created() {\n  console.log('Component has been created.');\n}"""
"Vue में `mounted` लाइफसाइकिल हुक का उपयोग करो","""mounted() {\n  console.log('Component has been mounted to the DOM.');\n}"""
"Vue में `beforeUnmount` लाइफसाइकिल हुक का उपयोग करो","""beforeUnmount() {\n  console.log('Component is about to be unmounted.');\n}"""
"React में `useMemo` हुक का उपयोग करो","""const memoizedValue = useMemo(() => computeExpensiveValue(a, b), [a, b]);"""
"React में `useCallback` हुक का उपयोग करो","""const memoizedCallback = useCallback(() => {\n  doSomething(a, b);\n}, [a, b]);"""
"React में एक एरर बाउंड्री (Error Boundary) बनाओ","""class ErrorBoundary extends React.Component {\n  constructor(props) { super(props); this.state = { hasError: false }; }\n  static getDerivedStateFromError(error) { return { hasError: true }; }\n  render() { if (this.state.hasError) { return <h1>Something went wrong.</h1>; } return this.props.children; }\n}"""
"React में एक Portal का उपयोग करो","""import ReactDOM from 'react-dom';\nreturn ReactDOM.createPortal(child, container);"""
"React में एक Ref का उपयोग करके DOM को एक्सेस करो","""const inputEl = useRef(null);\nconst onButtonClick = () => { inputEl.current.focus(); };"""
"Node.js में एक इवेंट एमिटर (Event Emitter) बनाओ","""const EventEmitter = require('events');\nclass MyEmitter extends EventEmitter {}\nconst myEmitter = new MyEmitter();\nmyEmitter.on('event', () => console.log('an event occurred!'));"""
"एक WebSocket सर्वर (Node.js) का ढाँचा","""const WebSocket = require('ws');\nconst wss = new WebSocket.Server({ port: 8080 });\nwss.on('connection', ws => {\n  ws.on('message', message => {});\n});"""
"जावास्क्रिप्ट में `localStorage` का उपयोग करो","localStorage.setItem('myKey', 'myValue');"
"जावास्क्रIPTS में `sessionStorage` का उपयोग करो","sessionStorage.setItem('myKey', 'myValue');"
"एक Service Worker में कैश (cache) का उपयोग करो","""self.addEventListener('fetch', event => {\n  event.respondWith(\n    caches.match(event.request).then(response => { ... })\n  );\n});"""
"GraphQL क्वेरी का एक उदाहरण","query { user(id: 1) { name, email } }"
"Apollo Client (React) का उपयोग करके GraphQL क्वेरी करो","""import { gql, useQuery } from '@apollo/client';\nconst GET_USER = gql`...`;\nfunction User(){\n    const { loading, error, data } = useQuery(GET_USER);\n}"""
"TypeScript में एक इंटरफ़ेस (interface) डिफाइन करो","interface User {\n  name: string;\n  age: number;\n}"
"TypeScript में एक सिंपल फंक्शन लिखो","function greet(person: string): string {\n  return 'Hello, ' + person;\n}"
"Webpack का एक बेसिक कॉन्फ़िगरेशन","""module.exports = {\n  entry: './src/index.js',\n  output: {\n    filename: 'bundle.js',\n    path: path.resolve(__dirname, 'dist'),\n  },\n};"""
"Babel का उपयोग करके ES6 कोड को ES5 में ट्रांसपाइल करो","// .babelrc file\n{ ""presets"": [""@babel/preset-env""] }"
"Jest का उपयोग करके एक सिंपल टेस्ट लिखो","test('adds 1 + 2 to equal 3', () => {\n  expect(sum(1, 2)).toBe(3);\n});"
"Cypress का उपयोग करके एक एंड-टू-एंड (E2E) टेस्ट लिखो","""describe('My First Test', () => {\n  it('Visits the kitchen sink', () => {\n    cy.visit('https://example.cypress.io')\n    cy.contains('type').click()\n  })\n})"""
"एक Web Component का शैडो DOM (Shadow DOM) बनाओ","const shadow = this.attachShadow({mode: 'open'});"
"`scikit-learn` से एक लीनियर रिग्रेशन (Linear Regression) मॉडल बनाओ","from sklearn.linear_model import LinearRegression\nmodel = LinearRegression()"
"`scikit-learn` में एक मॉडल को ट्रेन करो (`fit`)","model.fit(X_train, y_train)"
"`scikit-learn` में एक मॉडल से प्रेडिक्शन करो (`predict`)","predictions = model.predict(X_test)"
"`train_test_split` का उपयोग करके डेटा को स्प्लिट करो","from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)"
"एक मॉडल की एक्यूरेसी (accuracy) को मापो","from sklearn.metrics import accuracy_score\naccuracy = accuracy_score(y_test, predictions)"
"एक क्लासिफिकेशन रिपोर्ट प्रिंट करो","from sklearn.metrics import classification_report\nprint(classification_report(y_test, predictions))"
"एक कन्फ्यूजन मैट्रिक्स (Confusion Matrix) बनाओ","from sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_test, predictions)"
"एक लॉजिस्टिक रिग्रेशन (Logistic Regression) मॉडल बनाओ","from sklearn.linear_model import LogisticRegression\nmodel = LogisticRegression()"
"एक डिसीजन ट्री (Decision Tree) क्लासिफायर बनाओ","from sklearn.tree import DecisionTreeClassifier\nmodel = DecisionTreeClassifier()"
"एक रैंडम फारेस्ट (Random Forest) क्लासिफायर बनाओ","from sklearn.ensemble import RandomForestClassifier\nmodel = RandomForestClassifier(n_estimators=100, random_state=42)"
"एक सपोर्ट वेक्टर मशीन (SVM) क्लासिफायर बनाओ","from sklearn.svm import SVC\nmodel = SVC(kernel='linear')"
"K-मीन्स (K-Means) क्लस्टरिंग एल्गोरिथ्म का उपयोग करो","from sklearn.cluster import KMeans\nkmeans = KMeans(n_clusters=3, random_state=42)\nkmeans.fit(X)"
"फीचर स्केलिंग के लिए `StandardScaler` का उपयोग करो","from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nX_scaled = scaler.fit_transform(X)"
"एक `scikit-learn` पाइपलाइन (Pipeline) बनाओ","from sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.svm import SVC\npipe = Pipeline([('scaler', StandardScaler()), ('svc', SVC())])"
"ग्रिड सर्च (Grid Search) का उपयोग करके हाइपरपैरामीटर ट्यूनिंग करो","from sklearn.model_selection import GridSearchCV\nparameters = {'kernel':('linear', 'rbf'), 'C':[1, 10]}\nclf = GridSearchCV(SVC(), parameters)"
"एक NumPy एरे बनाओ","import numpy as np\narr = np.array([1, 2, 3])"
"एक Pandas सीरीज (Series) बनाओ","import pandas as pd\ns = pd.Series([10, 20, 30], name='MySeries')"
"एक Pandas DataFrame बनाओ","import pandas as pd\ndata = {'Name': ['Amit', 'Ria'], 'Age': [25, 22]}\ndf = pd.DataFrame(data)"
"एक DataFrame को 'Age' कॉलम के आधार पर अवरोही क्रम में सॉर्ट करो","sorted_df = df.sort_values(by='Age', ascending=False)"
"एक DataFrame में एक नया कॉलम जोड़ो","df['IsAdult'] = df['Age'] >= 18"
"एक DataFrame से एक कॉलम डिलीट करो","df.drop(columns=['Age'], inplace=True)"
"एक DataFrame में NaN (मिसिंग) वैल्यूज को 0 से भरो","df.fillna(0, inplace=True)"
"एक DataFrame को एक कॉलम के आधार पर ग्रुप करो और योग निकालो","df.groupby('Category')['Sales'].sum()"
"दो DataFrames को मर्ज करो (Inner Join)","pd.merge(df_left, df_right, on='user_id', how='inner')"
"एक DataFrame को एक्सेल फाइल में सेव करो","df.to_excel('output_data.xlsx', index=False, sheet_name='Sheet1')"
"एक एक्सेल फाइल को Pandas में पढ़ो","df = pd.read_excel('input_data.xlsx', sheet_name='Sheet1')"
"Matplotlib का उपयोग करके एक सिंपल लाइन प्लॉट बनाओ","import matplotlib.pyplot as plt\nplt.plot([1, 2, 3, 4], [1, 4, 9, 16])\nplt.show()"
"Matplotlib का उपयोग करके एक स्कैटर प्लॉट बनाओ","import matplotlib.pyplot as plt\nplt.scatter([1,2,3,4], [10,30,20,40])\nplt.show()"
"Seaborn लाइब्रेरी को इम्पोर्ट करो","import seaborn as sns"
"Seaborn का उपयोग करके एक डिस्ट्रिब्यूशन प्लॉट (distplot) बनाओ","import seaborn as sns\nimport numpy as np\ndata = np.random.randn(100)\nsns.histplot(data, kde=True)"
"Seaborn का उपयोग करके एक बॉक्स प्लॉट बनाओ","import seaborn as sns\nimport pandas as pd\n# df = pd.DataFrame(...)\nsns.boxplot(x='category_column', y='value_column', data=df)"
"Seaborn का उपयोग करके एक वायलिन प्लॉट (violin plot) बनाओ","import seaborn as sns\n# df = ...\nsns.violinplot(x='day', y='tip', data=df)"
"Seaborn का उपयोग करके एक हीटमैप (heatmap) बनाओ","import seaborn as sns\nimport numpy as np\ndata = np.random.rand(10, 12)\nsns.heatmap(data)"
"Seaborn का उपयोग करके एक पेयर प्लॉट (pairplot) बनाओ","import seaborn as sns\n# df = sns.load_dataset('iris')\nsns.pairplot(df, hue='species')"
"Plotly का उपयोग करके एक इंटरैक्टिव स्कैटर प्लॉट बनाओ","import plotly.express as px\n# df = px.data.iris()\nfig = px.scatter(df, x='sepal_width', y='sepal_length', color='species')\nfig.show()"
"NLTK (Natural Language Toolkit) को इम्पोर्ट करो","import nltk\nnltk.download('punkt') # Download required data"
"एक वाक्य को शब्दों में टोकनाइज़ करो (NLTK)","import nltk\nsentence = 'NLTK is a powerful library for Natural Language Processing.'\ntokens = nltk.word_tokenize(sentence)"
"एक टेक्स्ट से स्टॉप वर्ड्स (stop words) हटाओ","from nltk.corpus import stopwords\nstop_words = set(stopwords.words('english'))\nfiltered_tokens = [w for w in tokens if not w.lower() in stop_words]"
"टेक्स्ट का स्टेमिंग (stemming) करो","from nltk.stem import PorterStemmer\nstemmer = PorterStemmer()\nstemmed_word = stemmer.stem('running')"
"Word2Vec का कॉन्सेप्ट","// A popular technique in NLP to learn word associations. It's a shallow, two-layer neural network that is trained to reconstruct linguistic contexts of words."
"TF-IDF का कॉन्सेप्ट","// Term Frequency-Inverse Document Frequency is a numerical statistic intended to reflect how important a word is to a document in a collection or corpus."
"एक Keras सीक्वेंशियल (Sequential) मॉडल बनाओ","from tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense\nmodel = Sequential()\nmodel.add(Dense(64, activation='relu', input_shape=(10,)))\nmodel.add(Dense(1, activation='sigmoid'))"
"एक Keras मॉडल को Compile करो","model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])"
"एक Keras मॉडल की समरी (summary) प्रिंट करो","model.summary()"
"OpenCV (cv2) का उपयोग करके एक इमेज पढ़ो","import cv2\nimg = cv2.imread('my_image.jpg')"
"OpenCV का उपयोग करके एक इमेज को ग्रेस्केल में बदलो","gray_image = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)"
"OpenCV का उपयोग करके एक इमेज में चेहरे ढूंढो (स्यूडो-कोड)","face_cascade = cv2.CascadeClassifier('haarcascade_frontalface_default.xml')\nfaces = face_cascade.detectMultiScale(gray_image, scaleFactor=1.1, minNeighbors=5)"
"PyTorch में एक टेंसर (Tensor) बनाओ","import torch\nx = torch.tensor([[1, 2], [3, 4]], dtype=torch.float32)"
"एक AWS EC2 इंस्टेंस लॉन्च करने के लिए CLI कमांड","aws ec2 run-instances --image-id ami-0abcdef1234567890 --count 1 --instance-type t2.micro"
"एक सिंपल AWS Lambda फंक्शन (पाइथन)","import json\n\ndef lambda_handler(event, context):\n    print(f'Received event: {event}')\n    return {\n        'statusCode': 200,\n        'body': json.dumps('Hello from your Lambda function!')\n    }"
"एक सिंपल Google Cloud फंक्शन (पाइथन)","def hello_world_gcf(request):\n    request_json = request.get_json(silent=True)\n    if request_json and 'name' in request_json:\n        name = request_json['name']\n    else:\n        name = 'World'\n    return f'Hello, {name}!' "
"एक Docker कंटेनर को रन करो और पोर्ट को मैप करो","docker run -d -p 8080:80 nginx"
"एक Docker इमेज को बिल्ड करो","docker build -t my-custom-app:1.0 ."
"एक सिंपल Dockerfile (Node.js के लिए)","FROM node:18-alpine\nWORKDIR /usr/src/app\nCOPY package*.json ./\nRUN npm install\nCOPY . .\nEXPOSE 3000\nCMD [""node"", ""server.js""]"
"एक सिंपल Docker Compose फाइल (वेब + रेडिस)","version: '3.8'\nservices:\n  web:\n    build: .\n    ports:\n      - '5000:5000'\n  redis:\n    image: 'redis:alpine'"
"Docker Compose को बैकग्राउंड में चलाओ","docker-compose up -d"
"एक Kubernetes Pod का YAML कॉन्फ़िGuration","apiVersion: v1\nkind: Pod\nmetadata:\n  name: my-nginx-pod\nspec:\n  containers:\n  - name: my-nginx-container\n    image: nginx"
"Kubectl का उपयोग करके एक Pod को अप्लाई करो","kubectl apply -f my-pod-definition.yaml"
"Kubernetes में चल रहे सभी Pods को लिस्ट करो","kubectl get pods"
"एक Kubernetes डिप्लॉयमेंट (Deployment) का YAML","apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: my-app-deployment\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: my-app\n  template:\n    # ... pod template here ..."
"एक Kubernetes सर्विस (Service) का YAML (LoadBalancer)","apiVersion: v1\nkind: Service\nmetadata:\n  name: my-app-service\nspec:\n  type: LoadBalancer\n  selector:\n    app: my-app\n  ports:\n    - protocol: TCP\n      port: 80\n      targetPort: 8080"
"सर्वरलेस फ्रेमवर्क (Serverless Framework) का एक `serverless.yml` उदाहरण","service: my-aws-service\nprovider:\n  name: aws\n  runtime: python3.9\nfunctions:\n  myFunction:\n    handler: handler.endpoint"
"AWS S3 बकेट में एक फाइल अपलोड करो (CLI)","aws s3 cp my-local-file.txt s3://my-unique-bucket-name/"
"AWS S3 बकेट से एक फाइल डाउनलोड करो (CLI)","aws s3 cp s3://my-unique-bucket-name/my-remote-file.txt my-local-file.txt"
"Google Cloud Storage बकेट बनाओ (CLI)","gcloud storage buckets create gs://my-unique-bucket-name --location=US"
"एक फाइल को Google Cloud Storage पर अपलोड करो (CLI)","gcloud storage cp my-local-file.txt gs://my-unique-bucket-name/"
"Infrastructure as Code (IaC) क्या है","// Infrastructure as Code is the process of managing and provisioning computer data centers through machine-readable definition files, rather than physical hardware configuration or interactive configuration tools."
"Terraform का उपयोग करके एक AWS S3 बकेट बनाओ","resource ""aws_s3_bucket"" ""my_tf_bucket"" {\n  bucket = ""my-unique-terraform-bucket-name""\n}"
"Ansible का एक सिंपल प्लेबुक","---\n- name: My first playbook\n  hosts: webservers\n  tasks:\n    - name: Ensure nginx is at the latest version\n      apt:\n        name: nginx\n        state: latest"
"एक लोड बैलेंसर (Load Balancer) का कॉन्सेप्ट","// A device or service that acts as a reverse proxy and distributes network or application traffic across a number of servers to ensure no single server becomes overloaded."
"एक CDN (Content Delivery Network) का कॉन्सेप्ट","// A geographically distributed network of proxy servers and their data centers. The goal is to provide high availability and performance by distributing the service spatially relative to end-users."
"एक वर्चुअल मशीन (VM) क्या है","// A virtual machine is an emulation of a computer system. VMs are based on computer architectures and provide the functionality of a physical computer."
"कंटेनराइजेशन (Containerization) क्या है","// A lightweight form of virtualization that allows you to package up an application with all of its parts, such as libraries and other dependencies, and ship it all out as one container."
"Docker और VM में क्या अंतर है","// VMs virtualize the underlying hardware, creating a full virtual computer. Containers virtualize the operating system, allowing them to be more lightweight and run on a single OS kernel."
"एक CI/CD पाइपलाइन का कॉन्सेप्ट","// A CI/CD pipeline is a series of steps that must be performed in order to deliver a new version of software. It involves automated stages like build, test, and deployment."
"GitHub Actions का एक वर्कफ्लो जो एक Docker इमेज बनाए और पुश करे","name: Docker CI\non: [push]\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v3\n    - name: Build and push Docker image\n      uses: docker/build-push-action@v4\n      with:\n        push: true\n        tags: your-username/my-app:latest"
"एक सर्वरलेस API Gateway बनाओ (AWS)","// In the AWS Management Console, create a new API Gateway, define a resource and method (e.g., GET), and configure it to trigger a Lambda function as its integration backend."
"AWS DynamoDB (NoSQL) में एक आइटम डालो","aws dynamodb put-item --table-name MyTable --item '{\""ID\"": {\"N"": ""1\""}, \""Name\"": {\"S"": ""Amit\""}}'"
"Google Firestore (NoSQL) में एक डॉक्यूमेंट जोड़ो","db.collection('users').document('amit').set({'first': 'Amit', 'last': 'Saka'})"
"एक ब्लॉब स्टोरेज (Blob Storage) क्या है","// Blob (Binary Large Object) storage is a feature in cloud platforms for storing massive amounts of unstructured data, such as text or binary data."
"एक ऑब्जेक्ट स्टोरेज (Object Storage) क्या है","// A computer data storage architecture that manages data as objects. Each object typically includes the data itself, a variable amount of metadata, and a globally unique identifier."
"एक PaaS (Platform as a Service) का उदाहरण","// Heroku, Koyeb, Vercel, Google App Engine. They provide a platform allowing customers to develop, run, and manage applications without the complexity of building and maintaining the infrastructure."
"एक IaaS (Infrastructure as a Service) का उदाहरण","// AWS EC2, Google Compute Engine, Microsoft Azure VMs. They provide virtualized computing resources over the internet."
"एक SaaS (Software as a Service) का उदाहरण","// Gmail, Dropbox, Salesforce. Software is licensed on a subscription basis and is centrally hosted."
"ऑटो-स्केलिंग (Auto-scaling) का कॉन्सेप्ट","// A cloud computing feature that automatically adjusts the amount of computational resources in a server farm - typically measured by the number of active servers - up or down, as demand changes."
"ब्लू-ग्रीन डिप्लॉयमेंट (Blue-Green Deployment) का कॉन्सेप्ट","// A deployment strategy where you create two separate but identical environments. 'Blue' is the live environment and 'Green' is the new version. You switch traffic to Green and can easily switch back if issues arise."
"कैनरी डिप्लॉयमेंट (Canary Deployment) का कॉन्सेप्ट","// A strategy to reduce risk by slowly rolling out a software change to a small subset of users before making it available to the entire user base."
"एक Prometheus मेट्रिक का उदाहरण","http_requests_total{method=""post"",code=""200""} 1027"
"Grafana का उपयोग करके एक डैशबोर्ड बनाओ","// Use the Grafana UI to add a new panel, select a data source like Prometheus, and write a query to visualize a metric (e.g., http_requests_total)."
"AWS RDS (Relational Database Service) का उपयोग करो","// A managed relational database service by AWS that makes it simple to set up, operate, and scale a relational database in the cloud."
"Google Cloud SQL का उपयोग करो","// A fully-managed relational database service for MySQL, PostgreSQL, and SQL Server on Google Cloud."
"एक Docker वॉल्यूम (Volume) बनाओ","docker volume create my-persistent-data"
"एक Docker कंटेनर में एक वॉल्यूम को माउंट करो","docker run -v my-persistent-data:/app/data my-image"
"एक Docker नेटवर्क बनाओ","docker network create my-app-network"
"दो Docker कंटेनरों को एक ही नेटवर्क से जोड़ो","docker run --network=my-app-network --name=database ...\ndocker run --network=my-app-network --name=webapp ..."
"Nginx को एक रिवर्स प्रॉक्सी के रूप में कॉन्फ़िगर करो","location /api/ {\n    proxy_pass http://backend-service:5000;\n}"
"एक SSL/TLS सर्टिफिकेट को Let's Encrypt से प्राप्त करो","certbot --nginx -d example.com -d www.example.com"
"एक सिस्टम को मॉनिटर करने के लिए `htop` कमांड","htop"
"SQL इंजेक्शन से बचने के लिए पैरामीटराइज्ड क्वेरी का उपयोग करो","""# Safe way using a library like psycopg2\ncursor.execute(""SELECT * FROM users WHERE name = %s"", (user_input,))"""
"आउटपुट को एस्केप (escape) करके क्रॉस-साइट स्क्रिप्टिंग (XSS) से बचाव करो","""# In Flask/Jinja2, this is done automatically\n<p>{{ user_provided_content }}</p>"""
"एक 'Content Security Policy' (CSP) हेडर सेट करो","""# In Flask:\n@app.after_request\ndef add_security_headers(response):\n    response.headers['Content-Security-Policy'] = ""default-src 'self'; img-src *;""\n    return response"""
"Flask-WTF का उपयोग करके CSRF प्रोटेक्शन को इनेबल करो","from flask import Flask\nfrom flask_wtf.csrf import CSRFProtect\n\napp = Flask(__name__)\napp.config['SECRET_KEY'] = 'a-super-secret-key'\nCSRFProtect(app)"
"HTML फॉर्म में CSRF टोकन को रेंडर करो","""<form method='post'>\n    {{ form.csrf_token }} \n    \n</form>"""
"पासवर्ड को सुरक्षित रूप से हैश (hash) और साल्ट (salt) करो","from werkzeug.security import generate_password_hash\nhashed_password = generate_password_hash('my_secret_password', method='pbkdf2:sha256')"
"हैश किए हुए पासवर्ड को वेरीफाई करो","from werkzeug.security import check_password_hash\n# is_correct = check_password_hash(hashed_pw_from_db, 'submitted_password')"""
"एक HTTPS रीडायरेक्ट को कॉन्फ़िगर करो (Nginx)","server {\n    listen 80;\n    server_name mydomain.com;\n    return 301 https://$server_name$request_uri;\n}"
"एक API के लिए रेट लिमिटिंग लागू करो (Flask-Limiter)","from flask_limiter import Limiter\nfrom flask_limiter.util import get_remote_address\n\nlimiter = Limiter(app, key_func=get_remote_address, default_limits=['100 per day'])\n\n@app.route('/api')\n@limiter.limit('10/minute')\ndef api_route():\n    return 'OK'"
"क्लिकजैकिंग (Clickjacking) से बचने के लिए X-Frame-Options हेडर सेट करो","""# In Flask:\n@app.after_request\ndef apply_caching(response):\n    response.headers['X-Frame-Options'] = 'SAMEORIGIN'\n    return response"""
"एक JWT टोकन के लिए पेलोड (payload) बनाओ","import datetime\npayload = {\n    'user_id': 123,\n    'exp': datetime.datetime.utcnow() + datetime.timedelta(hours=1),\n    'iat': datetime.datetime.utcnow()\n}"
"PyJWT का उपयोग करके एक JWT टोकन बनाओ","import jwt\nsecret_key = 'your-super-secret-key'\ntoken = jwt.encode(payload, secret_key, algorithm='HS256')"
"JWT को ऑथेंटिकेट करने के लिए एक डेकोरेटर बनाओ","""from functools import wraps\ndef token_required(f):\n    @wraps(f)\n    def decorated(*args, **kwargs):\n        # ... token validation logic using request.headers ...\n        return f(*args, **kwargs)\n    return decorated"""
"Flask में एक फाइल अपलोड को सुरक्षित करो (secure_filename)","from werkzeug.utils import secure_filename\nfilename = secure_filename(user_uploaded_file.filename)"
"सुरक्षा के लिए नए टैब में खुलने वाले लिंक्स पर `rel='noopener noreferrer'` जोड़ो","<a href='https://externalsite.com' target='_blank' rel='noopener noreferrer'>Visit External Site</a>"
"डायरेक्ट्री ट्रैवर्सल हमले से बचाव","""# Sanitize user-provided filenames before using them in file paths, e.g., by checking for '..'"""
"XML एक्सटर्नल एंटिटी (XXE) हमले का कॉन्सेप्ट","// An attack against an application that parses XML input. If the XML parser is poorly configured, it can be exploited to read arbitrary files from the server."
"सर्वर-साइड रिक्वेस्ट फोर्जरी (SSRF) का कॉन्सेप्ट","// A vulnerability where an attacker can abuse server functionality to read or update internal resources. The attacker coerces the server to make a connection back to itself or to other internal services."
"एक API की को (key) को सुरक्षित रूप से स्टोर करो (एनवायरनमेंट वेरिएबल)","import os\napi_key = os.getenv('MY_SECRET_API_KEY', 'default_value_if_not_found')"
"एक HTTP Strict Transport Security (HSTS) हेडर सेट करो","response.headers['Strict-Transport-Security'] = 'max-age=31536000; includeSubDomains; preload'"
"कुकीज के लिए `HttpOnly` और `Secure` फ्लैग्स सेट करो","resp.set_cookie('session_id', 'value', httponly=True, secure=True, samesite='Lax')"
"इनपुट वैलिडेशन का एक उदाहरण","age_str = request.form.get('age')\nif not age_str.isdigit() or not 0 < int(age_str) < 120:\n    return 'Invalid age provided.', 400"
"ब्रूट-फोर्स हमलों को रोकने के लिए लॉगइन Attempts को सीमित करो","""# Logic to track failed login attempts per IP address or username in a database or cache, and implement a timeout (e.g., block for 5 minutes after 5 failed attempts)."""
"एक 'robots.txt' फाइल बनाओ जो सेंसिटिव एरिया को ब्लॉक करे","User-agent: *\nDisallow: /admin/\nDisallow: /private_dashboard/"
"एक .env फाइल का उपयोग करके सीक्रेट्स को मैनेज करो","""# In .env file:\nDATABASE_URL='postgresql://user:password@host/db'\nAPI_KEY='your_secret_key'\n\n# In Python code:\nfrom dotenv import load_dotenv\nload_dotenv()\napi_key = os.getenv('API_KEY')"""
"डेटाबेस क्रेडेंशियल्स को सीधे कोड में न लिखें","""# Bad practice: db_uri = 'user:password@host/db'\n# Good practice: db_uri = os.getenv('DATABASE_URL')"""
"Django में पासवर्ड हैशिंग का उपयोग","from django.contrib.auth.hashers import make_password, check_password\nhashed_pw = make_password('my-secret-pass')"
"Django में क्लिकजैकिंग मिडलवेयर का उपयोग","""# Ensure 'django.middleware.clickjacking.XFrameOptionsMiddleware' is present in the MIDDLEWARE list in settings.py"""
"एक सिंपल फ़ायरवॉल नियम (UFW) का उदाहरण","ufw allow ssh\nufw allow 80/tcp # Allow HTTP traffic\nufw allow 443/tcp # Allow HTTPS traffic"
"SQL इंजेक्शन से बचाव के लिए Stored Procedures का उपयोग","""-- In SQL Server\nCREATE PROCEDURE GetUserByUsername @Username NVARCHAR(50)\nAS\nSELECT * FROM Users WHERE Username = @Username;"""
"सिक्योरिटी हेडर्स को चेक करने के लिए एक ऑनलाइन टूल का उपयोग करो","// Use an online tool like securityheaders.com to scan your website for missing security headers."
"रेगुलर एक्सप्रेशन (RegEx) का उपयोग करके इनपुट को सैनिटाइज करो","import re\n# Remove all non-alphanumeric characters\nclean_input = re.sub(r'[^a-zA-Z0-9_]', '', user_input)"
"Open Redirect वल्नेरेबिलिटी से बचाव","""from urllib.parse import urlparse\n\ndef is_safe_redirect_url(target):\n    # Check if the target URL is on the same host\n    host_url = urlparse(request.host_url)\n    target_url = urlparse(urljoin(request.host_url, target))\n    return target_url.scheme in ('http', 'https') and host_url.netloc == target_url.netloc"""
"Django में XSS से बचाव","""\n{{ user_provided_content }}"""
"एक Cross-Site Request Forgery (CSRF) हमले का कॉन्सेप्ट","// An attack that tricks a user into submitting a malicious request. It inherits the identity and privileges of the victim to perform an undesired function on their behalf."
"एक सेशन कुकी के लिए `SameSite` एट्रिब्यूट को 'Strict' पर सेट करो","resp.set_cookie('session', 'value', samesite='Strict')"
"Django में एक लॉगइन व्यू का उपयोग करो","from django.contrib.auth.views import LoginView"
"Django में `@login_required` डेकोरेटर का उपयोग करो","from django.contrib.auth.decorators import login_required\n\n@login_required\ndef my_protected_view(request):\n    # This view can only be accessed by logged-in users.\n    ..."""
"डेटा को एन्क्रिप्ट (Encrypt) करने के लिए एक लाइब्रेरी का उपयोग करो","from cryptography.fernet import Fernet\nkey = Fernet.generate_key()\ncipher_suite = Fernet(key)\ncipher_text = cipher_suite.encrypt(b'A secret message.')"
"एन्क्रिप्टेड डेटा को डिक्रिप्ट (Decrypt) करो","plain_text = cipher_suite.decrypt(cipher_text)"
"एक 'Remember Me' फंक्शनैलिटी को सुरक्षित रूप से लागू करो","from flask_login import login_user\n# 'remember=True' will create a secure cookie\nlogin_user(user, remember=request.form.get('remember_me'))"
"डेटाबेस बैकअप को एन्क्रिप्ट करो","""# Use tools like gpg or built-in database encryption features to encrypt database backup files before storing them."""
"सॉफ़्टवेयर डिपेंडेंसी को वल्नेरेबिलिटी के लिए स्कैन करो","""# Use tools like 'pip audit' for Python, 'npm audit' for Node.js, or GitHub's Dependabot to scan for vulnerabilities."""
"Django में एक यूजर को बनाने के लिए सही तरीका","from django.contrib.auth import get_user_model\nUser = get_user_model()\nuser = User.objects.create_user(username='newuser', password='somepassword')"
"API की (key) को लीक होने से बचाने के लिए git हुक्स का उपयोग करो","""# Use pre-commit hooks with tools like 'trufflehog' or 'gitleaks' to scan for secrets before committing code to the repository."""
"TLS/SSL का क्या मतलब है","// Transport Layer Security / Secure Sockets Layer are cryptographic protocols designed to provide communications security over a computer network."
"एक Man-in-the-Middle (MITM) हमले का कॉन्सेप्ट","// An attack where the attacker secretly intercepts and relays messages between two parties who believe they are directly communicating with each other."
"OWASP टॉप 10 क्या है","// A standard awareness document for developers and web application security, representing a broad consensus about the most critical security risks to web applications."
"एक सिक्योर पासवर्ड रीसेट मैकेनिज्म बनाओ","""1. User requests a reset.\n2. Generate a unique, single-use, time-limited cryptographic token.\n3. Send a reset link with the token to the user's registered email address.\n4. When user clicks the link, validate the token is valid and not expired, then allow them to set a new password."""
"रिकर्शन का उपयोग करके फैक्टोरियल निकालो","def factorial(n):\n    if n <= 1: return 1\n    return n * factorial(n-1)"
"मेमोइज़ेशन (Memoization) का उपयोग करके फिबोनैची को ऑप्टिमाइज़ करो","memo = {}\ndef fib_memo(n):\n    if n in memo: return memo[n]\n    if n <= 1: return n\n    memo[n] = fib_memo(n-1) + fib_memo(n-2)\n    return memo[n]"
"डायनामिक प्रोग्रामिंग (टैबुलेशन) का उपयोग करके फिबोनैची निकालो","def fib_tabulation(n):\n    dp = [0] * (n + 1)\n    if n >= 1: dp[1] = 1\n    for i in range(2, n + 1):\n        dp[i] = dp[i-1] + dp[i-2]\n    return dp[n]"
"एक बाइनरी सर्च (binary search) एल्गोरिथ्म लिखो","def binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target: return mid\n        elif arr[mid] < target: left = mid + 1\n        else: right = mid - 1\n    return -1"
"एक बबल सॉर्ट (bubble sort) एल्गोरिथ्म लिखो","def bubble_sort(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j]"
"एक क्विक सॉर्ट (quick sort) एल्गोरिथ्म लिखो","def quick_sort(arr):\n    if len(arr) <= 1: return arr\n    pivot = arr[len(arr) // 2]\n    left = [x for x in arr if x < pivot]\n    middle = [x for x in arr if x == pivot]\n    right = [x for x in arr if x > pivot]\n    return quick_sort(left) + middle + quick_sort(right)"
"एक मर्ज सॉर्ट (merge sort) एल्गोरिथ्म का ढाँचा लिखो","def merge_sort(arr):\n    if len(arr) > 1:\n        mid = len(arr)//2\n        L = arr[:mid]\n        R = arr[mid:]\n        merge_sort(L)\n        merge_sort(R)\n        # ... Merging logic here ..."
"एक ग्राफ डेटा स्ट्रक्चर (adjacency list) का उपयोग करके बनाओ","graph = {\n    'A': ['B', 'C'],\n    'B': ['D', 'E'],\n    'C': ['F'],\n    'D': [], 'E': [], 'F': []\n}"
"एक ग्राफ में ब्रेथ-फर्स्ट सर्च (BFS) एल्गोरिथ्म लिखो","from collections import deque\ndef bfs(graph, start_node):\n    visited, queue = {start_node}, deque([start_node])\n    while queue:\n        node = queue.popleft()\n        # process node\n        for neighbor in graph[node]:\n            if neighbor not in visited:\n                visited.add(neighbor)\n                queue.append(neighbor)"
"एक ग्राफ में डेप्थ-फर्स्ट सर्च (DFS) एल्गोरिथ्म लिखो","def dfs(graph, start_node, visited=None):\n    if visited is None: visited = set()\n    visited.add(start_node)\n    # process node\n    for neighbor in graph[start_node]:\n        if neighbor not in visited:\n            dfs(graph, neighbor, visited)"
"डाइक्स्ट्रा (Dijkstra's) एल्गोरिथ्म का ढाँचा लिखो","import heapq\ndef dijkstra(graph, start):\n    distances = {node: float('infinity') for node in graph}\n    distances[start] = 0\n    pq = [(0, start)]\n    while pq:\n        # ... algorithm logic ..."
"एक स्टैक (stack) डेटा स्ट्रक्चर (LIFO) बनाओ","stack = []\nstack.append(1)\nstack.append(2)\nitem = stack.pop() # returns 2"
"एक क्यू (queue) डेटा स्ट्रक्चर (FIFO) बनाओ","from collections import deque\nqueue = deque()\nqueue.append(1)\nqueue.append(2)\nitem = queue.popleft() # returns 1"
"एक लिंक्ड लिस्ट (linked list) के लिए एक नोड क्लास बनाओ","class ListNode:\n    def __init__(self, value=0, next=None):\n        self.value = value\n        self.next = next"
"एक बाइनरी ट्री (binary tree) के लिए एक नोड क्लास बनाओ","class TreeNode:\n    def __init__(self, value=0, left=None, right=None):\n        self.value = value\n        self.left = left\n        self.right = right"
"एक बाइनरी सर्च ट्री (BST) में एक नोड इंसर्ट करो","def insert_into_bst(root, val):\n    if not root: return TreeNode(val)\n    if val > root.val: root.right = insert_into_bst(root.right, val)\n    else: root.left = insert_into_bst(root.left, val)\n    return root"
"बाइनरी ट्री का इन-ऑर्डर ट्रैवर्सल (In-order Traversal)","def inorder_traversal(root):\n    if root:\n        inorder_traversal(root.left)\n        print(root.val)\n        inorder_traversal(root.right)"
"बाइनरी ट्री का प्री-ऑर्डर ट्रैवर्सल (Pre-order Traversal)","def preorder_traversal(root):\n    if root:\n        print(root.val)\n        preorder_traversal(root.left)\n        preorder_traversal(root.right)"
"बाइनरी ट्री का पोस्ट-ऑर्डर ट्रैवर्सल (Post-order Traversal)","def postorder_traversal(root):\n    if root:\n        postorder_traversal(root.left)\n        postorder_traversal(root.right)\n        print(root.val)"
"एक हीप (Heap) डेटा स्ट्रक्चर का उपयोग करो (`heapq`)","import heapq\nmin_heap = [3, 1, 4, 1, 5, 9, 2]\nheapq.heapify(min_heap)\nheapq.heappush(min_heap, 0)"
"एक ट्राई (Trie) डेटा स्ट्रक्चर का नोड बनाओ","class TrieNode:\n    def __init__(self):\n        self.children = {}\n        self.is_end_of_word = False"
"Big O नोटेशन का O(1) या कांस्टेंट टाइम का उदाहरण","def get_first_element(arr):\n    return arr[0] # Always takes the same amount of time"
"Big O नोटेशन का O(n) या लीनियर टाइम का उदाहरण","def find_element(arr, target):\n    for item in arr:\n        if item == target: return True # Time grows linearly with input size n"
"Big O नोटेशन का O(n^2) या क्वाड्रेटिक टाइम का उदाहरण","def has_duplicates(arr):\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] == arr[j]: return True # Nested loops lead to n*n operations"
"Big O नोटेशन का O(log n) या लॉगरिदमिक टाइम का उदाहरण"," # Binary search is a classic O(log n) algorithm because it halves the search space in each step."
"Big O नोटेशन का O(n log n) टाइम का उदाहरण"," # Efficient sorting algorithms like Merge Sort and Quick Sort have O(n log n) time complexity."
"Two Sum प्रॉब्लम को हल करो","def two_sum(nums, target):\n    lookup = {}\n    for i, num in enumerate(nums):\n        if target - num in lookup:\n            return [lookup[target - num], i]\n        lookup[num] = i"
"एक स्ट्रिंग के शब्दों को उल्टा करो","def reverse_words_in_string(s):\n    return ' '.join(s.split()[::-1])"
"चेक करो कि एक स्ट्रिंग में सभी कैरेक्टर यूनिक हैं या नहीं","def are_chars_unique(s):\n    return len(s) == len(set(s))"
"एक नंबर आर्मस्ट्रांग नंबर है या नहीं, यह चेक करो","def is_armstrong_number(num):\n    s = str(num)\n    n = len(s)\n    return num == sum(int(digit)**n for digit in s)"
"एक कैशिंग डेकोरेटर `@lru_cache` बनाओ","from functools import lru_cache\n@lru_cache(maxsize=128)\ndef slow_recursive_function(n):\n    # ... slow calculation ...\n    return n"
"A* सर्च एल्गोरिथ्म का कॉन्सेप्ट","// A path-finding algorithm known for its performance and accuracy, widely used in games and robotics."
"हफमैन कोडिंग (Huffman Coding) का कॉन्सेप्ट","// A popular lossless data compression algorithm that uses variable-length codes for characters based on their frequency."
"नॅपसैक प्रॉब्लम (Knapsack Problem) का एक डायनामिक प्रोग्रामिंग समाधान","def knapsack_dp(weights, values, capacity):\n    # ... DP solution using a 2D array..."
"लॉन्गेस्ट कॉमन सबसीक्वेंस (Longest Common Subsequence) प्रॉब्लम","def lcs_dp(string1, string2):\n    # ... DP solution to find the longest common subsequence..."
"एक प्रायोरिटी क्यू (Priority Queue) बनाओ","import heapq\npriority_queue = []\nheapq.heappush(priority_queue, (2, 'medium priority task'))\nheapq.heappush(priority_queue, (1, 'high priority task'))"
"एक मैट्रिक्स को ट्रांसपोज (transpose) करो","matrix = [[1, 2, 3], [4, 5, 6]]\ntransposed_matrix = [list(row) for row in zip(*matrix)]"
"सभी डुप्लीकेट कैरेक्टर्स को एक स्ट्रिंग से हटाओ","original_string = 'hello world'\nresult = ''.join(sorted(set(original_string), key=original_string.index))"
"वैलिड ब्रैकेट्स प्रॉब्लम को हल करो","def is_valid_parentheses(s):\n    stack = []\n    mapping = {')': '(', '}': '{', ']': '['}\n    for char in s:\n        if char in mapping:\n            top_element = stack.pop() if stack else '#'\n            if mapping[char] != top_element:\n                return False\n        else:\n            stack.append(char)\n    return not stack"
"डबल लिंक्ड लिस्ट (Doubly Linked List) का एक नोड बनाओ","class DListNode:\n    def __init__(self, value):\n        self.value = value\n        self.prev = None\n        self.next = None"
"एक सर्कुलर क्यू (Circular Queue) का कॉन्सेप्ट","// A linear data structure in which the operations are performed based on FIFO principle and the last position is connected back to the first position to make a circle."
"स्लाइडिंग विंडो एल्गोरिथ्म का एक उदाहरण (मैक्सिमम सम)","def max_sum_subarray(arr, k):\n    # ... sliding window logic to find max sum of a subarray of size k ..."
"स्ट्रिंग कम्प्रेशन एल्गोरिथ्म लिखो (जैसे 'AAABBC' to 'A3B2C1')","def compress_string(s):\n    # ... logic for run-length encoding ..."
"यूनियन-फाइंड (Union-Find) डेटा स्ट्रक्चर का ढाँचा","class UnionFind:\n    def __init__(self, size):\n        self.parent = list(range(size))\n    def find(self, i):\n        # ... find logic with path compression ...\n    def union(self, i, j):\n        # ... union by rank/size ..."
"काडन्स एल्गोरिथ्म (Kadane's Algorithm) का उपयोग करो","def max_subarray_sum(arr):\n    max_so_far = -float('inf')\n    max_ending_here = 0\n    for x in arr:\n        max_ending_here = max_ending_here + x\n        if max_so_far < max_ending_here: max_so_far = max_ending_here\n        if max_ending_here < 0: max_ending_here = 0\n    return max_so_far"
"एक ब्लूम फ़िल्टर (Bloom Filter) का कॉन्सेप्ट","// A space-efficient probabilistic data structure that is used to test whether an element is a member of a set. False positives are possible, but false negatives are not."
"एक हैश मैप/डिक्शनरी का अपना इम्प्लीमेंटेशन बनाओ","class HashTable:\n    def __init__(self):\n        self.size = 10\n        self.map = [None] for _ in range(self.size)\n    def _get_hash(self, key):\n        return hash(key) % self.size\n    # ... set, get, and delete methods ..."
"लीनियर प्रोग्रामिंग का एक उदाहरण (PuLP लाइब्रेरी)","from pulp import LpProblem, LpVariable, lpSum\n# ... linear programming problem setup for optimization ..."
"git का उपयोग करके एक नई रिपॉजिटरी इनिशियलाइज़ करो","git init"
"git में एक फाइल को स्टेज करो","git add my_file.txt"
"git में सभी फाइलों को स्टेज करो","git add ."
"git में एक कमिट (commit) करो","git commit -m 'Add new feature'"
"git का स्टेटस चेक करो","git status"
"git का लॉग (log) देखो","git log --oneline"
"एक नई git ब्रांच बनाओ","git branch feature/new-login"
"एक दूसरी git ब्रांच पर स्विच करो","git checkout feature/new-login"
"एक git ब्रांच को मर्ज करो","git merge feature/new-login"
"एक git रिमोट (remote) जोड़ो","git remote add origin https://github.com/user/repo.git"
"एक लोकल ब्रांच को एक रिमोट रिपॉजिटरी पर पुश करो","git push -u origin main"
"एक रिमोट रिपॉजिटरी से बदलावों को पुल करो","git pull origin main"
"एक git रिपॉजिटरी को क्लोन करो","git clone https://github.com/user/repo.git"
"`.gitignore` में एक फाइल या फोल्डर को इग्नोर करो","// In .gitignore:\nnode_modules/\n.env"
"एक सिंपल Dockerfile बनाओ (पाइथन Flask के लिए)","FROM python:3.9-slim\nWORKDIR /app\nCOPY requirements.txt .\nRUN pip install -r requirements.txt\nCOPY . .\nCMD [""gunicorn"", ""--bind"", ""0.0.0.0:8000"", ""app:app""]"
"एक Docker इमेज को बिल्ड करो","docker build -t my-flask-app ."
"एक Docker कंटेनर को रन करो और पोर्ट को मैप करो","docker run -p 5000:8000 my-flask-app"
"Docker Hub पर एक इमेज को पुश करो","docker push your-username/my-flask-app"
"Docker Compose का एक सिंपल उदाहरण (वेब + डेटाबेस)","version: '3.8'\nservices:\n  web: \n    build: .\n  db:\n    image: postgres"
"एक Bash स्क्रिप्ट का 'shebang' लिखो","#!/bin/bash"
"एक Bash स्क्रिप्ट में एक वेरिएबल बनाओ और उसे प्रिंट करो","MY_VAR='Hello'\necho $MY_VAR"
"एक Bash स्क्रिप्ट में `if` स्टेटमेंट का उपयोग करो","if [ -f 'file.txt' ]; then\n  echo 'File exists.'\nfi"
"एक Bash स्क्रिप्ट में `for` लूप का उपयोग करो","for i in {1..5}; do\n  echo 'Number: '$i\ndone"
"एक फाइल के परमिशन को बदलो (`chmod`)","chmod +x my_script.sh"
"VS Code में एक नया टर्मिनल खोलो","// Use shortcut Ctrl+` or Terminal > New Terminal"
"VS Code में JSON फाइल को फॉर्मेट करो","// Right-click > Format Document"
"एक `requirements.txt` फाइल से सभी पाइथन पैकेजेज इनस्टॉल करो","pip install -r requirements.txt"
"SSH का उपयोग करके एक रिमोट सर्वर से कनेक्ट करो","ssh user@server_ip_address"
"SCP का उपयोग करके एक फाइल को रिमोट सर्वर पर कॉपी करो","scp local_file.txt user@server_ip:/remote/path/"
"एक Cron Job का उदाहरण लिखो जो हर रोज़ आधी रात को चले","0 0 * * * /path/to/my_script.sh"
"JSON डेटा को `jq` का उपयोग करके कमांड-लाइन पर पार्स करो","cat data.json | jq '.user.name'"
"CI/CD (Continuous Integration/Continuous Deployment) क्या है","// A practice of automating the build, test, and deployment of applications."
"GitHub Actions का एक सिंपल वर्कफ्लो बनाओ","name: CI\non: [push]\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v3\n    - run: echo 'Hello, World!'"
"एक Makefile का एक सिंपल उदाहरण","run:\n\tpython app.py\n\ntest:\n\tpytest"
"एक Nginx कॉन्फ़िगरेशन का एक सिंपल उदाहरण (static server)","server {\n    listen 80;\n    server_name example.com;\n    root /var/www/html;\n}"
"एक `.env` फाइल का उपयोग करके एनवायरनमेंट वेरिएबल्स को मैनेज करो","// In .env:\nDATABASE_URL='...' \n\n# In Python:\nimport os\ndb_url = os.getenv('DATABASE_URL')"
"Linter (जैसे Flake8) का उपयोग करके पाइथन कोड को चेक करो","flake8 my_app/"
"एक 'Hello World' C++ प्रोग्राम","""#include <iostream>\nint main() {\n    std::cout << ""Hello, World!"";\n    return 0;\n}"""
"एक 'Hello World' Java प्रोग्राम","""class HelloWorld {\n    public static void main(String[] args) {\n        System.out.println(""Hello, World!"");\n    }\n}"""
"एक 'Hello World' Go प्रोग्राम","""package main\nimport ""fmt""\nfunc main() {\n    fmt.Println(""Hello, World!"")\n}"""
"एक 'Hello World' Rust प्रोग्राम","""fn main() {\n    println!(""Hello, world!"");\n}"""
"एक 'Hello World' PHP स्क्रिप्ट","""<?php echo 'Hello, World!'; ?>"""
"git रिबेस (rebase) का एक उदाहरण","git rebase main"
"git चेरी-पिक (cherry-pick) का एक उदाहरण","git cherry-pick <commit-hash>"
"एक Docker कंटेनर के अंदर शेल (shell) में जाओ","docker exec -it <container_id> /bin/bash"
"सभी चल रहे Docker कंटेनरों को लिस्ट करो","docker ps"
"सभी Docker इमेजेज को लिस्ट करो","docker images"
"एक Kubernetes Pod का YAML कॉन्फ़िगरेशन","apiVersion: v1\nkind: Pod\nmetadata:\n  name: my-pod\nspec:\n  containers:\n  - name: my-container\n    image: nginx"
"AWS S3 बकेट में एक फाइल अपलोड करो (CLI)","aws s3 cp my-file.txt s3://my-bucket/"
"एक सिंपल Ansible प्लेबुक का ढाँचा","---\n- hosts: all\n  tasks:\n    - name: Ensure nginx is installed\n      apt: name=nginx state=latest"
"Terraform का उपयोग करके एक रिसोर्स बनाओ","resource ""aws_instance"" ""example"" {\n  ami           = ""ami-0c55b159cbfafe1f0""\n  instance_type = ""t2.micro""\n}"
"`scikit-learn` से एक लीनियर रिग्रेशन (Linear Regression) मॉडल बनाओ","from sklearn.linear_model import LinearRegression\nmodel = LinearRegression()"
"`scikit-learn` में एक मॉडल को ट्रेन करो (`fit`)","model.fit(X_train, y_train)"
"`scikit-learn` में एक मॉडल से प्रेडिक्शन करो (`predict`)","predictions = model.predict(X_test)"
"`train_test_split` का उपयोग करके डेटा को स्प्लिट करो","from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)"
"एक मॉडल की एक्यूरेसी (accuracy) को मापो","from sklearn.metrics import accuracy_score\naccuracy = accuracy_score(y_test, predictions)"
"एक क्लासिफिकेशन रिपोर्ट प्रिंट करो","from sklearn.metrics import classification_report\nprint(classification_report(y_test, predictions))"
"एक कन्फ्यूजन मैट्रिक्स (Confusion Matrix) बनाओ","from sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_test, predictions)"
"एक लॉजिस्टिक रिग्रेशन (Logistic Regression) मॉडल बनाओ","from sklearn.linear_model import LogisticRegression\nmodel = LogisticRegression()"
"एक डिसीजन ट्री (Decision Tree) क्लासिफायर बनाओ","from sklearn.tree import DecisionTreeClassifier\nmodel = DecisionTreeClassifier()"
"एक रैंडम फारेस्ट (Random Forest) क्लासिफायर बनाओ","from sklearn.ensemble import RandomForestClassifier\nmodel = RandomForestClassifier(n_estimators=100)"
"एक सपोर्ट वेक्टर मशीन (SVM) क्लासिफायर बनाओ","from sklearn.svm import SVC\nmodel = SVC()"
"K-मीन्स (K-Means) क्लस्टरिंग एल्गोरिथ्म का उपयोग करो","from sklearn.cluster import KMeans\nkmeans = KMeans(n_clusters=3)\nkmeans.fit(X)"
"फीचर स्केलिंग के लिए `StandardScaler` का उपयोग करो","from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nX_scaled = scaler.fit_transform(X)"
"एक `scikit-learn` पाइपलाइन (Pipeline) बनाओ","from sklearn.pipeline import Pipeline\npipe = Pipeline([('scaler', StandardScaler()), ('svc', SVC())])"
"ग्रिड सर्च (Grid Search) का उपयोग करके हाइपरपैरामीटर ट्यूनिंग करो","from sklearn.model_selection import GridSearchCV\nparameters = {'kernel':('linear', 'rbf')}\nclf = GridSearchCV(SVC(), parameters)"
"एक NumPy एरे बनाओ","import numpy as np\narr = np.array([1, 2, 3])"
"एक Pandas सीरीज (Series) बनाओ","import pandas as pd\ns = pd.Series([1, 2, 3])"
"एक Pandas DataFrame बनाओ","import pandas as pd\ndf = pd.DataFrame({'col1': [1, 2], 'col2': [3, 4]})"
"एक DataFrame को 'Age' कॉलम के आधार पर सॉर्ट करो","sorted_df = df.sort_values(by='Age')"
"एक DataFrame में एक नया कॉलम जोड़ो","df['new_column'] = df['column1'] * 2"
"एक DataFrame से एक कॉलम डिलीट करो","df.drop('column_name', axis=1, inplace=True)"
"एक DataFrame में NaN (मिसिंग) वैल्यूज को 0 से भरो","df.fillna(0, inplace=True)"
"एक DataFrame को एक कॉलम के आधार पर ग्रुप करो और योग निकालो","df.groupby('Category')['Amount'].sum()"
"दो DataFrames को मर्ज करो","pd.merge(df1, df2, on='common_column')"
"एक DataFrame को एक्सेल फाइल में सेव करो","df.to_excel('output.xlsx', index=False)"
"एक एक्सेल फाइल को Pandas में पढ़ो","df = pd.read_excel('input.xlsx')"
"Matplotlib का उपयोग करके एक सिंपल लाइन प्लॉट बनाओ","import matplotlib.pyplot as plt\nplt.plot([1, 2, 3], [4, 1, 5])\nplt.show()"
"Matplotlib का उपयोग करके एक स्कैटर प्लॉट बनाओ","import matplotlib.pyplot as plt\nplt.scatter([1,2,3], [5,2,8])\nplt.show()"
"Seaborn लाइब्रेरी को इम्पोर्ट करो","import seaborn as sns"
"Seaborn का उपयोग करके एक डिस्ट्रिब्यूशन प्लॉट (distplot) बनाओ","import seaborn as sns\n# data = ...\nsns.histplot(data)"
"Seaborn का उपयोग करके एक बॉक्स प्लॉट बनाओ","import seaborn as sns\n# df = ...\nsns.boxplot(x='category', y='value', data=df)"
"Seacorn का उपयोग करके एक वायलिन प्लॉट (violin plot) बनाओ","import seaborn as sns\n# df = ...\nsns.violinplot(x='day', y='tip', data=df)"
"Seaborn का उपयोग करके एक हीटमैप (heatmap) बनाओ","import seaborn as sns\n# data = ... (a 2D array)\nsns.heatmap(data)"
"Seaborn का उपयोग करके एक पेयर प्लॉट (pairplot) बनाओ","import seaborn as sns\n# df = ...\nsns.pairplot(df)"
"Plotly का उपयोग करके एक इंटरैक्टिव स्कैटर प्लॉट बनाओ","import plotly.express as px\n# df = ...\nfig = px.scatter(df, x='gdpPercap', y='lifeExp')\nfig.show()"
"NLTK (Natural Language Toolkit) को इम्पोर्ट करो","import nltk"
"एक वाक्य को शब्दों में टोकनाइज़ करो (NLTK)","import nltk\nsentence = 'Hello world.'\ntokens = nltk.word_tokenize(sentence)"
"एक टेक्स्ट से स्टॉप वर्ड्स (stop words) हटाओ","from nltk.corpus import stopwords\nstop_words = set(stopwords.words('english'))\n# ... filter tokens ..."
"टेक्स्ट का स्टेमिंग (stemming) करो","from nltk.stem import PorterStemmer\nstemmer = PorterStemmer()\nstemmed_word = stemmer.stem('running')"
"Word2Vec का कॉन्सेप्ट","// An algorithm to create word embeddings, representing words as vectors."
"TF-IDF का कॉन्सेप्ट","// A numerical statistic that is intended to reflect how important a word is to a document in a collection or corpus."
"एक Keras सीक्वेंशियल (Sequential) मॉडल बनाओ","from tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense\nmodel = Sequential()\nmodel.add(Dense(10, activation='relu'))"
"एक Keras मॉडल को Compile करो","model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])"
"एक Keras मॉडल की समरी (summary) प्रिंट करो","model.summary()"
"OpenCV (cv2) का उपयोग करके एक इमेज पढ़ो","import cv2\nimg = cv2.imread('image.jpg')"
"OpenCV का उपयोग करके एक इमेज को ग्रेस्केल में बदलो","gray_img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)"
"OpenCV का उपयोग करके एक इमेज में चेहरे ढूंढो (स्यूडो-कोड)","face_cascade = cv2.CascadeClassifier('haarcascade_frontalface_default.xml')\nfaces = face_cascade.detectMultiScale(gray_img, 1.1, 4)"
"PyTorch में एक टेंसर (Tensor) बनाओ","import torch\nx = torch.tensor([[1, 2], [3, 4]])"
"Flask-SocketIO का उपयोग करके एक वेबसॉकेट सर्वर बनाओ","from flask_socketio import SocketIO\napp = Flask(__name__)\nsocketio = SocketIO(app)"
"एक वेबसॉकेट 'connect' इवेंट को हैंडल करो","@socketio.on('connect')\ndef handle_connect():\n    print('Client connected')"
"एक वेबसॉकेट सर्वर से क्लाइंट को एक मैसेज भेजो (`emit`)","from flask_socketio import emit\nemit('my_response', {'data': 'Server response'})"
"जावास्क्रिप्ट क्लाइंट पर एक वेबसॉकेट मैसेज को सुनो","const socket = io();\nsocket.on('my_response', function(msg) {\n    console.log(msg.data);\n});"
"Flask में Redis के साथ एक सिंपल कैश (cache) बनाओ","import redis\nr = redis.Redis()\n\ndef get_data():\n    cached = r.get('my_key')\n    if cached: return cached\n    # ... get from db ...\n    r.set('my_key', data, ex=3600)\n    return data"
"Flask में SQL इंजेक्शन से बचने के लिए SQLAlchemy का उपयोग करो","user = User.query.filter_by(username=username_from_input).first() # This is safe"
"HTML टेम्पलेट में क्रॉस-साइट स्क्रिप्टिंग (XSS) से बचाव","""\n<p>{{ user_provided_content }}</p>"""
"एक 'Content Security Policy' (CSP) हेडर सेट करो","""# In Flask:\n@app.after_request\ndef add_security_headers(response):\n    response.headers['Content-Security-Policy'] = ""default-src 'self'""\n    return response"""
"Flask-WTF का उपयोग करके CSRF प्रोटेक्शन को इनेबल करो","from flask_wtf.csrf import CSRFProtect\napp = Flask(__name__)\nCSRFProtect(app)"
"फॉर्म में CSRF टोकन को रेंडर करो","""<form method='post'>\n    {{ form.csrf_token }}\n    ...\n</form>"""
"पासवर्ड को सुरक्षित रूप से हैश (hash) और साल्ट (salt) करो","from werkzeug.security import generate_password_hash\nhashed_pw = generate_password_hash('my_password', method='pbkdf2:sha256')"
"हैश किए हुए पासवर्ड को वेरीफाई करो","from werkzeug.security import check_password_hash\ncheck_password_hash(hashed_pw_from_db, 'submitted_password')"
"एक HTTPS रीडायरेक्ट को कॉन्फ़िगर करो (Nginx)","server {\n    listen 80;\n    server_name example.com;\n    return 301 https://$server_name$request_uri;\n}"
"एक API के लिए रेट लिमिटिंग लागू करो (Flask-Limiter)","from flask_limiter import Limiter\nlimiter = Limiter(app, default_limits=['100 per day'])\n@app.route('/api')\n@limiter.limit('10/minute')\ndef api_route():\n    return 'OK'"
"क्लिकजैकिंग (Clickjacking) से बचने के लिए X-Frame-Options हेडर सेट करो","""# In Flask:\n@app.after_request\ndef add_header(response):\n    response.headers['X-Frame-Options'] = 'SAMEORIGIN'\n    return response"""
"एक JWT टोकन के लिए एक पेलोड (payload) बनाओ","import datetime\npayload = {\n    'exp': datetime.datetime.utcnow() + datetime.timedelta(days=1),\n    'sub': user_id\n}"
"PyJWT का उपयोग करके एक JWT टोकन बनाओ","import jwt\ntoken = jwt.encode(payload, 'secret', algorithm='HS256')"
"JWT को ऑथेंटिकेट करने के लिए एक डेकोरेटर बनाओ","""from functools import wraps\ndef token_required(f):\n    @wraps(f)\n    def decorated(*args, **kwargs):\n        # ... token validation logic here ...\n        return f(*args, **kwargs)\n    return decorated"""
"Flask में एक फाइल अपलोड को सुरक्षित करो (secure_filename)","from werkzeug.utils import secure_filename\nfilename = secure_filename(f.filename)"
"Django में एक लॉगइन व्यू","from django.contrib.auth.views import LoginView"
"Django में एक लॉगआउट व्यू","from django.contrib.auth.views import LogoutView"
"Flask-Admin का उपयोग करके एक एडमिन इंटरफ़ेस बनाओ","from flask_admin import Admin\nfrom flask_admin.contrib.sqla import ModelView\nadmin = Admin(app)\nadmin.add_view(ModelView(User, db.session))"
"Django में एडमिन एक्शन बनाओ","@admin.action(description='Mark as published')\ndef make_published(modeladmin, request, queryset):\n    queryset.update(status='published')"
"SQLAlchemy में एक डेटाबेस ट्रांजेक्शन का उपयोग करो","try:\n    db.session.add(obj1)\n    db.session.add(obj2)\n    db.session.commit()\nexcept:\n    db.session.rollback()"
"एक Celery टास्क डिफाइन करो","from celery import Celery\napp = Celery('tasks', broker='redis://localhost')\n\n@app.task\ndef add(x, y):\n    return x + y"
"एक Celery टास्क को कॉल करो","add.delay(4, 4)"
"एक लॉगइन attempt को ट्रैक करो और ब्रूट-फोर्स हमलों को रोको","""# Logic to store failed attempts and block IP after N failures"""
"एक API एंडपॉइंट को CORS के लिए कॉन्फ़िगर करो","from flask_cors import CORS\n\n@app.route('/api/public')\n@CORS(app) # Allow all origins\ndef public_api():\n    return 'OK'"
"पाइथन में एक डॉट एनवायरनमेंट (`.env`) फाइल को लोड करो","from dotenv import load_dotenv\nload_dotenv()"
"एक GitHub Actions वर्कफ्लो बनाओ जो पाइथन टेस्ट चलाए","name: Python Tests\non: [push]\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v2\n    - name: Run tests\n      run: pytest"
"pytest का उपयोग करके एक सिंपल टेस्ट फंक्शन लिखो","def test_addition():\n    assert 1 + 1 == 2"
"unittest का उपयोग करके एक टेस्ट क्लास बनाओ","import unittest\nclass TestMyCode(unittest.TestCase):\n    def test_sum(self):\n        self.assertEqual(sum([1, 2, 3]), 6)"
"Flask में एक एप्लीकेशन फैक्ट्री पैटर्न का उपयोग करो","def create_app():\n    app = Flask(__name__)\n    # ... configure app ...\n    return app"
"Django में कस्टम यूजर मॉडल बनाओ","from django.contrib.auth.models import AbstractUser\nclass MyUser(AbstractUser):\n    pass"
"एक Alembic माइग्रेशन स्क्रिप्ट बनाओ","alembic revision -m 'add new column'"
"Alembic माइग्रेशन को अप्लाई करो","alembic upgrade head"
"एक Django सिग्नल बनाओ","from django.db.models.signals import post_save\nfrom django.dispatch import receiver\n\n@receiver(post_save, sender=User)\ndef user_created_handler(sender, instance, created, **kwargs):\n    if created:\n        print(f'New user created: {instance.username}')"
"एक पाइथन टाइप हिंटिंग का उदाहरण","def my_function(name: str) -> str:\n    return f'Hello, {name}'"
"Pydantic का उपयोग करके डेटा वैलिडेशन करो","from pydantic import BaseModel\nclass User(BaseModel):\n    name: str\n    age: int\n\nuser = User(name='Amit', age=25)"
"FastAPI में एक सिंपल API एंडपॉइंट बनाओ","from fastapi import FastAPI\napp = FastAPI()\n@app.get('/')\ndef root():\n    return {'message': 'Hello'}"
"FastAPI में पाथ पैरामीटर का उपयोग करो","@app.get('/items/{item_id}')\ndef read_item(item_id: int):\n    return {'item_id': item_id}"
"FastAPI में क्वेरी पैरामीटर का उपयोग करो","@app.get('/items/')\ndef read_items(skip: int = 0, limit: int = 10):\n    return {'skip': skip, 'limit': limit}"
"FastAPI में Pydantic मॉडल का उपयोग करो","@app.post('/users/')\ndef create_user(user: User):\n    return user"
"FastAPI में एक बैकग्राउंड टास्क बनाओ","from fastapi import BackgroundTasks\n\ndef my_task(message: str):\n    # ... do something ...\n\n@app.post('/send')\ndef send_notification(background_tasks: BackgroundTasks):\n    background_tasks.add_task(my_task, 'Hello')\n    return {'message': 'Notification sent'}"
"Flask में एक sitemap.xml जनरेट करो","@app.route('/sitemap.xml')\ndef sitemap():\n    # ... logic to generate sitemap ...\n    return Response(xml_content, mimetype='application/xml')"
"SQLAlchemy में एक async सेशन बनाओ","from sqlalchemy.ext.asyncio import create_async_engine\nengine = create_async_engine('...')"
"Starlette का उपयोग करके एक ASGI एप्लीकेशन बनाओ","from starlette.applications import Starlette\nfrom starlette.responses import JSONResponse\n\napp = Starlette()\n@app.route('/')\nasync def homepage(request):\n    return JSONResponse({'hello': 'world'})"
"uvicorn का उपयोग करके एक ASGI ऐप को चलाओ","uvicorn main:app --reload"
"SQLAlchemy में `.one()` का उपयोग करो","user = session.query(User).filter_by(id=1).one() # Raises error if not found"
"SQLAlchemy में `.first()` का उपयोग करो","user = session.query(User).filter_by(id=1).first() # Returns None if not found"
"SQLAlchemy Core का उपयोग करके एक क्वेरी बनाओ","from sqlalchemy import select\nquery = select(users_table).where(users_table.c.name == 'amit')"
"एक इमेज को WebP फॉर्मेट में सर्व करो","<picture><source srcset='image.webp' type='image/webp'><img src='image.jpg' alt='image'></picture>"
"परफॉरमेंस के लिए इमेज को लेजी लोड (lazy load) करो","<img src='placeholder.jpg' loading='lazy' data-src='real-image.jpg' alt='lazy loaded image'>"
"पेज रेंडरिंग को ब्लॉक न करने के लिए स्क्रिप्ट को `async` के साथ लोड करो","<script src='analytics.js' async></script>"
"पेज रेंडरिंग के बाद स्क्रिप्ट को चलाने के लिए `defer` का उपयोग करो","<script src='main-script.js' defer></script>"
"एक सर्विस वर्कर (Service Worker) को रजिस्टर करो","<script>if ('serviceWorker' in navigator) { navigator.serviceWorker.register('/sw.js'); }</script>"
"एक बेसिक सर्विस वर्कर फाइल (`sw.js`) का ढाँचा","// In sw.js:\nself.addEventListener('install', event => { console.log('Service worker installed'); });\nself.addEventListener('fetch', event => { console.log('Fetching:', event.request.url); });"
"प्रोग्रेसिव वेब ऐप (PWA) के लिए एक मेनिफेस्ट फाइल (`manifest.json`) बनाओ","{""short_name"": ""MyPWA"", ""name"": ""My Progressive Web App"", ""icons"": [...], ""start_url"": ""."", ""display"": ""standalone""}"
"मेनिफेस्ट फाइल को HTML से लिंक करो","<link rel='manifest' href='/manifest.json'>"
"CSS `content-visibility` का उपयोग करके रेंडरिंग को ऑप्टिमाइज़ करो","<style>.section{content-visibility: auto; contain-intrinsic-size: 1000px;}</style><div class='section'>...long content...</div>"
"CSS `will-change` का उपयोग करके एनीमेशन को ऑप्टिमाइज़ करो","<style>.animated-box{will-change: transform; transition: transform 0.5s;}.animated-box:hover{transform: translateX(50px);}</style><div class='animated-box'></div>"
"CSS `font-display: swap` का उपयोग करके फॉन्ट लोडिंग को ऑप्टिमाइज़ करो","<style>@font-face { font-family: 'MyFont'; src: url('myfont.woff2'); font-display: swap; }</style>"
"पेज लेआउट शिफ्ट से बचने के लिए इमेज में `width` और `height` एट्रिब्यूट दो","<img src='photo.jpg' width='200' height='150' alt='A properly sized photo'>"
"Intersection Observer API का उपयोग करके एक एलिमेंट के दिखने पर डिटेक्ट करो","<div id='observed' style='height:100px; margin-top:1000px;'></div><script>const observer = new IntersectionObserver(entries => {if(entries[0].isIntersecting) console.log('Element is visible!');}); observer.observe(document.getElementById('observed'));</script>"
"वेबसाइट की परफॉरमेंस को मापने के लिए Performance API का उपयोग करो","<script>window.onload = () => { let perfEntries = performance.getEntriesByType('navigation'); console.log(`Page load time: ${perfEntries[0].duration}`); };</script>"
"CSS Containment का उपयोग करो","<style>.widget { contain: layout style paint; }</style><div class='widget'>...</div>"
"एक `ResizeObserver` का उपयोग करके एक एलिमेंट का साइज़ बदलने पर डिटेक्ट करो","<textarea id='resizeMe'></textarea><script>const resizeObserver = new ResizeObserver(entries => console.log('Element resized!')); resizeObserver.observe(document.getElementById('resizeMe'));</script>"
"Code Splitting (कोड स्प्लिटिंग) का कॉन्सेप्ट","// The practice of splitting code into various bundles which can then be loaded on demand or in parallel."
"Tree Shaking (ट्री शेकिंग) का कॉन्सेप्ट","// The process of removing unused (dead) code from the final bundle."
"CSS को Minify करने का कॉन्सेप्ट","// Removing all unnecessary characters from CSS code to reduce its size, like whitespace and comments."
"JavaScript को Uglify/Terser करने का कॉन्सेप्ट","// A process similar to minification but for JavaScript, which also shortens variable names."
"Gzip या Brotli कम्प्रेशन का उपयोग करो","// Server-side compression to reduce the size of files sent to the browser."
"एक CDN (Content Delivery Network) का उपयोग करो","// Distribute static assets like images, CSS, and JS across multiple geographic locations to reduce latency."
"ब्राउज़र कैशिंग (Browser Caching) के लिए `Cache-Control` हेडर सेट करो","Cache-Control: public, max-age=31536000"
"एक 'critical CSS' को इनलाइन करो","<head><style>/* Critical CSS for above-the-fold content */</style></head>"
"एक प्रीलोड (preload) लिंक का उपयोग करो","<link rel='preload' href='style.css' as='style'>"
"एक प्रीकनेक्ट (preconnect) लिंक का उपयोग करो","<link rel='preconnect' href='https://fonts.googleapis.com'>"
"एक प्रीफेच (prefetch) लिंक का उपयोग करो","<link rel='prefetch' href='/next-page.html'>"
"`requestAnimationFrame` का उपयोग करके स्मूथ एनीमेशन बनाओ","<script>function animate() { /* animation logic */ requestAnimationFrame(animate); }</script>"
"इवेंट डीबाउंसिंग (Debouncing) का एक उदाहरण","<input onkeyup='debounce(myFunction, 500)'> <script>let timer; function debounce(func, delay){clearTimeout(timer); timer = setTimeout(func, delay);}</script>"
"इवेंट थ्रॉटलिंग (Throttling) का एक उदाहरण","<script>let throttlePause; const throttle = (callback, time) => { if (throttlePause) return; throttlePause = true; setTimeout(() => { callback(); throttlePause = false; }, time); };</script>"
"एक div को हॉरिजॉन्टली स्क्रॉल करने योग्य बनाओ","<div style='display:flex; overflow-x:auto; width:100%;'><div style='min-width:200px;'>Item 1</div><div style='min-width:200px;'>Item 2</div>...</div>"
"एक `passive` इवेंट लिस्नर का उपयोग करो","window.addEventListener('scroll', handleScroll, { passive: true });"
"मेमोरी लीक से बचने के लिए इवेंट लिस्नर को हटाओ","function handleClick() {} document.addEventListener('click', handleClick); document.removeEventListener('click', handleClick);"
"एक वेब वर्कर (Web Worker) का बेसिक सेटअप","// worker.js: postMessage('Hello from worker');\n// main.js: const myWorker = new Worker('worker.js');"
"एक `MutationObserver` बनाओ जो DOM बदलावों को डिटेक्ट करे","<div id='observeMe'></div><script>const observer = new MutationObserver(mutations => console.log(mutations)); observer.observe(document.getElementById('observeMe'), {childList: true});</script>"
"एक वर्चुअल लिस्ट (Virtual List) का कॉन्सेप्ट","// A technique to render only the visible items in a long list to improve performance."
"HTML में `inputmode` एट्रिब्यूट का उपयोग करके मोबाइल कीबोर्ड बदलो","<label>Phone Number:</label><input type='text' inputmode='tel'>"
"एक इमेज पर होवर करने पर उसका `filter` बदलो","<style>img.filter-hover:hover{filter:saturate(200%);}</style><img class='filter-hover' src='image.jpg' width='150'>"
"CSS `scroll-padding-top` का उपयोग करके स्टिकी हेडर के साथ स्क्रॉलिंग को ठीक करो","<style>html{scroll-padding-top:60px; /* height of sticky header */}</style>"
"CSS `text-decoration-thickness` का उपयोग करके अंडरलाइन को मोटा करो","<a href='#' style='text-decoration-line:underline; text-decoration-thickness:3px;'>Thick Underline</a>"
"CSS `text-underline-offset` का उपयोग करो","<a href='#' style='text-decoration-line:underline; text-underline-offset:5px;'>Underline with Offset</a>"
"CSS से एक 'skeletal loading' (कंकाल लोडिंग) स्क्रीन बनाओ","<style>.skeleton{animation:pulse 1.5s infinite; background:#eee;}.skeleton-text{height:1em; border-radius:4px;}</style><div class='skeleton skeleton-text'></div>"
"`aria-current='page'` का उपयोग करके वर्तमान पेज के लिंक को इंडीकेट करो","<nav><a href='#' aria-current='page'>Home</a><a href='#'>About</a></nav>"
"पेज के लिए एक `theme-color` मेटा टैग सेट करो","<meta name='theme-color' content='#3367D6'>"
"`aria-busy='true'` का उपयोग करके इंडीकेट करो कि एक सेक्शन लोड हो रहा है","<div id='loader' aria-busy='true'>Loading...</div>"
"एक बटन का डिफ़ॉल्ट स्टाइल हटाओ (`appearance: none`)","<button style='appearance:none; -webkit-appearance:none; background:blue; color:white;'>Custom Button</button>"
"एक्सेसिबिलिटी के लिए एक डार्क मोड टॉगल में ARIA रोल्स का उपयोग करो","<button role='switch' aria-checked='false' onclick=""toggleTheme()"">Toggle Theme</button>"
"पेज के लिए एक apple-touch-icon सेट करो","<link rel='apple-touch-icon' href='/apple-icon.png'>"
"एक क्लास में `@property` डेकोरेटर का उपयोग करो","class Person:\n    def __init__(self, name):\n        self._name = name\n    @property\n    def name(self):\n        return self._name"
"एक प्रॉपर्टी के लिए `@name.setter` डेकोरेटर का उपयोग करो","class Person:\n    @property\n    def name(self):\n        return self._name\n    @name.setter\n    def name(self, value):\n        self._name = value"
"एक डेकोरेटर बनाओ जो एक फंक्शन के रन होने का समय मापे","import time\ndef timer_decorator(func):\n    def wrapper(*args, **kwargs):\n        start_time = time.time()\n        result = func(*args, **kwargs)\n        print(f'Finished in {time.time() - start_time}s')\n        return result\n    return wrapper"
"एक फंक्शन पर `@timer_decorator` का उपयोग करो","@timer_decorator\ndef my_function():\n    time.sleep(1)"
"एक जेनरेटर फंक्शन `yield` का उपयोग करके बनाओ","def my_generator(n):\n    for i in range(n):\n        yield i"
"एक जेनरेटर एक्सप्रेशन का उपयोग करो","my_gen_exp = (i * i for i in range(5))"
"एक जेनरेटर से वैल्यूज प्राप्त करने के लिए `next()` का उपयोग करो","gen = my_generator(3)\nprint(next(gen)) # 0\nprint(next(gen)) # 1"
"एक कॉन्टेक्स्ट मेनेजर (`with` स्टेटमेंट) के लिए एक क्लास बनाओ","class MyContextManager:\n    def __enter__(self):\n        print('Entering context')\n        return self\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        print('Exiting context')"
"`@contextmanager` डेकोरेटर का उपयोग करके एक कॉन्टेक्स्ट मेनेजर बनाओ","from contextlib import contextmanager\n@contextmanager\ndef my_file_manager(filename, mode):\n    f = open(filename, mode)\n    try:\n        yield f\n    finally:\n        f.close()"
"मल्टीप्ल इनहेरिटेंस का एक उदाहरण","class A: pass\nclass B: pass\nclass C(A, B): pass"
"मेथड रेजोल्यूशन आर्डर (MRO) को देखो","class A: pass\nclass B(A): pass\nprint(B.mro())"
"एक abstract क्लास बनाओ","from abc import ABC, abstractmethod\nclass Shape(ABC):\n    @abstractmethod\n    def area(self): pass"
"एक abstract मेथड को इम्प्लीमेंट करो","class Square(Shape):\n    def __init__(self, side):\n        self.side = side\n    def area(self):\n        return self.side * self.side"
"एक स्लॉटेड क्लास `__slots__` बनाओ","class Point:\n    __slots__ = ['x', 'y']\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y"
"पाइथन में एक enum बनाओ","from enum import Enum\nclass Color(Enum):\n    RED = 1\n    GREEN = 2\n    BLUE = 3"
"एक Named Tuple बनाओ","from collections import namedtuple\nPoint = namedtuple('Point', ['x', 'y'])\np1 = Point(10, 20)"
"एक डाटा क्लास `@dataclass` बनाओ","from dataclasses import dataclass\n@dataclass\nclass InventoryItem:\n    name: str\n    price: float"
"एक क्लास को callable बनाने के लिए `__call__` मेथड का उपयोग करो","class Adder:\n    def __call__(self, x, y):\n        return x + y\nadd = Adder()\nresult = add(5, 3)"
"एक `__len__` मेथड बनाओ","class MyList:\n    def __init__(self, items):\n        self.items = items\n    def __len__(self):\n        return len(self.items)"
"दो ऑब्जेक्ट्स की तुलना के लिए `__eq__` मेथड बनाओ","class Point:\n    def __init__(self, x):\n        self.x = x\n    def __eq__(self, other):\n        return self.x == other.x"
"एक ऑब्जेक्ट को रीडेबल बनाने के लिए `__repr__` मेथड बनाओ","class Car:\n    def __init__(self, brand):\n        self.brand = brand\n    def __repr__(self):\n        return f'Car(brand={self.brand})'"
"फंक्शनल प्रोग्रामिंग से `functools.partial` का उपयोग करो","from functools import partial\ndef power(base, exp):\n    return base ** exp\nsquare = partial(power, exp=2)\nprint(square(5))"
"एक डेकोरेटर बनाओ जो आर्गुमेंट ले सके","def repeat(num_times):\n    def decorator_repeat(func):\n        def wrapper(*args, **kwargs):\n            for _ in range(num_times):\n                func(*args, **kwargs)\n        return wrapper\n    return decorator_repeat"
"आर्गुमेंट वाले डेकोरेटर का उपयोग करो","@repeat(num_times=3)\ndef greet():\n    print('Hello')"
"एक 'चेनेबल' डेकोरेटर बनाओ","@decorator1\n@decorator2\ndef my_function(): pass"
"एक टाइप हिंटिंग (type hinting) वाला फंक्शन बनाओ","def greet(name: str) -> str:\n    return 'Hello, ' + name"
"पाइथन में `__dict__` एट्रिब्यूट को एक्सेस करो","class MyClass: pass\nobj = MyClass()\nobj.a = 1\nprint(obj.__dict__)"
"एक सिंपल मेटाक्लास (metaclass) बनाओ","class MyMeta(type):\n    pass\n\nclass MyClass(metaclass=MyMeta):\n    pass"
"एक `__getitem__` मेथड बनाओ","class MyCollection:\n    def __init__(self, items):\n        self.items = items\n    def __getitem__(self, index):\n        return self.items[index]"
"एक `__setitem__` मेथड बनाओ","class MyCollection:\n    # ... __init__ ...\n    def __setitem__(self, index, value):\n        self.items[index] = value"
"एक सिंपल प्लगइन सिस्टम का ढाँचा बनाओ","PLUGINS = {}\ndef register(name):\n    def decorator(cls):\n        PLUGINS[name] = cls\n        return cls\n    return decorator"
"`eval()` का उपयोग करके एक स्ट्रिंग को पाइथन एक्सप्रेशन की तरह चलाओ","code = '5 * 2'\nresult = eval(code)"
"`exec()` का उपयोग करके एक स्ट्रिंग को पाइथन स्टेटमेंट की तरह चलाओ","code_block = 'x = 10\\ny = 20\\nprint(x+y)'\nexec(code_block)"
"एक Singleton डिजाइन पैटर्न का इम्प्लीमेंटेशन","class Singleton:\n    _instance = None\n    def __new__(cls):\n        if cls._instance is None:\n            cls._instance = super(Singleton, cls).__new__(cls)\n        return cls._instance"
"एक Factory मेथड डिजाइन पैटर्न का इम्प्लीमेंटेशन","class Dog: pass\nclass Cat: pass\ndef get_pet(pet='dog'):\n    pets = dict(dog=Dog(), cat=Cat())\n    return pets[pet]"
"एक Observer डिजाइन पैटर्न का ढाँचा","class Subject:\n    def __init__(self):\n        self._observers = []\n    def attach(self, observer):\n        self._observers.append(observer)\n    def notify(self, message):\n        for observer in self._observers:\n            observer.update(message)"
"एक जेनरेटर पाइपलाइन बनाओ","def pipeline(items, funcs):\n    for item in items:\n        for func in funcs:\n            item = func(item)\n        yield item"
"एक डेकोरेटर जो फंक्शन की आउटपुट को कैश (cache) करे","from functools import lru_cache\n@lru_cache(maxsize=None)\ndef fib(n):\n    if n < 2: return n\n    return fib(n-1) + fib(n-2)"
"वालरस ऑपरेटर `:=` का उपयोग करो","while (line := f.readline()):\n    print(line)"
"एक जेनरेटर से `StopIteration` को हैंडल करो","gen = (i for i in range(2))\ntry:\n    while True:\n        print(next(gen))\nexcept StopIteration:\n    print('Generator finished')"
"एक coroutine का बेसिक उदाहरण","import asyncio\nasync def my_coroutine():\n    print('Running coroutine')\n    await asyncio.sleep(1)"
"`asyncio.run()` का उपयोग करके एक coroutine को चलाओ","import asyncio\nasync def main():\n    print('Hello')\n\nasyncio.run(main())"
"`asyncio.gather()` का उपयोग करके कई coroutines को एक साथ चलाओ","import asyncio\nasync def task(n):\n    await asyncio.sleep(1)\n    return n\n\nasync def main():\n    results = await asyncio.gather(task(1), task(2))\n    print(results)\nasyncio.run(main())"
"एक `async for` लूप का उपयोग करो","import asyncio\nasync def async_generator():\n    for i in range(3):\n        yield i\n\nasync def main():\n    async for item in async_generator():\n        print(item)\nasyncio.run(main())"
"एक `async with` स्टेटमेंट का उपयोग करो","import asyncio\nclass AsyncContextManager:\n    async def __aenter__(self):\n        return self\n    async def __aexit__(self, ...): pass\n\nasync def main():\n    async with AsyncContextManager():\n        pass"
"`collections.defaultdict` का उपयोग करो","from collections import defaultdict\nd = defaultdict(int)\nd['a'] += 1"
"`WeakValueDictionary` का उपयोग करो","import weakref\nd = weakref.WeakValueDictionary()"
"एक डेकोरेटर बनाओ जो एक फंक्शन को सिर्फ एक बार चलाए","def run_once(f):\n    def wrapper(*args, **kwargs):\n        if not wrapper.has_run:\n            wrapper.has_run = True\n            return f(*args, **kwargs)\n    wrapper.has_run = False\n    return wrapper"
"एक ThreadPoolExecutor का उपयोग करो","from concurrent.futures import ThreadPoolExecutor\nwith ThreadPoolExecutor(max_workers=4) as executor:\n    future = executor.submit(pow, 2, 3)"
"`scikit-learn` से एक लीनियर रिग्रेशन (Linear Regression) मॉडल बनाओ","from sklearn.linear_model import LinearRegression\nmodel = LinearRegression()"
"`scikit-learn` में एक मॉडल को ट्रेन करो (`fit`)","model.fit(X_train, y_train)"
"`scikit-learn` में एक मॉडल से प्रेडिक्शन करो (`predict`)","predictions = model.predict(X_test)"
"`train_test_split` का उपयोग करके डेटा को स्प्लिट करो","from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)"
"एक मॉडल की एक्यूरेसी (accuracy) को मापो","from sklearn.metrics import accuracy_score\naccuracy = accuracy_score(y_test, predictions)"
"एक क्लासिफिकेशन रिपोर्ट प्रिंट करो","from sklearn.metrics import classification_report\nprint(classification_report(y_test, predictions))"
"एक कन्फ्यूजन मैट्रिक्स (Confusion Matrix) बनाओ","from sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_test, predictions)"
"एक लॉजिस्टिक रिग्रेशन (Logistic Regression) मॉडल बनाओ","from sklearn.linear_model import LogisticRegression\nmodel = LogisticRegression()"
"एक डिसीजन ट्री (Decision Tree) क्लासिफायर बनाओ","from sklearn.tree import DecisionTreeClassifier\nmodel = DecisionTreeClassifier()"
"एक रैंडम फारेस्ट (Random Forest) क्लासिफायर बनाओ","from sklearn.ensemble import RandomForestClassifier\nmodel = RandomForestClassifier(n_estimators=100)"
"एक सपोर्ट वेक्टर मशीन (SVM) क्लासिफायर बनाओ","from sklearn.svm import SVC\nmodel = SVC()"
"K-मीन्स (K-Means) क्लस्टरिंग एल्गोरिथ्म का उपयोग करो","from sklearn.cluster import KMeans\nkmeans = KMeans(n_clusters=3)\nkmeans.fit(X)"
"फीचर स्केलिंग के लिए `StandardScaler` का उपयोग करो","from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nX_scaled = scaler.fit_transform(X)"
"एक `scikit-learn` पाइपलाइन (Pipeline) बनाओ","from sklearn.pipeline import Pipeline\npipe = Pipeline([('scaler', StandardScaler()), ('svc', SVC())])"
"ग्रिड सर्च (Grid Search) का उपयोग करके हाइपरपैरामीटर ट्यूनिंग करो","from sklearn.model_selection import GridSearchCV\nparameters = {'kernel':('linear', 'rbf')}\nclf = GridSearchCV(SVC(), parameters)"
"एक NumPy एरे बनाओ","import numpy as np\narr = np.array([1, 2, 3])"
"एक Pandas सीरीज (Series) बनाओ","import pandas as pd\ns = pd.Series([1, 2, 3])"
"एक Pandas DataFrame बनाओ","import pandas as pd\ndf = pd.DataFrame({'col1': [1, 2], 'col2': [3, 4]})"
"एक DataFrame को 'Age' कॉलम के आधार पर सॉर्ट करो","sorted_df = df.sort_values(by='Age')"
"एक DataFrame में एक नया कॉलम जोड़ो","df['new_column'] = df['column1'] * 2"
"एक DataFrame से एक कॉलम डिलीट करो","df.drop('column_name', axis=1, inplace=True)"
"एक DataFrame में NaN (मिसिंग) वैल्यूज को 0 से भरो","df.fillna(0, inplace=True)"
"एक DataFrame को एक कॉलम के आधार पर ग्रुप करो और योग निकालो","df.groupby('Category')['Amount'].sum()"
"दो DataFrames को मर्ज करो","pd.merge(df1, df2, on='common_column')"
"एक DataFrame को एक्सेल फाइल में सेव करो","df.to_excel('output.xlsx', index=False)"
"एक एक्सेल फाइल को Pandas में पढ़ो","df = pd.read_excel('input.xlsx')"
"Matplotlib का उपयोग करके एक सिंपल लाइन प्लॉट बनाओ","import matplotlib.pyplot as plt\nplt.plot([1, 2, 3], [4, 1, 5])\nplt.show()"
"Matplotlib का उपयोग करके एक स्कैटर प्लॉट बनाओ","import matplotlib.pyplot as plt\nplt.scatter([1,2,3], [5,2,8])\nplt.show()"
"Seaborn लाइब्रेरी को इम्पोर्ट करो","import seaborn as sns"
"Seaborn का उपयोग करके एक डिस्ट्रिब्यूशन प्लॉट (distplot) बनाओ","import seaborn as sns\n# data = ...\nsns.histplot(data)"
"Seaborn का उपयोग करके एक बॉक्स प्लॉट बनाओ","import seaborn as sns\n# df = ...\nsns.boxplot(x='category', y='value', data=df)"
"Seacorn का उपयोग करके एक वायलिन प्लॉट (violin plot) बनाओ","import seaborn as sns\n# df = ...\nsns.violinplot(x='day', y='tip', data=df)"
"Seaborn का उपयोग करके एक हीटमैप (heatmap) बनाओ","import seaborn as sns\n# data = ... (a 2D array)\nsns.heatmap(data)"
"Seaborn का उपयोग करके एक पेयर प्लॉट (pairplot) बनाओ","import seaborn as sns\n# df = ...\nsns.pairplot(df)"
"Plotly का उपयोग करके एक इंटरैक्टिव स्कैटर प्लॉट बनाओ","import plotly.express as px\n# df = ...\nfig = px.scatter(df, x='gdpPercap', y='lifeExp')\nfig.show()"
"NLTK (Natural Language Toolkit) को इम्पोर्ट करो","import nltk"
"एक वाक्य को शब्दों में टोकनाइज़ करो (NLTK)","import nltk\nsentence = 'Hello world.'\ntokens = nltk.word_tokenize(sentence)"
"एक टेक्स्ट से स्टॉप वर्ड्स (stop words) हटाओ","from nltk.corpus import stopwords\nstop_words = set(stopwords.words('english'))\n# ... filter tokens ..."
"टेक्स्ट का स्टेमिंग (stemming) करो","from nltk.stem import PorterStemmer\nstemmer = PorterStemmer()\nstemmed_word = stemmer.stem('running')"
"Word2Vec का कॉन्सेप्ट","// An algorithm to create word embeddings, representing words as vectors."
"TF-IDF का कॉन्सेप्ट","// A numerical statistic that is intended to reflect how important a word is to a document in a collection or corpus."
"एक Keras सीक्वेंशियल (Sequential) मॉडल बनाओ","from tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense\nmodel = Sequential()\nmodel.add(Dense(10, activation='relu'))"
"एक Keras मॉडल को Compile करो","model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])"
"एक Keras मॉडल की समरी (summary) प्रिंट करो","model.summary()"
"OpenCV (cv2) का उपयोग करके एक इमेज पढ़ो","import cv2\nimg = cv2.imread('image.jpg')"
"OpenCV का उपयोग करके एक इमेज को ग्रेस्केल में बदलो","gray_img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)"
"OpenCV का उपयोग करके एक इमेज में चेहरे ढूंढो (स्यूडो-कोड)","face_cascade = cv2.CascadeClassifier('haarcascade_frontalface_default.xml')\nfaces = face_cascade.detectMultiScale(gray_img, 1.1, 4)"
"PyTorch में एक टेंसर (Tensor) बनाओ","import torch\nx = torch.tensor([[1, 2], [3, 4]])"
"एक AWS EC2 इंस्टेंस लॉन्च करने के लिए CLI कमांड","aws ec2 run-instances --image-id ami-0c55b159cbfafe1f0 --instance-type t2.micro"
"एक सिंपल AWS Lambda फंक्शन (पाइथन)","import json\n\ndef lambda_handler(event, context):\n    return {\n        'statusCode': 200,\n        'body': json.dumps('Hello from Lambda!')\n    }"
"एक सिंपल Google Cloud फंक्शन (पाइथन)","def hello_gcf(request):\n    return 'Hello, World!'"
"एक Docker कंटेनर को रन करो और पोर्ट को मैप करो","docker run -p 8080:80 nginx"
"एक Docker इमेज को बिल्ड करो","docker build -t my-app ."
"एक सिंपल Dockerfile (Node.js के लिए)","FROM node:18\nWORKDIR /app\nCOPY package.json .\nRUN npm install\nCOPY . .\nCMD [""node"", ""index.js""]"
"एक सिंपल Docker Compose फाइल (वेब + रेडिस)","version: '3.8'\nservices:\n  web:\n    build: .\n  redis:\n    image: 'redis:alpine'"
"Docker Compose को चलाओ","docker-compose up"
"एक Kubernetes Pod का YAML कॉन्फ़िगरेशन","apiVersion: v1\nkind: Pod\nmetadata:\n  name: my-pod\nspec:\n  containers:\n  - name: my-container\n    image: nginx"
"Kubectl का उपयोग करके एक Pod को अप्लाई करो","kubectl apply -f pod.yaml"
"Kubernetes में चल रहे सभी Pods को लिस्ट करो","kubectl get pods"
"एक Kubernetes डिप्लॉयमेंट (Deployment) का YAML","apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: my-deployment\nspec:\n  replicas: 3\n  ..."
"एक Kubernetes सर्विस (Service) का YAML","apiVersion: v1\nkind: Service\nmetadata:\n  name: my-service\nspec:\n  selector:\n    app: MyApp\n  ports:\n    - protocol: TCP\n      port: 80\n      targetPort: 9376"
"सर्वरलेस फ्रेमवर्क (Serverless Framework) का एक `serverless.yml` उदाहरण","service: my-service\nprovider:\n  name: aws\n  runtime: python3.9\nfunctions:\n  hello:\n    handler: handler.hello"
"AWS S3 बकेट में एक फाइल अपलोड करो (CLI)","aws s3 cp my-file.txt s3://my-bucket-name/"
"AWS S3 बकेट से एक फाइल डाउनलोड करो (CLI)","aws s3 cp s3://my-bucket-name/my-file.txt ."
"Google Cloud Storage बकेट बनाओ (CLI)","gcloud storage buckets create gs://my-bucket-name"
"एक फाइल को Google Cloud Storage पर अपलोड करो (CLI)","gcloud storage cp my-file.txt gs://my-bucket-name/"
"Infrastructure as Code (IaC) क्या है","// The process of managing and provisioning computer data centers through machine-readable definition files, rather than physical hardware configuration or interactive configuration tools."
"Terraform का उपयोग करके एक AWS S3 बकेट बनाओ","resource ""aws_s3_bucket"" ""my_bucket"" {\n  bucket = ""my-unique-bucket-name""\n}"
"Ansible का एक सिंपल प्लेबुक","---\n- hosts: webservers\n  tasks:\n    - name: Ensure nginx is at the latest version\n      apt:\n        name: nginx\n        state: latest"
"एक लोड बैलेंसर (Load Balancer) का कॉन्सेप्ट","// A device that acts as a reverse proxy and distributes network or application traffic across a number of servers."
"एक CDN (Content Delivery Network) का कॉन्सेप्ट","// A geographically distributed network of proxy servers and their data centers, which provide high availability and performance by distributing the service spatially relative to end users."
"एक वर्चुअल मशीन (VM) क्या है","// An emulation of a computer system. Virtual machines are based on computer architectures and provide functionality of a physical computer."
"कंटेनराइजेशन (Containerization) क्या है","// A lightweight form of virtualization that allows you to package an application with its dependencies into a single container."
"Docker और VM में क्या अंतर है","// VMs virtualize the hardware, while containers virtualize the operating system."
"एक CI/CD पाइपलाइन का कॉन्सेप्ट","// A series of steps that must be performed in order to deliver a new version of software. It involves stages like build, test, and deploy."
"GitHub Actions का एक वर्कफ्लो जो एक Docker इमेज बनाए और पुश करे","name: Docker CI\non: [push]\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v2\n    - name: Build and push Docker image\n      uses: docker/build-push-action@v2\n      with:\n        push: true\n        tags: user/app:latest"
"एक सर्वरलेस API Gateway बनाओ (AWS)","// In AWS Console, create an API Gateway that triggers a Lambda function."
"AWS DynamoDB (NoSQL) में एक आइटम डालो","aws dynamodb put-item --table-name Music --item '{\""Artist\"": {\""S"": ""No One You Know\""}}'"
"Google Firestore (NoSQL) में एक डॉक्यूमेंट जोड़ो","db.collection('users').add({'name': 'Amit'})"
"एक ब्लॉब स्टोरेज (Blob Storage) क्या है","// A feature for storing massive amounts of unstructured data, such as text or binary data."
"एक ऑब्जेक्ट स्टोरेज (Object Storage) क्या है","// A computer data storage architecture that manages data as objects, as opposed to other storage architectures like file systems."
"एक PaaS (Platform as a Service) का उदाहरण","// Heroku, Koyeb, Vercel, Google App Engine"
"एक IaaS (Infrastructure as a Service) का उदाहरण","// AWS EC2, Google Compute Engine, Microsoft Azure VMs"
"एक SaaS (Software as a Service) का उदाहरण","// Gmail, Dropbox, Salesforce"
"ऑटो-स्केलिंग (Auto-scaling) का कॉन्सेप्ट","// Automatically adjusting the amount of computational resources in a server farm - typically measured by the number of active servers - up or down, as demand changes."
"ब्लू-ग्रीन डिप्लॉयमेंट (Blue-Green Deployment) का कॉन्सेप्ट","// A deployment strategy in which you create two separate, but identical environments. One is 'blue' (live), and one is 'green' (new version). You switch traffic to green and can easily switch back if there's an issue."
"कैनरी डिप्लॉयमेंट (Canary Deployment) का कॉन्सेप्ट","// A strategy to reduce the risk of introducing a new software version in production by slowly rolling out the change to a small subset of users before rolling it out to the entire infrastructure."
"एक Prometheus मेट्रिक का उदाहरण","http_requests_total{method=""post"",code=""200""} 10"
"Grafana का उपयोग करके एक डैशबोर्ड बनाओ","// Use the Grafana UI to create dashboards from data sources like Prometheus."
"AWS RDS (Relational Database Service) का उपयोग करो","// A managed relational database service by Amazon Web Services."
"Google Cloud SQL का उपयोग करो","// A fully-managed relational database service for MySQL, PostgreSQL, and SQL Server."
"एक Docker वॉल्यूम (Volume) बनाओ","docker volume create my-volume"
"एक Docker कंटेनर में एक वॉल्यूम को माउंट करो","docker run -v my-volume:/app/data my-image"
"एक Docker नेटवर्क बनाओ","docker network create my-network"
"दो Docker कंटेनरों को एक ही नेटवर्क से जोड़ो","docker run --network=my-network --name=db ...\ndocker run --network=my-network --name=web ..."
"Nginx को एक रिवर्स प्रॉक्सी के रूप में कॉन्फ़िगर करो","location /api/ {\n    proxy_pass http://backend_server;\n}"
"एक SSL/TLS सर्टिफिकेट को Let's Encrypt से प्राप्त करो","certbot --nginx"
"एक सिस्टम को मॉनिटर करने के लिए `htop` कमांड","htop"
"SQL इंजेक्शन से बचने के लिए पैरामीटराइज्ड क्वेरी का उपयोग करो","""# Safe way using SQLAlchemy or similar ORM\nuser = session.query(User).filter(User.name == user_input).first()\n\n# Unsafe way (vulnerable to SQL Injection)\n# query = ""SELECT * FROM users WHERE name = '"" + user_input + ""'"""
"आउटपुट को एस्केप (escape) करके क्रॉस-साइट स्क्रिप्टिंग (XSS) से बचाव करो","""# In Flask/Jinja2, this is done automatically\n<p>{{ user_provided_content }}</p>"""
"एक 'Content Security Policy' (CSP) हेडर सेट करो","""# In Flask:\n@app.after_request\ndef add_security_headers(response):\n    response.headers['Content-Security-Policy'] = ""default-src 'self'""\n    return response"""
"Flask-WTF का उपयोग करके CSRF प्रोटेक्शन को इनेबल करो","from flask import Flask\nfrom flask_wtf.csrf import CSRFProtect\n\napp = Flask(__name__)\napp.config['SECRET_KEY'] = 'a-secret-key'\nCSRFProtect(app)"
"HTML फॉर्म में CSRF टोकन को रेंडर करो","""<form method='post'>\n    {{ form.csrf_token }} \n    \n</form>"""
"पासवर्ड को सुरक्षित रूप से हैश (hash) और साल्ट (salt) करो","from werkzeug.security import generate_password_hash\nhashed_pw = generate_password_hash('my_password', method='pbkdf2:sha256')"
"हैश किए हुए पासवर्ड को वेरीफाई करो","from werkzeug.security import check_password_hash\ncheck_password_hash(hashed_pw_from_db, 'submitted_password')"
"एक HTTPS रीडायरेक्ट को कॉन्फ़िगर करो (Nginx)","server {\n    listen 80;\n    server_name example.com;\n    return 301 https://$server_name$request_uri;\n}"
"एक API के लिए रेट लिमिटिंग लागू करो (Flask-Limiter)","from flask_limiter import Limiter\nlimiter = Limiter(app, default_limits=['100 per day'])\n@app.route('/api')\n@limiter.limit('10/minute')\ndef api():\n    return 'OK'"
"क्लिकजैकिंग (Clickjacking) से बचने के लिए X-Frame-Options हेडर सेट करो","""# In Flask:\n@app.after_request\ndef add_header(response):\n    response.headers['X-Frame-Options'] = 'SAMEORIGIN'\n    return response"""
"एक JWT टोकन के लिए पेलोड (payload) बनाओ","import datetime\npayload = {\n    'user_id': 123,\n    'exp': datetime.datetime.utcnow() + datetime.timedelta(hours=1)\n}"
"PyJWT का उपयोग करके एक JWT टोकन बनाओ","import jwt\nsecret_key = 'your-secret'\ntoken = jwt.encode(payload, secret_key, algorithm='HS256')"
"JWT को ऑथेंटिकेट करने के लिए एक डेकोरेटर बनाओ","""from functools import wraps\ndef token_required(f):\n    @wraps(f)\n    def decorated(*args, **kwargs):\n        # ... token validation logic here ...\n        return f(*args, **kwargs)\n    return decorated"""
"Flask में एक फाइल अपलोड को सुरक्षित करो (secure_filename)","from werkzeug.utils import secure_filename\nfilename = secure_filename(user_uploaded_file.filename)"
"सुरक्षा के लिए नए टैब में खुलने वाले लिंक्स पर `rel='noopener noreferrer'` जोड़ो","<a href='https://example.com' target='_blank' rel='noopener noreferrer'>External Link</a>"
"डायरेक्ट्री ट्रैवर्सल हमले से बचाव","""# Sanitize user input before using it in file paths"""
"XML एक्सटर्नल एंटिटी (XXE) हमले का कॉन्सेप्ट","// An attack against an application that parses XML input, which can lead to information disclosure."
"सर्वर-साइड रिक्वेस्ट फोर्जरी (SSRF) का कॉन्सेप्ट","// An attack where an attacker can abuse server functionality to read or update internal resources."
"एक API की को (key) को सुरक्षित रूप से स्टोर करो (एनवायरनमेंट वेरिएबल)","import os\napi_key = os.getenv('MY_API_KEY')"
"एक HTTP Strict Transport Security (HSTS) हेडर सेट करो","response.headers['Strict-Transport-Security'] = 'max-age=31536000; includeSubDomains'"
"कुकीज के लिए `HttpOnly` और `Secure` फ्लैग्स सेट करो","resp.set_cookie('session_id', 'value', httponly=True, secure=True, samesite='Lax')"
"इनपुट वैलिडेशन का एक उदाहरण","age = request.form.get('age')\nif not age.isdigit() or not 0 < int(age) < 120:\n    return 'Invalid age', 400"
"ब्रूट-फोर्स हमलों को रोकने के लिए लॉगइन Attempts को सीमित करो","""# Logic to track failed login attempts per IP/username and implement a timeout"""
"एक 'robots.txt' फाइल बनाओ जो सेंसिटिव एरिया को ब्लॉक करे","User-agent: *\nDisallow: /admin/\nDisallow: /private/"
"एक .env फाइल का उपयोग करके सीक्रेट्स को मैनेज करो","""# .env file\nAPI_KEY=your_secret_key\n\n# Python code\nfrom dotenv import load_dotenv\nload_dotenv()\napi_key = os.getenv('API_KEY')"""
"डेटाबेस क्रेडेंशियल्स को सीधे कोड में न लिखें","""# Bad: db_uri = 'user:pass@host/db'\n# Good: db_uri = os.getenv('DATABASE_URI')"""
"Django में पासवर्ड हैशिंग का उपयोग","from django.contrib.auth.hashers import make_password, check_password\nhashed = make_password('my-secret-pass')"
"Django में क्लिकजैकिंग मिडलवेयर का उपयोग","""# Ensure 'django.middleware.clickjacking.XFrameOptionsMiddleware' is in MIDDLEWARE"""
"एक सिंपल फ़ायरवॉल नियम (UFW) का उदाहरण","ufw allow 80/tcp # Allow HTTP traffic"
"SQL इंजेक्शन से बचाव के लिए Stored Procedures का उपयोग","""-- SQL Code\nCREATE PROCEDURE GetUser @UserID INT\nAS\nSELECT * FROM Users WHERE UserID = @UserID"""
"सिक्योरिटी हेडर्स को चेक करने के लिए एक ऑनलाइन टूल का उपयोग करो","// Use a tool like securityheaders.com to scan your website."
"रेगुलर एक्सप्रेशन (RegEx) का उपयोग करके इनपुट को सैनिटाइज करो","import re\nclean_input = re.sub(r'[^a-zA-Z0-9]', '', user_input)"
"Open Redirect वल्नेरेबिलिटी से बचाव","""def redirect_to_url(url):\n    # Check if the URL is safe and on the same domain before redirecting\n    if is_safe_url(url):\n        return redirect(url)\n    return redirect('/')"""
"Django में XSS से बचाव","""\n{{ user_content }}"""
"एक HTTP पब्लिक की पिनिंग (HPKP) हेडर (अब Deprecated)","// A deprecated security feature that told a web client to associate a particular cryptographic public key with a certain web server."
"एक Cross-Site Request Forgery (CSRF) हमले का कॉन्सेप्ट","// An attack that forces an end user to execute unwanted actions on a web application in which they're currently authenticated."
"एक सेशन कुकी के लिए `SameSite` एट्रिब्यूट सेट करो","resp.set_cookie('session', 'value', samesite='Strict')"
"Django में एक लॉगइन व्यू का उपयोग करो","from django.contrib.auth.views import LoginView"
"Django में `@login_required` डेकोरेटर का उपयोग करो","from django.contrib.auth.decorators import login_required\n\n@login_required\ndef my_view(request):\n    ..."
"डेटा को एन्क्रिप्ट (Encrypt) करने के लिए एक लाइब्रेरी का उपयोग करो","from cryptography.fernet import Fernet\nkey = Fernet.generate_key()\nf = Fernet(key)\ntoken = f.encrypt(b'My secret message')"
"एन्क्रिप्टेड डेटा को डिक्रिप्ट (Decrypt) करो","decrypted_message = f.decrypt(token)"
"एक लॉगइन फॉर्म में 'Remember Me' फंक्शनैलिटी को सुरक्षित रूप से लागू करो","from flask_login import login_user\nlogin_user(user, remember=True, duration=datetime.timedelta(days=30))"
"डेटाबेस बैकअप को एन्क्रिप्ट करो","""# Use tools like gpg to encrypt database backup files"""
"सॉफ़्टवेयर डिपेंडेंसी को वल्नेरेबिलिटी के लिए स्कैन करो","""# Use tools like 'pip audit' or 'npm audit'"""
"Django में एक यूजर को बनाने के लिए सही तरीका","from django.contrib.auth import get_user_model\nUser = get_user_model()\nuser = User.objects.create_user(username='u', password='p')"
"API की (key) को लीक होने से बचाने के लिए git हुक्स का उपयोग करो","""# Use pre-commit hooks to scan for secrets before committing"""
"TLS/SSL का क्या मतलब है","// Protocols for encrypting internet traffic and verifying server identity."
"एक Man-in-the-Middle (MITM) हमले का कॉन्सेप्ट","// An attack where the attacker secretly relays and possibly alters the communication between two parties who believe they are directly communicating with each other."
"OWASP टॉप 10 क्या है","// A standard awareness document for developers and web application security, representing a broad consensus about the most critical security risks to web applications."
"एक सिक्योर पासवर्ड रीसेट मैकेनिज्म बनाओ","""1. User requests a reset.\n2. Generate a unique, single-use, time-limited token.\n3. Send a reset link with the token to the user's registered email.\n4. User clicks link, validates token, and sets a new password."""
"रिकर्शन का उपयोग करके फैक्टोरियल निकालो","def factorial(n):\n    if n <= 1: return 1\n    return n * factorial(n-1)"
"मेमोइज़ेशन (Memoization) का उपयोग करके फिबोनैची को ऑप्टिमाइज़ करो","memo = {}\ndef fib_memo(n):\n    if n in memo: return memo[n]\n    if n <= 1: return n\n    memo[n] = fib_memo(n-1) + fib_memo(n-2)\n    return memo[n]"
"डायनामिक प्रोग्रामिंग (टैबुलेशन) का उपयोग करके फिबोनैची निकालो","def fib_tabulation(n):\n    dp = [0] * (n + 1)\n    dp[1] = 1\n    for i in range(2, n + 1):\n        dp[i] = dp[i-1] + dp[i-2]\n    return dp[n]"
"एक बाइनरी सर्च (binary search) एल्गोरिथ्म लिखो","def binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target: return mid\n        elif arr[mid] < target: left = mid + 1\n        else: right = mid - 1\n    return -1"
"एक बबल सॉर्ट (bubble sort) एल्गोरिथ्म लिखो","def bubble_sort(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j]"
"एक क्विक सॉर्ट (quick sort) एल्गोरिथ्म लिखो","def quick_sort(arr):\n    if len(arr) <= 1: return arr\n    pivot = arr[len(arr) // 2]\n    left = [x for x in arr if x < pivot]\n    middle = [x for x in arr if x == pivot]\n    right = [x for x in arr if x > pivot]\n    return quick_sort(left) + middle + quick_sort(right)"
"एक मर्ज सॉर्ट (merge sort) एल्गोरिथ्म का ढाँचा लिखो","def merge_sort(arr):\n    if len(arr) > 1:\n        mid = len(arr)//2\n        L = arr[:mid]\n        R = arr[mid:]\n        # ... recursive calls and merging logic ..."
"एक ग्राफ डेटा स्ट्रक्चर (adjacency list) का उपयोग करके बनाओ","graph = {\n    'A': ['B', 'C'],\n    'B': ['D', 'E'],\n    'C': ['F'],\n    'D': [], 'E': [], 'F': []\n}"
"एक ग्राफ में ब्रेथ-फर्स्ट सर्च (BFS) एल्गोरिथ्म लिखो","from collections import deque\ndef bfs(graph, start_node):\n    visited, queue = {start_node}, deque([start_node])\n    while queue:\n        node = queue.popleft()\n        # process node\n        for neighbor in graph[node]:\n            if neighbor not in visited:\n                visited.add(neighbor)\n                queue.append(neighbor)"
"एक ग्राफ में डेप्थ-फर्स्ट सर्च (DFS) एल्गोरिथ्म लिखो","def dfs(graph, start_node, visited=None):\n    if visited is None: visited = set()\n    visited.add(start_node)\n    # process node\n    for neighbor in graph[start_node]:\n        if neighbor not in visited:\n            dfs(graph, neighbor, visited)"
"डाइक्स्ट्रा (Dijkstra's) एल्गोरिथ्म का ढाँचा लिखो","import heapq\ndef dijkstra(graph, start):\n    distances = {node: float('infinity') for node in graph}\n    distances[start] = 0\n    pq = [(0, start)]\n    while pq:\n        # ... algorithm logic ..."
"एक स्टैक (stack) डेटा स्ट्रक्चर (LIFO) बनाओ","stack = []\nstack.append(1)\nstack.append(2)\nitem = stack.pop() # returns 2"
"एक क्यू (queue) डेटा स्ट्रक्चर (FIFO) बनाओ","from collections import deque\nqueue = deque()\nqueue.append(1)\nqueue.append(2)\nitem = queue.popleft() # returns 1"
"एक लिंक्ड लिस्ट (linked list) के लिए एक नोड क्लास बनाओ","class ListNode:\n    def __init__(self, value):\n        self.value = value\n        self.next = None"
"एक बाइनरी ट्री (binary tree) के लिए एक नोड क्लास बनाओ","class TreeNode:\n    def __init__(self, value):\n        self.value = value\n        self.left = None\n        self.right = None"
"एक बाइनरी सर्च ट्री (BST) में एक नोड इंसर्ट करो","def insert_bst(root, key):\n    if root is None: return TreeNode(key)\n    if key < root.val: root.left = insert_bst(root.left, key)\n    else: root.right = insert_bst(root.right, key)\n    return root"
"बाइनरी ट्री का इन-ऑर्डर ट्रैवर्सल (In-order Traversal)","def inorder_traversal(root):\n    if root:\n        inorder_traversal(root.left)\n        print(root.val)\n        inorder_traversal(root.right)"
"बाइनरी ट्री का प्री-ऑर्डर ट्रैवर्सल (Pre-order Traversal)","def preorder_traversal(root):\n    if root:\n        print(root.val)\n        preorder_traversal(root.left)\n        preorder_traversal(root.right)"
"बाइनरी ट्री का पोस्ट-ऑर्डर ट्रैवर्सल (Post-order Traversal)","def postorder_traversal(root):\n    if root:\n        postorder_traversal(root.left)\n        postorder_traversal(root.right)\n        print(root.val)"
"एक हीप (Heap) डेटा स्ट्रक्चर का उपयोग करो (`heapq`)","import heapq\nheap = [3, 1, 4, 1, 5, 9, 2]\nheapq.heapify(heap)\nheapq.heappush(heap, 0)"
"एक ट्राई (Trie) डेटा स्ट्रक्चर का नोड बनाओ","class TrieNode:\n    def __init__(self):\n        self.children = {}\n        self.is_end_of_word = False"
"Big O नोटेशन का O(1) या कांस्टेंट टाइम का उदाहरण","def get_first_element(arr):\n    return arr[0] # Always takes the same time"
"Big O नोटेशन का O(n) या लीनियर टाइम का उदाहरण","def find_element(arr, target):\n    for item in arr:\n        if item == target: return True # Time grows with input size n"
"Big O नोटेशन का O(n^2) या क्वाड्रेटिक टाइम का उदाहरण","def find_duplicates(arr):\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] == arr[j]: return True # Nested loops"
"Big O नोटेशन का O(log n) या लॉगरिदमिक टाइम का उदाहरण"," # Binary search is an O(log n) algorithm"
"Big O नोटेशन का O(n log n) टाइम का उदाहरण"," # Efficient sorting algorithms like Merge Sort are O(n log n)"
"Two Sum प्रॉब्लम को हल करो","def two_sum(nums, target):\n    lookup = {}\n    for i, num in enumerate(nums):\n        if target - num in lookup:\n            return [lookup[target - num], i]\n        lookup[num] = i"
"एक स्ट्रिंग के शब्दों को उल्टा करो","def reverse_words(sentence):\n    return ' '.join(sentence.split()[::-1])"
"चेक करो कि एक स्ट्रिंग में सभी कैरेक्टर यूनिक हैं या नहीं","def has_unique_chars(s):\n    return len(s) == len(set(s))"
"एक नंबर आर्मस्ट्रांग नंबर है या नहीं, यह चेक करो","def is_armstrong(num):\n    s = str(num)\n    n = len(s)\n    return num == sum(int(digit)**n for digit in s)"
"एक कैशिंग डेकोरेटर `@lru_cache` बनाओ","from functools import lru_cache\n@lru_cache(maxsize=None)\ndef slow_function(n):\n    # ... slow calculation ...\n    return n"
"A* सर्च एल्गोरिथ्म का कॉन्सेप्ट","// A graph traversal and path-finding algorithm, which is often used in games and web-mapping."
"हफमैन कोडिंग (Huffman Coding) का कॉन्सेप्ट","// A lossless data compression algorithm."
"नॅपसैक प्रॉब्लम (Knapsack Problem) का एक डायनामिक प्रोग्रामिंग समाधान","def knapsack(weights, values, capacity):\n    # ... DP solution ..."
"लॉन्गेस्ट कॉमन सबसीक्वेंस (Longest Common Subsequence) प्रॉब्लम","def lcs(X, Y):\n    # ... DP solution ..."
"एक प्रायोरिटी क्यू (Priority Queue) बनाओ","import heapq\npq = []\nheapq.heappush(pq, (2, 'medium priority'))\nheapq.heappush(pq, (1, 'high priority'))\nheapq.heappush(pq, (3, 'low priority'))"
"एक मैट्रिक्स को 90 डिग्री रोटेट करो","def rotate_matrix(matrix):\n    return [list(row) for row in zip(*matrix[::-1])]"
"एक स्ट्रिंग के सभी परम्यूटेशन (permutations) जेनरेट करो","import itertools\nmy_list = ['a', 'b', 'c']\npermutations = list(itertools.permutations(my_list))"
"एक स्ट्रिंग के कैरेक्टर्स की फ्रीक्वेंसी काउंट करो","my_string = 'hello'\nfrequency = {char: my_string.count(char) for char in set(my_string)}"
"वैलिड ब्रैकेट्स प्रॉब्लम को हल करो","def is_valid_brackets(s):\n    stack = []\n    mapping = {')': '(', '}': '{', ']': '['}\n    for char in s:\n        if char in mapping.values():\n            stack.append(char)\n        elif char in mapping.keys():\n            if not stack or mapping[char] != stack.pop():\n                return False\n    return not stack"
"डबल लिंक्ड लिस्ट (Doubly Linked List) का एक नोड बनाओ","class DListNode:\n    def __init__(self, value):\n        self.value = value\n        self.prev = None\n        self.next = None"
"एक सर्कुलर क्यू (Circular Queue) का कॉन्सेप्ट","// A queue that uses a fixed-size array and connects the end back to the beginning."
"स्लाइडिंग विंडो एल्गोरिथ्म का एक उदाहरण","def max_sum_subarray(arr, k):\n    # ... sliding window logic ..."
"स्ट्रिंग कम्प्रेशन एल्गोरिथ्म लिखो","def compress_string(s):\n    # ... logic to convert 'AAABBC' to 'A3B2C1' ..."
"यूनियन-फाइंड (Union-Find) डेटा स्ट्रक्चर का ढाँचा","class UnionFind:\n    def __init__(self, size):\n        self.parent = list(range(size))\n    def find(self, i):\n        # ... find logic with path compression ...\n    def union(self, i, j):\n        # ... union by rank/size ..."
"काडन्स एल्गोरिथ्म (Kadane's Algorithm) का उपयोग करो","def max_subarray_sum(arr):\n    max_so_far = -float('inf')\n    max_ending_here = 0\n    for x in arr:\n        max_ending_here = max_ending_here + x\n        if max_so_far < max_ending_here: max_so_far = max_ending_here\n        if max_ending_here < 0: max_ending_here = 0\n    return max_so_far"
"एक ब्लूम फ़िल्टर (Bloom Filter) का कॉन्सेप्ट","// A space-efficient probabilistic data structure used to test whether an element is a member of a set."
"एक हैश मैप/डिक्शनरी का अपना इम्प्लीमेंटेशन बनाओ","class HashTable:\n    def __init__(self):\n        self.size = 10\n        self.map = [None] * self.size\n    def _get_hash(self, key):\n        return hash(key) % self.size\n    # ... set and get methods ..."
"लीनियर प्रोग्रामिंग का एक उदाहरण (PuLP लाइब्रेरी)","from pulp import LpProblem, LpVariable\n# ... linear programming problem setup ..."
"git का उपयोग करके एक नई रिपॉजिटरी इनिशियलाइज़ करो","git init"
"git में एक फाइल को स्टेज करो","git add myfile.txt"
"git में सभी फाइलों को स्टेज करो","git add ."
"git में एक कमिट (commit) करो","git commit -m 'Initial commit'"
"git का स्टेटस चेक करो","git status"
"git का लॉग (log) देखो","git log"
"एक नई git ब्रांच बनाओ","git branch new-feature"
"एक दूसरी git ब्रांच पर स्विच करो","git checkout new-feature"
"एक git ब्रांच को मर्ज करो","git merge new-feature"
"एक git रिमोट (remote) जोड़ो","git remote add origin https://github.com/user/repo.git"
"एक लोकल ब्रांच को एक रिमोट रिपॉजिटरी पर पुश करो","git push -u origin main"
"एक रिमोट रिपॉजिटरी से बदलावों को पुल करो","git pull origin main"
"एक git रिपॉजिटरी को क्लोन करो","git clone https://github.com/user/repo.git"
"एक `.gitignore` फाइल बनाओ","// Create a file named .gitignore"
"`.gitignore` में एक फाइल या फोल्डर को इग्नोर करो","// In .gitignore:\nmy_secret_file.txt\nnode_modules/"
"एक सिंपल Dockerfile बनाओ (पाइथन के लिए)","FROM python:3.9-slim\nWORKDIR /app\nCOPY . /app\nCMD [""python"", ""./app.py""]"
"एक Docker इमेज को बिल्ड करो","docker build -t my-python-app ."
"एक Docker कंटेनर को रन करो","docker run my-python-app"
"Docker Hub पर एक इमेज को पुश करो","docker push your-username/my-python-app"
"Docker Compose का एक सिंपल उदाहरण","version: '3'\nservices:\n  web:\n    build: ."
"एक Bash स्क्रिप्ट का 'shebang' लिखो","#!/bin/bash"
"एक Bash स्क्रिप्ट में một वेरिएबल बनाओ","MY_VAR='Hello'"
"एक Bash स्क्रिप्ट में एक वेरिएबल को प्रिंट करो","echo $MY_VAR"
"एक Bash स्क्रिप्ट में `if` स्टेटमेंट का उपयोग करो","if [ $MY_VAR == 'Hello' ]; then\n  echo 'Hi'\nfi"
"एक Bash स्क्रिप्ट में `for` लूप का उपयोग करो","for i in 1 2 3; do\n  echo $i\ndone"
"एक फाइल के परमिशन को बदलो (`chmod`)","chmod 755 myscript.sh"
"एक फाइल के ओनर को बदलो (`chown`)","chown user:group myfile.txt"
"VS Code में एक नया टर्मिनल खोलो","// Use shortcut Ctrl+` or Terminal > New Terminal"
"VS Code में JSON फाइल को फॉर्मेट करो","// Right-click > Format Document"
"एक `requirements.txt` फाइल से सभी पाइथन पैकेजेज इनस्टॉल करो","pip install -r requirements.txt"
"एक पाइथन वर्चुअल एनवायरनमेंट बनाओ","python -m venv venv"
"एक वर्चुअल एनवायरनमेंट को एक्टिवेट करो (Linux/Mac)","source venv/bin/activate"
"एक वर्चुअल एनवायरनमेंट को एक्टिवेट करो (Windows)","venv\\Scripts\\activate"
"SSH का उपयोग करके एक रिमोट सर्वर से कनेक्ट करो","ssh user@hostname"
"SCP का उपयोग करके एक फाइल को रिमोट सर्वर पर कॉपी करो","scp myfile.txt user@hostname:/remote/dir/"
"एक Cron Job का उदाहरण लिखो","* * * * * /usr/bin/python /path/to/script.py"
"JSON डेटा को `jq` का उपयोग करके कमांड-लाइन पर पार्स करो","cat data.json | jq '.key'"
"एक `pre-commit` हुक का कॉन्सेप्ट","// A git hook that runs checks before you are allowed to commit."
"CI/CD (Continuous Integration/Continuous Deployment) क्या है","// A practice of automating the build, test, and deployment of applications."
"GitHub Actions का एक सिंपल वर्कफ्लो बनाओ","name: CI\non: [push]\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v2"
"एक Makefile का एक सिंपल उदाहरण","build:\n\techo 'Building...'"
"एक Nginx कॉन्फ़िगरेशन का एक सिंपल उदाहरण","server {\n    listen 80;\n    location / {\n        proxy_pass http://localhost:5000;\n    }\n}"
"एक `.env` फाइल का उपयोग करके एनवायरनमेंट वेरिएबल्स को मैनेज करो","API_KEY='your_secret_key'"
"Linter (जैसे ESLint) का उपयोग करके कोड को फॉर्मेट करो","eslint your-file.js --fix"
"एक 'Hello World' C++ प्रोग्राम","""#include <iostream>\nint main() {\n    std::cout << ""Hello, World!"";\n    return 0;\n}"""
"एक 'Hello World' Java प्रोग्राम","""class HelloWorld {\n    public static void main(String[] args) {\n        System.out.println(""Hello, World!"");\n    }\n}"""
"एक 'Hello World' Go प्रोग्राम","""package main\nimport ""fmt""\nfunc main() {\n    fmt.Println(""Hello, World!"")\n}"""
"एक 'Hello World' Rust प्रोग्राम","""fn main() {\n    println!(""Hello, world!"");\n}"""
"एक 'Hello World' PHP स्क्रिप्ट","""<?php echo 'Hello, World!'; ?>"""
"REST API का GET मेथड","// Method to retrieve data. Example: GET /api/users"
"REST API का POST मेथड","// Method to create new data. Example: POST /api/users"
"REST API का PUT मेथड","// Method to update existing data. Example: PUT /api/users/1"
"REST API का DELETE मेथड","// Method to delete data. Example: DELETE /api/users/1"
"एक HTTP 200 OK स्टेटस कोड का मतलब","// The request was successful."
"एक HTTP 201 Created स्टेटस कोड का मतलब","// A new resource was successfully created."
"एक HTTP 404 Not Found स्टेटस कोड का मतलब","// The requested resource could not be found."
"एक HTTP 401 Unauthorized स्टेटस कोड का मतलब","// Authentication is required and has failed."
"एक HTTP 500 Internal Server Error स्टेटस कोड का मतलब","// An unexpected error occurred on the server."
"एक सिंपल GraphQL क्वेरी लिखो","query { user(id: 1) { name, city } }"
"एक सिंपल GraphQL म्यूटेशन (mutation) लिखो","mutation { createUser(name: ""Amit"") { id, name } }"
"API रिक्वेस्ट में API की (key) कैसे भेजें","// As a query parameter: /api/data?api_key=YOUR_KEY\n// As a header: X-API-Key: YOUR_KEY"
"OAuth 2.0 का बेसिक फ्लो","// 1. User is redirected to provider. 2. User grants permission. 3. App receives an authorization code. 4. App exchanges code for an access token."
"एक बेसिक XML डॉक्यूमेंट का स्ट्रक्चर","<note><to>Amit</to><from>Gemini</from><heading>Reminder</heading></note>"
"XML को पाइथन में पार्स करो (`xml.etree`)","import xml.etree.ElementTree as ET\ntree = ET.parse('data.xml')\nroot = tree.getroot()"
"एक बेसिक YAML डॉक्यूमेंट का स्ट्रक्चर","user:\n  name: Amit\n  city: Lucknow"
"YAML को पाइथन में पार्स करो (`PyYAML`)","import yaml\nwith open('data.yaml', 'r') as f:\n    data = yaml.safe_load(f)"
"JSON और XML में क्या अंतर है","// JSON is generally more lightweight and easier to parse for web applications."
"एक API एंडपॉइंट (endpoint) क्या होता है","// A specific URL where an API can be accessed, e.g., /api/users/1"
"SOAP API का कॉन्सेप्ट","// A protocol for exchanging structured information, often using XML."
"Webhooks का कॉन्सेप्ट","// A way for an app to provide other applications with real-time information. A server-to-server push."
"JWT (JSON Web Token) का स्ट्रक्चर","// Header.Payload.Signature"
"JWT को पाइथन में डिकोड करो (`PyJWT`)","import jwt\ndecoded = jwt.decode(encoded_token, 'secret', algorithms=['HS256'])"
"CORS (Cross-Origin Resource Sharing) क्या है","// A browser security feature that restricts cross-origin HTTP requests."
"Flask-CORS का उपयोग करके CORS को इनेबल करो","from flask_cors import CORS\napp = Flask(__name__)\nCORS(app)"
"एक idempotant API रिक्वेस्ट क्या होती है","// An operation that produces the same result if executed multiple times, e.g., PUT or DELETE."
"API वर्जनिंग का एक उदाहरण","// /api/v1/users vs /api/v2/users"
"OpenAPI (Swagger) स्पेसिफिकेशन का एक हिस्सा","openapi: 3.0.0\ninfo:\n  title: Simple API\npaths:\n  /users:\n    get:\n      summary: Returns a list of users."
"Postman का उपयोग करके एक API को टेस्ट करो","// Use the Postman application to send GET/POST requests to an API endpoint."
"curl का उपयोग करके एक GET रिक्वेस्ट करो","curl http://api.example.com/data"
"curl का उपयोग करके एक POST रिक्वेस्ट करो","curl -X POST -H 'Content-Type: application/json' -d '{\""key\"":\""value\""}' http://api.example.com/data"
"एक 'rate limiting' API एरर (429) का मतलब","// You have sent too many requests in a given amount of time."
"GraphQL में एक स्कीमा (schema) डिफाइन करो","type User {\n  id: ID!\n  name: String\n}"
"GraphQL में एक रिजोल्वर (resolver) का कॉन्सेप्ट","// A function on the backend that fetches the data for a specific field in a GraphQL query."
"gRPC का कॉन्सेप्ट","// A high-performance RPC framework from Google, often used for microservices."
"Protocol Buffers का एक उदाहरण",".proto file defining message structures."
"एक API में पेजिनेशन (pagination) का उपयोग","// /api/posts?page=2&limit=20"
"API में सॉर्टिंग का एक उदाहरण","// /api/products?sort_by=price&order=desc"
"API में फ़िल्टरिंग का एक उदाहरण","// /api/orders?status=shipped"
"एक WebSocket API का उपयोग","const socket = new WebSocket('ws://example.com/socket');"
"Server-Sent Events (SSE) का उपयोग","const eventSource = new EventSource('/events');"
"HAL (Hypertext Application Language) का कॉन्सेप्ट","// A standard for defining hypermedia links within JSON responses."
"API ऑथेंटिकेशन के लिए 'Basic Auth' का उपयोग","// Sending a header like: Authorization: Basic Zm9vOmJhcg=="
"API के लिए एक हेल्थ चेक (health check) एंडपॉइंट बनाओ","@app.route('/health')\ndef health_check():\n    return 'OK', 200"
"JSONP का कॉन्सेप्ट","// An old method for requesting data from a server in a different domain, bypassing CORS limitations."
"एक RPC (Remote Procedure Call) क्या है","// A protocol that one program can use to request a service from a program located in another computer."
"API Gateway का कॉन्सेप्ट","// A server that acts as a single entry point into a system of microservices."
"Microservices आर्किटेक्चर का कॉन्सेप्ट","// Structuring an application as a collection of loosely coupled services."
"WebAssembly (WASM) क्या है","// A binary instruction format that allows code written in languages like C++ or Rust to run in a web browser."
"एक RSS फीड का XML स्ट्रक्चर","<rss version='2.0'><channel><title>My Blog</title><item>...</item></channel></rss>"
"Apache Avro डेटा फॉर्मेट","// A row-oriented remote procedure call and data serialization framework."
"MessagePack डेटा फॉर्मेट","// A fast, compact binary serialization format."
"BSON (Binary JSON) डेटा फॉर्मेट","// A binary-encoded serialization of JSON-like documents, used by MongoDB."
"API के लिए एक SDK (Software Development Kit) क्या है","// A set of tools and libraries for a specific platform to make using an API easier."
"एक webhook.site का उपयोग करके webhooks को टेस्ट करो","// Go to webhook.site to get a unique URL for testing incoming webhooks."
"API डॉक्युमेंटेशन का एक उदाहरण (Markdown)","""## Get User\n\n**Endpoint:** `GET /api/users/{id}`\n\nReturns a single user."""
"Idempotency Key का उपयोग","// Sending a unique key in a header to prevent duplicate POST requests from creating multiple resources."
"GraphQL में Fragments का उपयोग","""fragment userFields on User {\n  name\n  email\n}"""
"एक SQL `CREATE TABLE` स्टेटमेंट लिखो","CREATE TABLE Users (id INT, name VARCHAR(255));"
"एक SQL `INSERT INTO` स्टेटमेंट लिखो","INSERT INTO Users (id, name) VALUES (1, 'Amit');"
"एक टेबल से सभी डेटा को सिलेक्ट करो (`SELECT *`)","SELECT * FROM Users;"
"एक टेबल से कुछ खास कॉलम सिलेक्ट करो","SELECT name, age FROM Users;"
"`WHERE` क्लॉज का उपयोग करके डेटा को फ़िल्टर करो","SELECT * FROM Users WHERE city = 'Lucknow';"
"एक SQL `UPDATE` स्टेटमेंट लिखो","UPDATE Users SET city = 'Delhi' WHERE id = 1;"
"एक SQL `DELETE` स्टेटमेंट लिखो","DELETE FROM Users WHERE id = 1;"
"SQL में `AND` ऑपरेटर का उपयोग करो","SELECT * FROM Users WHERE country = 'India' AND age > 25;"
"SQL में `OR` ऑपरेटर का उपयोग करो","SELECT * FROM Users WHERE city = 'Lucknow' OR city = 'Delhi';"
"SQL में `LIKE` ऑपरेटर का उपयोग करो","SELECT * FROM Users WHERE name LIKE 'A%';"
"SQL में `IN` ऑपरेटर का उपयोग करो","SELECT * FROM Users WHERE city IN ('Lucknow', 'Delhi');"
"SQL में `BETWEEN` ऑपरेटर का उपयोग करो","SELECT * FROM Products WHERE price BETWEEN 100 AND 200;"
"एक SQL क्वेरी को `ORDER BY` का उपयोग करके सॉर्ट करो","SELECT * FROM Users ORDER BY name ASC;"
"एक SQL क्वेरी को `ORDER BY DESC` का उपयोग करके सॉर्ट करो","SELECT * FROM Users ORDER BY age DESC;"
"SQL में `LIMIT` का उपयोग करके रिजल्ट्स को सीमित करो","SELECT * FROM Users LIMIT 10;"
"SQL में `COUNT` एग्रीगेट फंक्शन का उपयोग करो","SELECT COUNT(id) FROM Users;"
"SQL में `SUM` एग्रीगेट फंक्शन का उपयोग करो","SELECT SUM(salary) FROM Employees;"
"SQL में `AVG` एग्रीगेट फंक्शन का उपयोग करो","SELECT AVG(age) FROM Users;"
"SQL में `MIN` और `MAX` फंक्शन का उपयोग करो","SELECT MIN(price), MAX(price) FROM Products;"
"SQL में `GROUP BY` का उपयोग करो","SELECT city, COUNT(id) FROM Users GROUP BY city;"
"SQL में `INNER JOIN` का उपयोग करो","SELECT Users.name, Orders.product FROM Users INNER JOIN Orders ON Users.id = Orders.user_id;"
"SQL में `LEFT JOIN` का उपयोग करो","SELECT Users.name, Orders.product FROM Users LEFT JOIN Orders ON Users.id = Orders.user_id;"
"SQL में `RIGHT JOIN` का उपयोग करो","SELECT Users.name, Orders.product FROM Users RIGHT JOIN Orders ON Users.id = Orders.user_id;"
"SQL में `FULL OUTER JOIN` का उपयोग करो","SELECT Users.name, Orders.product FROM Users FULL OUTER JOIN Orders ON Users.id = Orders.user_id;"
"एक कॉलम के लिए एक `Alias` (उपनाम) बनाओ","SELECT name AS username FROM Users;"
"एक प्राइमरी की (Primary Key) के साथ एक टेबल बनाओ","CREATE TABLE Products (product_id INT PRIMARY KEY, name VARCHAR(255));"
"एक फॉरेन की (Foreign Key) के साथ एक टेबल बनाओ","CREATE TABLE Orders (order_id INT, user_id INT, FOREIGN KEY (user_id) REFERENCES Users(id));"
"एक कॉलम में `UNIQUE` कंस्ट्रेंट जोड़ो","CREATE TABLE Users (id INT, email VARCHAR(255) UNIQUE);"
"एक कॉलम में `NOT NULL` कंस्ट्रेंट जोड़ो","CREATE TABLE Users (id INT, name VARCHAR(255) NOT NULL);"
"एक कॉलम में `DEFAULT` वैल्यू सेट करो","CREATE TABLE Users (id INT, country VARCHAR(255) DEFAULT 'India');"
"एक SQL `ALTER TABLE` स्टेटमेंट से एक कॉलम जोड़ो","ALTER TABLE Users ADD COLUMN email VARCHAR(255);"
"एक SQL `ALTER TABLE` स्टेटमेंट से एक कॉलम डिलीट करो","ALTER TABLE Users DROP COLUMN email;"
"एक SQL `DROP TABLE` स्टेटमेंट लिखो","DROP TABLE Users;"
"SQL में `HAVING` क्लॉज का उपयोग करो","SELECT city, COUNT(id) FROM Users GROUP BY city HAVING COUNT(id) > 10;"
"SQL में एक सबक्वेरी (Subquery) का उपयोग करो","SELECT name FROM Users WHERE id IN (SELECT user_id FROM Orders);"
"एक `UNION` ऑपरेटर का उपयोग करो","SELECT city FROM Customers UNION SELECT city FROM Suppliers;"
"एक `CASE` स्टेटमेंट का उपयोग करो","SELECT order_id, CASE WHEN quantity > 10 THEN 'High' ELSE 'Low' END AS category FROM OrderDetails;"
"SQL में वाइल्डकार्ड `_` का उपयोग करो","SELECT * FROM Users WHERE name LIKE '_mit';"
"एक SQL व्यू (View) बनाओ","CREATE VIEW IndianUsers AS SELECT * FROM Users WHERE country = 'India';"
"SQL में इंडेक्स (Index) बनाओ","CREATE INDEX idx_lastname ON Users (lastname);"
"एक ऑटो-इंक्रीमेंट (auto-increment) प्राइमरी की बनाओ","CREATE TABLE Users (id INTEGER PRIMARY KEY AUTOINCREMENT, name TEXT);"
"PostgreSQL में `SERIAL` का उपयोग करो","CREATE TABLE Users (id SERIAL PRIMARY KEY, name TEXT);"
"MySQL में `AUTO_INCREMENT` का उपयोग करो","CREATE TABLE Users (id INT AUTO_INCREMENT PRIMARY KEY, name TEXT);"
"NoSQL डेटाबेस (जैसे MongoDB) का कॉन्सेप्ट","// Data is stored in JSON-like documents instead of tables."
"MongoDB में एक डॉक्यूमेंट ढूंढो","db.users.findOne({name: 'Amit'})"
"MongoDB में एक नया डॉक्यूमेंट इंसर्ट करो","db.users.insertOne({name: 'Ria', city: 'Delhi'})"
"Redis (Key-Value Store) में một वैल्यू सेट करो","SET user:1 'Amit'"
"Redis से एक वैल्यू प्राप्त करो","GET user:1"
"SQL में `DISTINCT` का उपयोग करके यूनिक वैल्यूज निकालो","SELECT DISTINCT city FROM Users;"
"React में एक सिंपल फंक्शनल कंपोनेंट बनाओ","""import React from 'react';\n\nfunction Welcome() {\n  return <h1>Hello, World!</h1>;\n}"""
"React में JSX का एक उदाहरण","""const element = <h1>Hello, world!</h1>;"""
"React कंपोनेंट को रेंडर करो","""import ReactDOM from 'react-dom';\n\nReactDOM.render(<h1>Hello</h1>, document.getElementById('root'));"""
"React में props का उपयोग करो","""function Welcome(props) {\n  return <h1>Hello, {props.name}</h1>;\n}"""
"React में एक कंपोनेंट को props के साथ रेंडर करो","""<Welcome name='Amit' />"""
"React में `useState` हुक का उपयोग करके स्टेट बनाओ","""import { useState } from 'react';\n\nfunction Counter() {\n  const [count, setCount] = useState(0);\n}"""
"React में एक बटन क्लिक पर स्टेट को अपडेट करो","""const [count, setCount] = useState(0);\nreturn <button onClick={() => setCount(count + 1)}>Click</button>;"""
"React में एक लिस्ट को रेंडर करने के लिए `map` का उपयोग करो","""const numbers = [1, 2, 3];\nconst listItems = numbers.map((number) => <li>{number}</li>);"""
"React में कंडीशनल रेंडरिंग करो","""function Greeting(props) {\n  const isLoggedIn = props.isLoggedIn;\n  if (isLoggedIn) {\n    return <p>Welcome back!</p>;\n  }\n  return <p>Please sign up.</p>;\n}"""
"React में एक कंट्रोल्ड इनपुट फील्ड बनाओ","""const [name, setName] = useState('');\nreturn <input value={name} onChange={e => setName(e.target.value)} />;"""
"React में एक फॉर्म को हैंडल करो","""function MyForm() {\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    alert('Form submitted');\n  }\n  return <form onSubmit={handleSubmit}>...</form>;\n}"""
"React में `useEffect` हुक का उपयोग करो","""import { useEffect } from 'react';\n\nuseEffect(() => {\n  document.title = 'New Title';\n});"""
"React में `useEffect` में एक एम्प्टी डिपेंडेंसी एरे का उपयोग करो","""useEffect(() => {\n  // Runs only once after the initial render\n}, []);"""
"React में एक कंपोनेंट से दूसरे में डेटा पास करो","""<Parent><Child data='some data' /></Parent>"""
"Create React App के लिए कमांड","npx create-react-app my-app"
"React में CSS मॉड्यूल का उपयोग करो","""/* In styles.module.css */\n.myButton { color: red; }\n\n// In component.js\nimport styles from './styles.module.css';\n<button className={styles.myButton}>Red Button</button>"""
"React में इनलाइन स्टाइल का उपयोग करो","""const divStyle = { color: 'blue' };\n<div style={divStyle}>Blue Text</div>"""
"React Router में एक बेसिक रूट बनाओ","""import { BrowserRouter as Router, Route } from 'react-router-dom';\n<Router><Route path='/about'><About /></Route></Router>"""
"React Router में एक लिंक बनाओ","""import { Link } from 'react-router-dom';\n<Link to='/about'>About</Link>"""
"Context API का उपयोग करके एक प्रोवाइडर बनाओ","""const MyContext = React.createContext();\n\nfunction MyProvider({ children }) {\n  return <MyContext.Provider value='hello'>{children}</MyContext.Provider>;\n}"""
"Context API का उपयोग करके डेटा कंस्यूम करो","""import { useContext } from 'react';\nconst value = useContext(MyContext);"""
"एक सिंपल कस्टम हुक (custom hook) बनाओ","""import { useState } from 'react';\n\nfunction useCounter() {\n  const [count, setCount] = useState(0);\n  return [count, setCount];\n}"""
"Redux में một एक्शन (action) बनाओ","""const ADD_TODO = 'ADD_TODO';\nfunction addTodo(text) {\n  return { type: ADD_TODO, text };\n}"""
"Redux में एक रिड्यूसर (reducer) बनाओ","""function todos(state = [], action) {\n  switch (action.type) {\n    case 'ADD_TODO':\n      return [...state, { text: action.text }];\n    default:\n      return state;\n  }\n}"""
"Vue.js में một ऐप इंस्टेंस बनाओ","""const app = Vue.createApp({ ... });"""
"Vue में `data` प्रॉपर्टी का उपयोग करो","""const app = Vue.createApp({ data() { return { message: 'Hello Vue!' }; } });"""
"Vue टेम्पलेट में डेटा बाइंड करो","""<div id='app'>{{ message }}</div>"""
"Vue में `v-on:click` डायरेक्टिव का उपयोग करो","""<button v-on:click='counter += 1'>Add 1</button>"""
"Vue में `v-model` डायरेक्टिव का उपयोग करो","""<input v-model='message'>"""
"Vue में `v-if` डायरेक्टिव का उपयोग करो","""<p v-if='seen'>Now you see me</p>"""
"Vue में `v-for` डायरेक्टिव का उपयोग करो","""<ol><li v-for='todo in todos'>{{ todo.text }}</li></ol>"""
"Vue में एक कंपोनेंट बनाओ","""app.component('my-component', { template: '<div>A custom component!</div>' });"""
"Vue में computed प्रॉपर्टी का उपयोग करो","""computed: { reversedMessage() { return this.message.split('').reverse().join(''); } }"""
"Vue में props का उपयोग करो","""app.component('blog-post', { props: ['title'], template: '<h3>{{ title }}</h3>' });"""
"Next.js में एक नया पेज बनाओ","""// In pages/about.js\nfunction About() {\n  return <div>About Page</div>;\n}"""
"Next.js में `Link` कंपोनेंट का उपयोग करो","""import Link from 'next/link';\n<Link href='/about'>About</Link>"""
"Angular में एक कंपोनेंट जेनरेट करने के लिए कमांड","ng generate component my-component"
"Svelte में एक सिंपल कंपोनेंट बनाओ","""<script>\n  let name = 'world';\n</script>\n\n<h1>Hello {name}!</h1>"""
"Axios का उपयोग करके एक GET रिक्वेस्ट करो","""import axios from 'axios';\naxios.get('/api/user').then(response => console.log(response.data));"""
"Axios का उपयोग करके एक POST रिक्वेस्ट करो","""axios.post('/api/save', { name: 'Amit' });"""
"एक सिंपल प्रॉमिस-बेस्ड `setTimeout` बनाओ","""function delay(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}"""
"React में `Fragment` का उपयोग करो","""import { Fragment } from 'react';\n<Fragment><td>Hello</td><td>World</td></Fragment>"""
"React में props को डीस्ट्रक्चर करो","""function Welcome({ name }) {\n  return <h1>Hello, {name}</h1>;\n}"""
"React में `children` prop का उपयोग करो","""function Card({ children }) {\n  return <div className='card'>{children}</div>;\n}"""
"Node.js में एक सिंपल HTTP सर्वर बनाओ","""const http = require('http');\n\nconst server = http.createServer((req, res) => {\n  res.end('Hello');\n});\nserver.listen(3000);"""
"Express.js में एक सिंपल सर्वर बनाओ","""const express = require('express');\nconst app = express();\n\napp.get('/', (req, res) => {\n  res.send('Hello');\n});\napp.listen(3000);"""
"Node.js में `fs` मॉड्यूल से एक फाइल पढ़ो","""const fs = require('fs');\nfs.readFile('file.txt', 'utf8', (err, data) => {\n  console.log(data);\n});"""
"npm (Node Package Manager) का उपयोग करके एक पैकेज इनस्टॉल करो","npm install express"
"एक `package.json` फाइल बनाओ","npm init -y"
"Flask में एक ब्लूप्रिंट (Blueprint) बनाओ","""# In users.py:\nfrom flask import Blueprint\n\nusers_bp = Blueprint('users', __name__)"""
"Flask ऐप में ब्लूप्रिंट को रजिस्टर करो","""# In app.py:\nfrom users import users_bp\n\napp.register_blueprint(users_bp, url_prefix='/users')"""
"ब्लूप्रिंट में एक रूट डिफाइन करो","""# In users.py:\n@users_bp.route('/')\ndef get_users():\n    return 'List of users'"""
"Flask-SQLAlchemy लाइब्रेरी को इनस्टॉल करो","pip install Flask-SQLAlchemy"
"Flask-SQLAlchemy को अपने Flask ऐप में कॉन्फ़िगर करो","""from flask import Flask\nfrom flask_sqlalchemy import SQLAlchemy\n\napp = Flask(__name__)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///test.db'\ndb = SQLAlchemy(app)"""
"SQLAlchemy का उपयोग करके एक 'User' मॉडल बनाओ","""class User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    username = db.Column(db.String(80), unique=True, nullable=False)"""
"SQLAlchemy का उपयोग करके डेटाबेस में एक नया यूज़र जोड़ो","""new_user = User(username='amit')\ndb.session.add(new_user)\ndb.session.commit()"""
"SQLAlchemy का उपयोग करके सभी यूज़र्स को क्वेरी करो","""all_users = User.query.all()"""
"SQLAlchemy का उपयोग करके एक यूज़र को ID से ढूंढो","""user = User.query.get(1)"""
"SQLAlchemy का उपयोग करके एक रिकॉर्ड को डिलीट करो","""user_to_delete = User.query.get(1)\ndb.session.delete(user_to_delete)\ndb.session.commit()"""
"SQLAlchemy में दो मॉडल्स के बीच One-to-Many रिलेशनशिप बनाओ","""class User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    posts = db.relationship('Post', backref='author')\n\nclass Post(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    user_id = db.Column(db.Integer, db.ForeignKey('user.id'))"""
"Flask में `before_request` फंक्शन का उपयोग करो","""@app.before_request\ndef before_request_func():\n    print('Before every request')"""
"Flask में `after_request` फंक्शन का उपयोग करो","""@app.after_request\ndef after_request_func(response):\n    print('After every request')\n    return response"""
"Flask में कस्टम एरर पेज बनाओ","""from flask import render_template\n@app.errorhandler(404)\ndef not_found_error(error):\n    return render_template('404.html'), 404"""
"Flask में URL के लिए डायनामिक कन्वर्टर का उपयोग करो","""@app.route('/post/<int:post_id>')\ndef show_post(post_id):\n    # post_id will be an integer"""
"Flask में GET और POST दोनों रिक्वेस्ट को एक ही रूट पर हैंडल करो","""@app.route('/contact', methods=['GET', 'POST'])\ndef contact():\n    if request.method == 'POST':\n        return 'Handling POST request'\n    return 'Showing contact form'"""
"एक Django प्रोजेक्ट शुरू करने के लिए कमांड","django-admin startproject myproject"
"एक Django ऐप बनाने के लिए कमांड","python manage.py startapp myapp"
"Django में एक सिंपल मॉडल बनाओ","""# In myapp/models.py:\nfrom django.db import models\n\nclass Post(models.Model):\n    title = models.CharField(max_length=100)"""
"Django मॉडल्स को माइग्रेट करो","python manage.py makemigrations\npython manage.py migrate"
"Django में एक सिंपल व्यू बनाओ","""# In myapp/views.py:\nfrom django.http import HttpResponse\n\ndef index(request):\n    return HttpResponse('Hello, from Django!')"""
"Django में một URL को एक व्यू से जोड़ो","""# In myapp/urls.py:\nfrom django.urls import path\nfrom . import views\n\nurlpatterns = [path('', views.index, name='index')]"""
"Django में एक टेम्पलेट को रेंडर करो","""# In myapp/views.py:\nfrom django.shortcuts import render\n\ndef index(request):\n    return render(request, 'myapp/index.html')"""
"Django टेम्पलेट में एक वेरिएबल दिखाओ","""\n<h1>{{ my_variable }}</h1>"""
"Django टेम्पलेट में `for` लूप का उपयोग करो","""<ul>\n{% for item in my_list %}\n    <li>{{ item }}</li>\n{% endfor %}\n</ul>"""
"Django टेम्पलेट में `if` कंडीशन का उपयोग करो","""{% if user.is_authenticated %}\n    <p>Welcome!</p>\n{% endif %}"""
"Django एडमिन में एक मॉडल को रजिस्टर करो","""# In myapp/admin.py:\nfrom django.contrib import admin\nfrom .models import Post\n\nadmin.site.register(Post)"""
"Django में एक सुपरयूज़र बनाओ","python manage.py createsuperuser"
"Django में एक फॉर्म क्लास बनाओ","""from django import forms\n\nclass ContactForm(forms.Form):\n    name = forms.CharField()\n    email = forms.EmailField()"""
"Django व्यू में एक फॉर्म को हैंडल करो","""def contact_view(request):\n    if request.method == 'POST':\n        form = ContactForm(request.POST)\n        if form.is_valid():\n            # process data\n            return HttpResponse('Thanks!')"""
"Django ORM का उपयोग करके सभी ऑब्जेक्ट्स को क्वेरी करो","""all_posts = Post.objects.all()"""
"Django ORM का उपयोग करके एक ऑब्जेक्ट को फ़िल्टर करो","""some_posts = Post.objects.filter(title__startswith='Hello')"""
"Django ORM का उपयोग करके एक सिंगल ऑब्जेक्ट प्राप्त करो","""post = Post.objects.get(id=1)"""
"Django ORM का उपयोग करके एक नया ऑब्जेक्ट बनाओ और सेव करो","""new_post = Post(title='My New Post')\nnew_post.save()"""
"Django में स्टैटिक फाइलों को कैसे हैंडल करें","""# In settings.py:\nSTATIC_URL = '/static/'"""
"Django टेम्पलेट में स्टैटिक फाइल (जैसे CSS) को लोड करो","""{% load static %}\n<link rel='stylesheet' href='{% static 'css/style.css' %}'>"""
"Flask-Migrate का उपयोग करके डेटाबेस माइग्रेशन हैंडल करो","pip install Flask-Migrate"
"Flask-RestX का उपयोग करके एक REST API बनाओ","pip install flask-restx"
"Django Rest Framework का उपयोग करके एक Serializer बनाओ","""from rest_framework import serializers\n\nclass PostSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Post\n        fields = '__all__'"""
"Django Rest Framework का उपयोग करके एक API व्यू बनाओ","""from rest_framework.response import Response\nfrom rest_framework.decorators import api_view\n\n@api_view(['GET'])\ndef get_posts(request):\n    posts = Post.objects.all()\n    serializer = PostSerializer(posts, many=True)\n    return Response(serializer.data)"""
"Flask में Gunicorn का उपयोग करने के लिए कमांड","gunicorn --workers 4 app:app"
"Django में Gunicorn का उपयोग करने के लिए कमांड","gunicorn myproject.wsgi"
"Flask में एक यूज़र को लॉग इन करने के लिए सेशन का उपयोग","""session['user_id'] = user.id"""
"Flask में यूज़र के लॉग इन होने की जाँच","""if 'user_id' in session: ..."""
"Django में यूज़र के लॉग इन होने की जाँच","""if request.user.is_authenticated: ..."""
"Flask में request हुक्स का उपयोग करो","""@app.before_request, @app.after_request"""
"Django में मिडलवेयर (Middleware) का एक उदाहरण","""# A simple middleware class in middleware.py"""
"Flask-Mail का उपयोग करके ईमेल भेजो","pip install Flask-Mail"
"Django में ईमेल भेजने के लिए `send_mail` का उपयोग","""from django.core.mail import send_mail\nsend_mail('Subject', 'Body', 'from@example.com', ['to@example.com'])"""
"Flask में Celery का उपयोग करके एक बैकग्राउंड टास्क चलाओ","pip install celery"
"स्क्रीन रीडर के लिए एक इमेज में ऑल्ट (alt) टेक्स्ट जोड़ो","<img src='logo.png' alt='Company Logo'>"
"पेज के हेडर के लिए सिमेंटिक HTML टैग का उपयोग करो","<header><h1>Main Website Title</h1><nav>...</nav></header>"
"नेविगेशन लिंक्स के लिए सिमेंटिक `nav` टैग का उपयोग करो","<nav><ul><li><a href='/home'>Home</a></li><li><a href='/about'>About</a></li></ul></nav>"
"पेज के मुख्य कंटेंट के लिए सिमेंटिक `main` टैग का उपयोग करो","<main><h2>Article Title</h2><p>This is the main content of the page.</p></main>"
"पेज के फुटर के लिए सिमेंटिक `footer` टैग का उपयोग करो","<footer><p>&copy; 2025 Amit Saka. All rights reserved.</p></footer>"
"एक div को बटन की तरह बनाने के लिए ARIA रोल जोड़ो","<div role='button' tabindex='0' onclick=""alert('Clicked!')"">Clickable Div</div>"
"एक `div` को नेविगेशन की तरह बनाने के लिए ARIA रोल जोड़ो","<div role='navigation' aria-label='Main Navigation'>...links here...</div>"
"एक आइकन बटन को स्पष्ट लेबल देने के लिए `aria-label` का उपयोग करो","<button aria-label='Close'>&times;</button>"
"एक इनपुट फील्ड के लिए एक `label` को `for` एट्रिब्यूट से जोड़ो","<label for='username'>Username:</label><input id='username' type='text'>"
"संबंधित फॉर्म कंट्रोल्स को ग्रुप करने के लिए `fieldset` और `legend` का उपयोग करो","<fieldset><legend>Shipping Address</legend><label>Street:</label><input>...</fieldset>"
"SEO के लिए एक मेटा डिस्क्रिप्शन टैग जोड़ो","<meta name='description' content='Learn to build an amazing AI coding assistant with our step-by-step guide.'>"
"SEO के लिए मेटा कीवर्ड्स टैग जोड़ो","<meta name='keywords' content='AI, HTML, CSS, JavaScript, Coding Bot, Tutorial'>"
"पेज के लेखक के लिए मेटा टैग जोड़ो","<meta name='author' content='Amit Saka'>"
"सोशल मीडिया शेयरिंग के लिए OG (Open Graph) टाइटल टैग जोड़ो","<meta property='og:title' content='I am building an AI Coding Assistant!'>"
"सोशल मीडिया शेयरिंग के लिए OG टाइप 'website' सेट करो","<meta property='og:type' content='website'>"
"सोशल मीडिया शेयरिंग के लिए OG URL टैग जोड़ो","<meta property='og:url' content='https://example.com/my-ai-project.html'>"
"सोशल मीडिया शेयरिंग के लिए OG इमेज टैग जोड़ो","<meta property='og:image' content='https://example.com/project-thumbnail.jpg'>"
"ट्विटर कार्ड के लिए एक 'summary' टैग बनाओ","<meta name='twitter:card' content='summary'>"
"वेबसाइट के लिए एक favicon लिंक करो","<link rel='icon' href='/favicon.ico' type='image/x-icon'>"
"डुप्लीकेट कंटेंट से बचने के लिए एक कैनोनिकल (canonical) URL सेट करो","<link rel='canonical' href='https://example.com/preferred-url-of-this-page.html'>"
"सर्च इंजन को एक पेज को इंडेक्स न करने के लिए कहो","<meta name='robots' content='noindex'>"
"सर्च इंजन को एक पेज के लिंक्स को फॉलो न करने के लिए कहो","<meta name='robots' content='nofollow'>"
"`html` टैग पर पेज की भाषा 'en' (English) सेट करो","<html lang='en'></html>"
"सुरक्षा के लिए नए टैब में खुलने वाले लिंक्स पर `rel` एट्रिब्यूट जोड़ो","<a href='https://externalsite.com' target='_blank' rel='noopener noreferrer'>External Link</a>"
"परफॉरमेंस के लिए इमेज को लेजी लोड (lazy load) करो","<img src='heavy-image.jpg' loading='lazy' alt='a very large image'>"
"पेज रेंडरिंग को ब्लॉक न करने के लिए स्क्रिप्ट को `async` के साथ लोड करो","<script src='analytics.js' async></script>"
"पेज रेंडरिंग के बाद स्क्रिप्ट को चलाने के लिए `defer` का उपयोग करो","<script src='main-script.js' defer></script>"
"पेज लेआउट शिफ्ट से बचने के लिए इमेज में `width` और `height` एट्रिब्यूट दो","<img src='photo.jpg' width='200' height='150' alt='A properly sized photo'>"
"एक्सेसिबिलिटी के लिए एक 'Skip to main content' लिंक बनाओ","<a href='#main' class='skip-link'>Skip to main content</a><div style='height:50px;'>Navigation</div><main id='main'>Main content starts here.</main>"
"कीबोर्ड यूज़र्स के लिए फोकस आउटलाइन को बेहतर बनाओ","<style>a:focus, button:focus, input:focus { outline: 3px solid blue; }</style>"
"एक बटन को ARIA का उपयोग करके 'प्रेस्ड' स्टेट में दिखाओ","<button aria-pressed='true'>Mute</button>"
"एक्सेसिबिलिटी के लिए टेबल हेडर्स (`th`) का उपयोग करो","<table><thead><tr><th scope='col'>Name</th><th scope='col'>Age</th></tr></thead><tbody><tr><td>Amit</td><td>25</td></tr></tbody></table>"
"एक वीडियो के लिए ट्रैक्स/कैप्शन जोड़ो","<video controls><source src='movie.mp4' type='video/mp4'><track src='captions_en.vtt' kind='captions' srclang='en' label='English'></video>"
"जावास्क्रिप्ट से एक ARIA एट्रिब्यूट को बदलो","<button id='btn' aria-expanded='false' onclick=""this.setAttribute('aria-expanded', this.getAttribute('aria-expanded') === 'false' ? 'true' : 'false')"">Menu</button>"
"HTML में एक संक्षिप्त नाम (abbreviation) को डिफाइन करो","<p><abbr title='World Health Organization'>WHO</abbr> was founded in 1948.</p>"
"HTML कोड की भाषा को वैलिडेट करने के लिए W3C वैलिडेटर का उपयोग करो",""
"प्रिंट के लिए एक अलग स्टाइलशीट लिंक करो","<link rel='stylesheet' href='print.css' media='print'>"
"HTML `lang` एट्रिब्यूट का सही उपयोग","<p lang='fr'>Bonjour</p><p lang='es'>Hola</p>"
"एक लिंक के उद्देश्य को स्पष्ट करो","<a href='report.pdf'>Download the 2025 Financial Report (PDF)</a>"
"CSS में `prefers-reduced-motion` मीडिया क्वेरी का उपयोग करो","<style>@media (prefers-reduced-motion: reduce) { * { animation: none !important; transition: none !important; } }</style>"
"एक इनपुट के लिए ऑटो-कम्प्लीट को सही ढंग से सेट करो","<label for='email'>Email:</label><input type='email' id='email' autocomplete='email'>"
"एक प्रोग्रेस बार को `progress` टैग से बनाओ","<label for='file'>File progress:</label><progress id='file' max='100' value='70'> 70% </progress>"
"एक मीटर को `meter` टैग से बनाओ","<label for='disk_d'>Disk usage D:</label><meter id='disk_d' min='0' max='100' value='80'>80 out of 100</meter>"
"HTML5 `figure` और `figcaption` का सही उपयोग","<figure><img src='pic.jpg' alt='A descriptive alt text'><figcaption>This is a caption for the image.</figcaption></figure>"
"`aria-hidden='true'` का उपयोग करके सजावटी (decorative) एलिमेंट्स को छिपाओ","<i class='fas fa-star' aria-hidden='true'></i><span>Rating</span>"
"लिंक्स को अलग दिखाने के लिए सिर्फ रंग का इस्तेमाल न करें","<style>a.styled-link { color: blue; text-decoration: underline; }</style>"
"सुनिश्चित करें कि सभी क्लिक करने योग्य एलिमेंट्स काफी बड़े हों","<style>.touch-target{min-width:44px; min-height:44px;}</style><button class='touch-target'>Click</button>"
"`role='alert'` का उपयोग करके डायनाミック रूप से एरर मैसेज की घोषणा करो","<div id='error-msg' role='alert'></div><script>document.getElementById('error-msg').textContent = 'Invalid input!';</script>"
"`aria-live='polite'` का उपयोग करके लाइव अपडेट्स की घोषणा करो","<div id='live-region' aria-live='polite'></div><script>setInterval(() => { document.getElementById('live-region').textContent = 'New message received!'; }, 5000);</script>"
"सिमेंटिक तरीके से एक ब्लॉग कमेंट सेक्शन बनाओ","<article class='comment'><header><h4>User A</h4><time>2 hours ago</time></header><p>This is a comment.</p><footer><button>Reply</button></footer></article>"
"एक सिंपल लाइट/डार्क मोड टॉगल बटन बनाओ","<style>body.dark-mode{background:#121212; color:white;}</style><button onclick=""document.body.classList.toggle('dark-mode')"">Toggle Dark/Light Mode</button>"
"एक 'Copy to Clipboard' बटन बनाओ","<input id='copyInput' value='Text to copy'><button onclick=""document.getElementById('copyInput').select(); document.execCommand('copy'); alert('Copied!')"">Copy</button>"
"एक 5-स्टार रेटिंग कॉम्पोनेन्ट बनाओ","<style>.star{cursor:pointer; font-size:24px; color:grey;}.star:hover, .star:hover ~ .star {color:orange;}</style><div class='stars'><span>★</span><span>★</span><span>★</span><span>★</span><span>★</span></div>"
"एक डायनामिक प्रोग्रेस बार बनाओ जो बटन क्लिक पर 100% हो जाए","<div style='width:100%; background-color:#ddd;'><div id='progressBar' style='width:10%; height:20px; background-color:green; transition:width 0.5s;'></div></div><button onclick=""document.getElementById('progressBar').style.width='100%'"">Complete</button>"
"एक अकॉर्डियन बनाओ जो क्लिक करने पर कंटेंट दिखाए/छिपाए","<style>.panel{display:none;}</style><button onclick=""this.nextElementSibling.style.display = this.nextElementSibling.style.display==='block'?'none':'block';"">Toggle</button><div class='panel'><p>Hidden text.</p></div>"
"एक मोडल (popup) बॉक्स बनाओ","<style>.modal{display:none; position:fixed; top:0; left:0; width:100%; height:100%; background:rgba(0,0,0,0.5);}</style><button onclick=""document.getElementById('myModal').style.display='block'"">Open Modal</button><div id='myModal' class='modal'>...</div>"
"एक टैब वाला इंटरफ़ेस बनाओ","<style>.tabcontent{display:none;}</style><button onclick=""openTab('Tab1')"">Tab 1</button><div id='Tab1' class='tabcontent'>Content 1</div><script>function openTab(tabName){...}</script>"
"एक सिंपल सर्च फिल्टर बनाओ","<input onkeyup='filterList()'><ul id='myUL'><li>Apple</li></ul><script>function filterList(){...}</script>"
"एक 'Scroll to Top' बटन बनाओ","<style>#toTopBtn{display:none; position:fixed; bottom:20px;}</style><button id='toTopBtn' onclick=""window.scrollTo({top:0, behavior:'smooth'})"">Top</button><script>window.onscroll=()=>{...}</script>"
"एक पासवर्ड स्ट्रेंथ इंडिकेटर बनाओ","<input type='password' oninput=""document.getElementById('strength').innerText = this.value.length > 8 ? 'Strong' : 'Weak';""><p>Strength: <span id='strength'></span></p>"
"एक रियल-टाइम कैरेक्टर काउंटर बनाओ","<textarea oninput=""document.getElementById('charCount').innerText = this.value.length;""></textarea><p>Chars: <span id='charCount'>0</span></p>"
"एक स्नैकबार (toast) नोटिफिकेशन बनाओ","<style>#snackbar{visibility:hidden; ...}</style><button onclick=""var x=document.getElementById('snackbar'); x.style.visibility='visible'; setTimeout(()=>{x.style.visibility='hidden';}, 3000);"">Toast</button><div id='snackbar'>Notif!</div>"
"एक बटन बनाओ जो फॉर्म सबमिट होने पर डिसेबल हो जाए","<form onsubmit=""document.getElementById('submitBtn').disabled=true;""><button id='submitBtn'>Submit</button></form>"
"एक सिंपल ऑटोमेटिक इमेज स्लाइडर बनाओ","<img id='sliderImg' src='img1.jpg'><script>const imgs=['img1.jpg', 'img2.jpg']; let i=0; setInterval(()=>{i=(i+1)%imgs.length; document.getElementById('sliderImg').src=imgs[i];}, 2000)</script>"
"एक ड्रैग करने योग्य div बनाओ","<div id='dragMe' style='position:absolute; background:blue; cursor:move;'></div><script>dragElement(document.getElementById('dragMe')); function dragElement(elmnt){...}</script>"
"एक पासवर्ड फील्ड बनाओ जिसमें पासवर्ड को दिखाने/छिपाने का विकल्प हो","<input id='pwdInput' type='password'><input type='checkbox' onclick=""document.getElementById('pwdInput').type = this.checked ? 'text' : 'password';"">Show"
"एक डिजिटल क्लॉक बनाओ","<div id='clock'></div><script>setInterval(()=>document.getElementById('clock').innerText = new Date().toLocaleTimeString(), 1000);</script>"
"पेजिनेशन के लिए एक UI कॉम्पोनेन्ट बनाओ","<style>.pagination a.active{background:blue;}</style><div class='pagination'><a href='#'>1</a><a class='active' href='#'>2</a></div>"
"एक before/after इमेज स्लाइडर का UI बनाओ","<div style='position:relative;'><img src='before.jpg'><div style='position:absolute; width:50%; ...'><img src='after.jpg'></div></div>"
"एक कलर पिकर बनाओ जो पेज का बैकग्राउंड बदले","<input type='color' oninput=""document.body.style.backgroundColor=this.value;"">"
"एक टेक्स्ट का फॉन्ट साइज़ बदलने के लिए स्लाइडर बनाओ","<p id='resizeText'>Adjust</p><input type='range' oninput=""document.getElementById('resizeText').style.fontSize = this.value + 'px'"">"
"एक सिंपल क्विज बनाओ जो फीडबैक दे","<p>5+5?</p><button onclick=""alert('Correct!')"">10</button><button onclick=""alert('Wrong!')"">12</button>"
"एक स्टॉपवॉच का बेसिक UI बनाओ","<h2>00:00:00</h2><button>Start</button><button>Stop</button>"
"एक लाइव वेलकम मैसेज बनाओ","<input onkeyup=""document.getElementById('welcomeText').innerText = 'Welcome, ' + this.value""><h3 id='welcomeText'></h3>"
"एक डाइस रोल जेनरेटर बनाओ","<p>Dice: <span id='diceRoll'>0</span></p><button onclick=""document.getElementById('diceRoll').innerText = Math.floor(Math.random()*6)+1"">Roll</button>"
"एक वर्ड काउंटर टूल बनाओ","<textarea oninput=""document.getElementById('wc').innerText = this.value.trim().split(/\s+/).length;""></textarea><p>Words: <span id='wc'>0</span></p>"
"एक टेक्स्ट-टू-अपरकेस कनवर्टर बनाओ","<input oninput=""this.value=this.value.toUpperCase()"">"
"10 से 0 तक का एक काउंटडाउन टाइमर","<h2 id='countdownTimer'>10</h2><button onclick=""...setInterval(...)"">Start</button>"
"एक 'स्टिकी नोट' बनाओ जो localStorage में सेव हो","<textarea oninput=""localStorage.setItem('note', this.value);""></textarea><script>document.querySelector('textarea').value=localStorage.getItem('note');</script>"
"एक बेसिक BMI कैलकुलेटर बनाओ","<input id='h' placeholder='Height(m)'><input id='w' placeholder='Weight(kg)'><button onclick=""...document.getElementById('bmi').innerText=w/(h*h);"">Calc</button><p>BMI:<span id='bmi'></span></p>"
"सेल्सियस को फारेनहाइट में बदलने वाला कनवर्टर","<input placeholder='C' oninput=""document.getElementById('f').innerText=(this.value*9/5)+32;""><p>F: <span id='f'></span></p>"
"एक रैंडम कोट (quote) जेनरेटर","<p id='q_text'>Quote</p><script>const q=['A','B'];</script><button onclick=""...document.getElementById('q_text').innerText=q[...];"">New</button>"
"एक स्क्रॉल प्रोग्रेस बार बनाओ","<div id='pBar' style='position:fixed;top:0;height:5px;background:green;width:0%;'></div><script>window.onscroll=()=>{...}</script>"
"एक हॉरिजॉन्टल स्क्रॉलिंग मेन्यू","<style>.scroll-menu{display:flex; overflow-x:auto;}</style><div class='scroll-menu'>...</div>"
"एक कस्टम टूलटिप","<style>.tooltip .tooltiptext{visibility:hidden;...}.tooltip:hover .tooltiptext{visibility:visible;}</style><div class='tooltip'>...</div>"
"एक 'Read More' लिंक","<p>Short... <span id='more' style='display:none;'>more...</span></p><button onclick=""...document.getElementById('more').style.display='inline';"">More</button>"
"एक ऑडियो के लिए प्ले/पॉज बटन","<audio id='player' src='s.mp3'></audio><button onclick=""...play()"">Play</button><button onclick=""...pause()"">Pause</button>"
"एक डायनामिक टेबल","<table id='dynamicTable'></table><script>const data=[{n:'A'}];...</script>"
"एक सिंपल पोल (poll) कॉम्पोनेन्ट","<h3>Favorite?</h3><p><button>JS</button></p><p><button>Python</button></p>"
"एक क्रेडिट कार्ड इनपुट का UI","<div><label>Card:</label><input placeholder='0000...'>...</div>"
"एक सिंपल प्राइसिंग टेबल","<div style='display:flex;'><div style='border:1px solid'><h3>Basic</h3></div>...</div>"
"एक कुकी कंसेंट बैनर","<div id='cookieBanner' style='position:fixed; bottom:0;'>...<button onclick=""...style.display='none'"">Accept</button></div>"
"पेज को प्रिंट करने के लिए एक बटन","<button onclick='window.print()'>Print</button>"
"एक टेक्स्ट को बोलने के लिए (Text-to-Speech) बटन","<input id='textToSpeak'><button onclick=""...speechSynthesis.speak(...)"">Speak</button>"
"एक स्टेप-बाय-स्टेप प्रोग्रेस इंडिकेटर (stepper)","<style>.step.active{background:blue;}</style><div class='step active'>1</div>..."
"एक ब्रेडक्रंब (breadcrumb) नेविगेशन","<div><a href='#'>Home</a> &gt; <span>Data</span></div>"
"एक वीडियो के लिए कस्टम प्ले/पॉज बटन","<video id='myVideo'></video><button onclick=""...play()"">Play</button>"
"एक डायनामिक CSS वेरिएबल","<style>:root{--box-color: blue;}</style><div style='background:var(--box-color);'></div><button onclick=""...setProperty('--box-color', 'red')"">Change</button>"
"वेब स्क्रैपिंग के लिए `requests` और `BeautifulSoup` को इम्पोर्ट करो","import requests\nfrom bs4 import BeautifulSoup"
"एक वेबसाइट का HTML कंटेंट प्राप्त करो","import requests\nURL = 'http://example.com'\npage = requests.get(URL)"
"HTML कंटेंट को `BeautifulSoup` ऑब्जेक्ट में पार्स करो","from bs4 import BeautifulSoup\n# page = requests.get(...)\nsoup = BeautifulSoup(page.content, 'html.parser')"
"एक वेब पेज का टाइटल निकालो","soup = BeautifulSoup(html_content, 'html.parser')\ntitle = soup.title.string"
"एक वेब पेज से पहला पैराग्राफ निकालो","soup = BeautifulSoup(html_content, 'html.parser')\nfirst_p = soup.find('p').get_text()"
"एक वेब पेज से सभी पैराग्राफ (`p`) टैग्स निकालो","soup = BeautifulSoup(html_content, 'html.parser')\nall_paragraphs = soup.find_all('p')"
"एक वेब पेज से सभी लिंक्स (`a`) टैग्स निकालो","soup = BeautifulSoup(html_content, 'html.parser')\nall_links = soup.find_all('a')"
"सभी लिंक्स से URL (href) निकालो","for link in soup.find_all('a'):\n    print(link.get('href'))"
"एक खास `id` वाले एलिमेंट को ढूंढो","main_content = soup.find(id='main-content')"
"एक खास `class` वाले सभी एलिमेंट्स को ढूंढो","articles = soup.find_all(class_='blog-post')"
"एक एलिमेंट के पैरेंट को एक्सेस करो","p_tag = soup.find('p')\nparent_div = p_tag.parent"
"एक एलिमेंट के चिल्ड्रेन को एक्सेस करो","div = soup.find('div')\nfor child in div.children:\n    print(child.name)"
"CSS सिलेक्टर का उपयोग करके एक एलिमेंट ढूंढो","title = soup.select_one('head > title')"
"CSS सिलेक्टर का उपयोग करके कई एलिमेंट्स ढूंढो","list_items = soup.select('ul > li')"
"एक इमेज का `src` एट्रिब्यूट निकालो","image = soup.find('img')\nimage_url = image['src']"
"एक टेबल से सभी रो (`tr`) निकालो","table = soup.find('table')\nrows = table.find_all('tr')"
"एक टेबल के हेडर और डेटा को अलग-अलग निकालो","table = soup.find('table')\nheaders = [th.get_text() for th in table.find_all('th')]\ndata = [[td.get_text() for td in row.find_all('td')] for row in table.find_all('tr')]"
"एक वेब पेज से सभी हेडिंग्स (h1, h2, h3) निकालो","headings = soup.find_all(['h1', 'h2', 'h3'])"
"एक वेबसाइट पर लॉग इन करने के लिए `requests` सेशन का उपयोग करो","import requests\nsession = requests.Session()\nsession.post('http://example.com/login', data={'user':'a', 'pass':'b'})"
"एक लॉग-इन सेशन का उपयोग करके एक प्रोटेक्टेड पेज को स्क्रैप करो","protected_page = session.get('http://example.com/dashboard')"
"एक स्क्रैपिंग स्क्रिप्ट में यूजर-एजेंट सेट करो","headers = {'User-Agent': 'Mozilla/5.0 ...'}\npage = requests.get(URL, headers=headers)"
"त्रुटियों (errors) को हैंडल करने के लिए `try-except` ब्लॉक का उपयोग करो","import requests\ntry:\n    page = requests.get('http://invalid-url.xyz')\n    page.raise_for_status()\nexcept requests.exceptions.RequestException as e:\n    print(f'Error: {e}')"
"एक वेबसाइट की `robots.txt` फाइल को चेक करो","robots_txt = requests.get('http://example.com/robots.txt').text"
"स्क्रैप किए हुए डेटा को एक CSV फाइल में सेव करो","import csv\n# ... scraped data is a list of lists ...\nwith open('output.csv', 'w', newline='') as f:\n    writer = csv.writer(f)\n    writer.writerows(scraped_data)"
"एक वेब पेज से सभी इमेज URLs निकालो","for img in soup.find_all('img'):\n    print(img.get('src'))"
"अगले पेज (next page) के लिंक को फॉलो करो (पेजिनेशन)","next_page_link = soup.find('a', class_='next-page')\nif next_page_link:\n    next_url = next_page_link.get('href')"
"Selenium लाइब्रेरी को इम्पोर्ट करो","from selenium import webdriver"
"Selenium का उपयोग करके एक ब्राउज़र खोलो","from selenium import webdriver\ndriver = webdriver.Chrome()"
"Selenium से एक वेब पेज पर जाओ","driver.get('http://example.com')"
"Selenium से जावास्क्रिप्ट द्वारा लोड किए गए कंटेंट को स्क्रैप करो","import time\ndriver.get('http://example.com')\ntime.sleep(5) # Wait for JS to load\nhtml = driver.page_source\nsoup = BeautifulSoup(html, 'html.parser')"
"Selenium से एक एलिमेंट को `id` से ढूंढो","element = driver.find_element(By.ID, 'my-id')"
"Selenium से एक बटन पर क्लिक करो","button = driver.find_element(By.TAG_NAME, 'button')\nbutton.click()"
"Selenium से एक इनपुट फील्ड में टेक्स्ट टाइप करो","input_field = driver.find_element(By.NAME, 'username')\ninput_field.send_keys('my_username')"
"Selenium से एक स्क्रीनशॉट लो","driver.save_screenshot('screenshot.png')"
"Selenium ब्राउज़र को बंद करो","driver.quit()"
"एक API से JSON डेटा स्क्रैप करो","import requests\ndata = requests.get('http://api.example.com/data').json()"
"एक छिपे हुए (hidden) इनपुट फील्ड की वैल्यू निकालो","hidden_input = soup.find('input', {'type': 'hidden'})\nvalue = hidden_input['value']"
"एक वेब पेज से कमेंट्स निकालो","for comment in soup.find_all(string=lambda text: isinstance(text, Comment)):\n    print(comment)"
"एक पेज की सभी मेटा जानकारी (meta information) निकालो","meta_tags = soup.find_all('meta')"
"स्क्रैप किए हुए टेक्स्ट को साफ़ करो (`strip()`)","raw_text = '  Hello\\n  '\nclean_text = raw_text.strip()"
"lxml पार्सर का उपयोग करो","soup = BeautifulSoup(html_content, 'lxml')"
"एक एलिमेंट के सभी एट्रिब्यूट्स को एक डिक्शनरी के रूप में प्राप्त करो","tag = soup.find('a')\nattributes = tag.attrs"
"एक खास एट्रिब्यूट वाले टैग को ढूंढो","tag = soup.find('p', {'data-type': 'greeting'})"
"सिबलिंग (sibling) एलिमेंट्स पर इटरेट करो","for sibling in soup.find('h2').next_siblings:\n    print(sibling.name)"
"एक टेबल को Pandas DataFrame में बदलो","import pandas as pd\ntable = soup.find('table')\ndf = pd.read_html(str(table))[0]"
"Scrapy फ्रेमवर्क का एक बेसिक स्पाइडर बनाओ","import scrapy\nclass MySpider(scrapy.Spider):\n    name = 'myspider'\n    start_urls = ['http://example.com']\n\n    def parse(self, response):\n        pass # parsing logic here"
"एक XPath का उपयोग करके एलिमेंट्स को सिलेक्ट करो (lxml)","from lxml import html\ntree = html.fromstring(page.content)\nelements = tree.xpath('//a/text()')"
"एक पेज से सभी ईमेल एड्रेस निकालो (RegEx)","import re\nemails = re.findall(r'[\\w\\.-]+@[\\w\\.-]+', html_content)"
"Flask में एक सिंपल रजिस्ट्रेशन पेज का रूट बनाओ","""# In app.py:\nfrom flask import render_template\n@app.route('/register')\ndef register_page():\n    return render_template('register.html')"""
"एक HTML रजिस्ट्रेशन फॉर्म बनाओ","""\n<form action='/register' method='post'>\n    <input name='username' placeholder='Username'>\n    <input name='password' type='password' placeholder='Password'>\n    <button type='submit'>Register</button>\n</form>"""
"Flask में रजिस्ट्रेशन फॉर्म के POST डेटा को हैंडल करो","""# In app.py:\nfrom flask import request\n@app.route('/register', methods=['POST'])\ndef handle_registration():\n    username = request.form['username']\n    password = request.form['password']\n    # ... save user to database ...\n    return 'User registered!'"""
"Flask में एक सिंपल लॉगइन पेज का रूट बनाओ","""# In app.py:\nfrom flask import render_template\n@app.route('/login')\ndef login_page():\n    return render_template('login.html')"""
"एक HTML लॉगइन फॉर्म बनाओ","""\n<form action='/login' method='post'>\n    <input name='username' placeholder='Username'>\n    <input name='password' type='password' placeholder='Password'>\n    <button type='submit'>Login</button>\n</form>"""
"Flask में लॉगइन फॉर्म के POST डेटा को हैंडल करो","""# In app.py:\nfrom flask import request\n@app.route('/login', methods=['POST'])\ndef handle_login():\n    username = request.form['username']\n    # ... check user credentials ...\n    return f'Welcome, {username}'"""
"Flask में सेशन (session) को सेटअप करो","""# In app.py:\nfrom flask import Flask\napp = Flask(__name__)\napp.secret_key = 'a_very_secret_key'"""
"लॉगइन होने पर सेशन में यूज़र का नाम सेव करो","""# In app.py:\nfrom flask import session\n@app.route('/login', methods=['POST'])\ndef handle_login():\n    session['username'] = request.form['username']\n    return 'Logged in successfully!'"""
"एक प्रोटेक्टेड पेज बनाओ जो सिर्फ लॉग-इन यूज़र ही देख सके","""# In app.py:\nfrom flask import session, redirect, url_for\n@app.route('/dashboard')\ndef dashboard():\n    if 'username' in session:\n        return f'Hello, {session[""username""]}'\n    return redirect(url_for('login_page'))"""
"एक लॉगआउट रूट बनाओ जो सेशन को क्लियर करे","""# In app.py:\nfrom flask import session, redirect, url_for\n@app.route('/logout')\ndef logout():\n    session.pop('username', None)\n    return redirect(url_for('login_page'))"""
"टेम्पलेट में दिखाओ कि यूज़र लॉग-इन है या नहीं","""\n{% if session.username %}\n    <a href='/logout'>Logout</a>\n{% else %}\n    <a href='/login'>Login</a>\n{% endif %}"""
"Flask में पासवर्ड को हैश (hash) करो","""from werkzeug.security import generate_password_hash\nhashed_password = generate_password_hash('my_password')"""
"लॉगइन के समय हैश किए हुए पासवर्ड को चेक करो","""from werkzeug.security import check_password_hash\n# check_password_hash(hashed_password_from_db, submitted_password)"""
"Flask-Login लाइब्रेरी को इनस्टॉल करो","pip install Flask-Login"
"Flask-Login के लिए एक User क्लास बनाओ","""from flask_login import UserMixin\nclass User(UserMixin):\n    # ... id, username, password properties ..."""
"Flask-Login को इनिशियलाइज़ करो","""from flask_login import LoginManager\napp = Flask(__name__)\nlogin_manager = LoginManager()\nlogin_manager.init_app(app)"""
"`@login_required` डेकोरेटर का उपयोग करो","""from flask_login import login_required\n@app.route('/protected')\n@login_required\ndef protected_route():\n    return 'This is a protected page.'"""
"Flask-Login में `login_user` फंक्शन का उपयोग करो","""from flask_login import login_user\n# ... after checking credentials ...\nlogin_user(user_object)"""
"Flask-Login में `logout_user` फंक्शन का उपयोग करो","""from flask_login import logout_user\n@app.route('/logout')\n@login_required\ndef logout():\n    logout_user()\n    return 'Logged out'"""
"Flask-Login में `current_user` का उपयोग करो","""from flask_login import current_user\n@app.route('/')\ndef index():\n    if current_user.is_authenticated:\n        return f'Hello, {current_user.username}'\n    return 'Hello, Guest'"""
"एक रजिस्ट्रेशन API बनाओ जो JSON लौटाए","""# In app.py:\n@app.route('/api/register', methods=['POST'])\ndef api_register():\n    # ... logic ...\n    return jsonify({'status':'success'})"""
"AJAX का उपयोग करके रजिस्ट्रेशन फॉर्म सबमिट करो","""\n<script>\n// ... fetch POST call with username/password to /api/register ...\n</script>"""
"एक लॉगइन API बनाओ जो टोकन (token) लौटाए","""# In app.py:\n@app.route('/api/login', methods=['POST'])\ndef api_login():\n    # ... check credentials ...\n    return jsonify({'token': 'some_jwt_token'})"""
"जावास्क्रिप्ट में API से मिले टोकन को localStorage में सेव करो","""\n<script>\nfetch('/api/login', ...).then(r=>r.json()).then(d=>{\n    localStorage.setItem('auth_token', d.token);\n});\n</script>"""
"जावास्क्रिप्ट में हर API रिक्वेस्ट के साथ टोकन भेजो","""\n<script>\nconst token = localStorage.getItem('auth_token');\nfetch('/api/protected-data', { headers: {'Authorization': `Bearer ${token}`} });\n</script>"""
"Flask में Bearer टोकन को वैलिडेट करो","""# In app.py:\n@app.route('/api/protected-data')\ndef protected_data():\n    auth_header = request.headers.get('Authorization')\n    # ... validate token ...\n    return jsonify({'data': 'secret info'})"""
"Flask में 'flash' मैसेज का उपयोग करो","""from flask import flash, redirect, url_for\nflash('You were successfully logged in')\nreturn redirect(url_for('index'))"""
"Jinja2 टेम्पलेट में flash मैसेज दिखाओ","""{% with messages = get_flashed_messages() %}\n  {% if messages %}\n    <ul>\n    {% for message in messages %}\n      <li>{{ message }}</li>\n    {% endfor %}\n    </ul>\n  {% endif %}\n{% endwith %}"""
"एक 'Remember Me' फंक्शनैलिटी बनाओ","""\n<input type='checkbox' name='remember'> Remember Me\n\n# In app.py:\nlogin_user(user, remember=request.form.get('remember'))"""
"Flask-WTF लाइब्रेरी को इनस्टॉल करो","pip install Flask-WTF"
"Flask-WTF का उपयोग करके एक लॉगइन फॉर्म बनाओ","""from flask_wtf import FlaskForm\nfrom wtforms import StringField, PasswordField\nfrom wtforms.validators import DataRequired\n\nclass LoginForm(FlaskForm):\n    username = StringField('Username', validators=[DataRequired()])\n    password = PasswordField('Password', validators=[DataRequired()])"""
"Jinja2 टेम्पलेट में Flask-WTF फॉर्म को रेंडर करो","""<form method='post'>\n    {{ form.hidden_tag() }}\n    {{ form.username.label }} {{ form.username() }}\n    {{ form.password.label }} {{ form.password() }}\n</form>"""
"Flask रूट में WTF फॉर्म को प्रोसेस करो","""@app.route('/login', methods=['GET', 'POST'])\ndef wtf_login():\n    form = LoginForm()\n    if form.validate_on_submit():\n        # ... process login ...\n        return redirect('/')\n    return render_template('login.html', form=form)"""
"CSRF प्रोटेक्शन के लिए Flask-WTF का उपयोग करो","""from flask_wtf.csrf import CSRFProtect\napp = Flask(__name__)\napp.config['SECRET_KEY'] = 'a_secret_key'\nCSRFProtect(app)"""
"पासवर्ड रीसेट के लिए एक फॉर्म बनाओ","""<form action='/forgot-password' method='post'>\n    <label>Enter your email:</label>\n    <input type='email' name='email'>\n    <button>Send Reset Link</button>\n</form>"""
"पासवर्ड रीसेट लिंक भेजने के लिए एक Flask रूट","""@app.route('/forgot-password', methods=['POST'])\ndef forgot_password():\n    email = request.form['email']\n    # ... generate reset token and send email ...\n    return 'Reset link sent'"""
"एक नया पासवर्ड सेट करने के लिए एक फॉर्म","""<form action='/reset-password/<token>' method='post'>\n    <input name='new_password' type='password'>\n    <button>Set New Password</button>\n</form>"""
"OAuth (Sign in with Google) का बेसिक फ्लो","""# This is conceptual\n1. User clicks 'Sign in with Google'.\n2. Redirect to Google's consent screen.\n3. User consents, Google redirects back with a code.\n4. Server exchanges code for user info."""
"Flask में gunicorn का उपयोग करने के लिए कमांड","gunicorn -w 4 'app:app'"
"एक बेसिक यूजर मॉडल (SQLAlchemy) का ढाँचा","""from flask_sqlalchemy import SQLAlchemy\ndb = SQLAlchemy(app)\n\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    username = db.Column(db.String(80), unique=True, nullable=False)"""
"Flask-Bcrypt का उपयोग करके पासवर्ड हैश करो","""from flask_bcrypt import Bcrypt\nbcrypt = Bcrypt(app)\n\npw_hash = bcrypt.generate_password_hash('password').decode('utf-8')"""
"Flask-SQLAlchemy का उपयोग करके एक यूज़र को डेटाबेस में जोड़ो","""new_user = User(username='amit')\ndb.session.add(new_user)\ndb.session.commit()"""
"Flask-SQLAlchemy का उपयोग करके एक यूज़र को डेटाबेस से क्वेरी करो","""user = User.query.filter_by(username='amit').first()"""
"एक एडमिन-ओनली रूट बनाओ","""from functools import wraps\ndef admin_required(f):\n    @wraps(f)\n    def decorated_function(*args, **kwargs):\n        if not current_user.is_admin:\n            return 'Forbidden', 403\n        return f(*args, **kwargs)\n    return decorated_function"""
"API रेट लिमिटिंग का एक सिंपल उदाहरण (Flask-Limiter)","""from flask_limiter import Limiter\nlimiter = Limiter(app, default_limits=['200 per day'])\n\n@app.route('/slow')\n@limiter.limit('1 per minute')\ndef slow_route():\n    return 'I am slow'"""
"जावास्क्रिप्ट में लॉगआउट फंक्शन जो टोकन को क्लियर करे","""function logout() {\n    localStorage.removeItem('auth_token');\n    window.location.href = '/login';\n}"""
"एक 'Auth Guard' बनाओ जो पेज एक्सेस को रोके (JS)","""// In JavaScript router\nif (!localStorage.getItem('auth_token')) {\n    // redirect to login\n}"""
"HTTP Basic Auth का एक उदाहरण","""# In Python requests\nimport requests\nrequests.get('https://api.example.com/user', auth=('user', 'pass'))"""
"Flask में HTTP Basic Auth को हैंडल करो","""# Using a library like Flask-HTTPAuth"""
"2-फैक्टर ऑथेंटिकेशन (2FA) का कॉन्सेप्ट","""1. User enters password.\n2. Server sends a code to user's phone/app.\n3. User enters the code to complete login."""
"Pandas का उपयोग करके एक CSV फाइल पढ़ो","import pandas as pd\ndf = pd.read_csv('my_data.csv')"
"एक Pandas DataFrame से 'Name' कॉलम को सिलेक्ट करो","import pandas as pd\n# df = pd.read_csv('my_data.csv')\nnames = df['Name']"
"एक DataFrame को फ़िल्टर करो जहाँ 'Age' 30 से ज़्यादा हो","import pandas as pd\n# df = pd.read_csv('my_data.csv')\nadults = df[df['Age'] > 30]"
"एक DataFrame को एक नई CSV फाइल में सेव करो","import pandas as pd\n# df = ...\ndf.to_csv('output.csv', index=False)"
"एक DataFrame के पहले 5 रिकॉर्ड देखो","import pandas as pd\n# df = ...\nprint(df.head())"
"एक DataFrame के आखिरी 3 रिकॉर्ड देखो","import pandas as pd\n# df = ...\nprint(df.tail(3))"
"एक DataFrame का शेप (rows, columns) पता करो","import pandas as pd\n# df = ...\nprint(df.shape)"
"एक DataFrame के कॉलम्स के नाम पता करो","import pandas as pd\n# df = ...\nprint(df.columns)"
"एक DataFrame के बारे में जानकारी (info) प्रिंट करो","import pandas as pd\n# df = ...\nprint(df.info())"
"एक DataFrame की न्यूमेरिकल कॉलम्स का विवरण (describe) देखो","import pandas as pd\n# df = ...\nprint(df.describe())"
"एक DataFrame को 'Age' कॉलम के आधार पर सॉर्ट करो","import pandas as pd\n# df = ...\nsorted_df = df.sort_values(by='Age')"
"एक DataFrame में एक नया कॉलम जोड़ो","import pandas as pd\n# df = ...\ndf['New_Column'] = 0"
"एक DataFrame से एक कॉलम डिलीट करो","import pandas as pd\n# df = ...\ndf = df.drop('Column_to_delete', axis=1)"
"एक DataFrame में NaN (मिसिंग) वैल्यूज को ढूंढो","import pandas as pd\n# df = ...\nprint(df.isnull().sum())"
"NaN वैल्यूज वाली सभी रो को हटाओ","import pandas as pd\n# df = ...\ncleaned_df = df.dropna()"
"NaN वैल्यूज को 0 से भरो","import pandas as pd\n# df = ...\nfilled_df = df.fillna(0)"
"एक DataFrame को एक कॉलम ('City') के आधार पर ग्रुप करो","import pandas as pd\n# df = ...\ngrouped = df.groupby('City')"
"ग्रुप किए गए डेटा का औसत निकालो","import pandas as pd\n# df = ...\naverage_age_by_city = df.groupby('City')['Age'].mean()"
"एक डिक्शनरी से एक DataFrame बनाओ","import pandas as pd\ndata = {'Name': ['Amit', 'Ria'], 'Age': [25, 22]}\ndf = pd.DataFrame(data)"
"एक DataFrame के एक खास सेल की वैल्यू को एक्सेस करो (iloc)","import pandas as pd\n# df = ...\nvalue = df.iloc[0, 1] # First row, second column"
"एक DataFrame के एक खास सेल की वैल्यू को एक्सेस करो (loc)","import pandas as pd\n# df = ...\nvalue = df.loc[0, 'Name'] # First row, 'Name' column"
"`matplotlib` का उपयोग करके एक सिंपल लाइन प्लॉट बनाओ","import matplotlib.pyplot as plt\nplt.plot([1, 2, 3], [4, 5, 1])\nplt.show()"
"`matplotlib` का उपयोग करके एक बार चार्ट बनाओ","import matplotlib.pyplot as plt\nplt.bar(['A', 'B'], [10, 20])\nplt.show()"
"`matplotlib` का उपयोग करके एक हिस्टोग्राम बनाओ","import matplotlib.pyplot as plt\ndata = [1, 2, 2, 3, 3, 3, 4]\nplt.hist(data)\nplt.show()"
"`matplotlib` का उपयोग करके एक स्कैटर प्लॉट बनाओ","import matplotlib.pyplot as plt\nx=[1,2,3]\ny=[5,7,4]\nplt.scatter(x, y)\nplt.show()"
"एक प्लॉट में टाइटल और लेबल जोड़ो","import matplotlib.pyplot as plt\nplt.plot([1,2],[3,4])\nplt.title('My Plot')\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.show()"
"एक प्लॉट में ग्रिड दिखाओ","import matplotlib.pyplot as plt\nplt.plot([1,2],[3,4])\nplt.grid(True)\nplt.show()"
"दो लाइनों को एक ही प्लॉट पर दिखाओ","import matplotlib.pyplot as plt\nplt.plot([1,2], [1,4], label='Line 1')\nplt.plot([1,2], [3,1], label='Line 2')\nplt.legend()\nplt.show()"
"एक पाई चार्ट बनाओ","import matplotlib.pyplot as plt\nlabels = 'A', 'B', 'C'\nsizes = [15, 30, 45]\nplt.pie(sizes, labels=labels, autopct='%1.1f%%')\nplt.show()"
"एक प्लॉट को एक फाइल में सेव करो","import matplotlib.pyplot as plt\nplt.plot([1,2,3])\nplt.savefig('my_plot.png')"
"एक कॉलम की यूनिक वैल्यूज को काउंट करो","import pandas as pd\n# df = ...\nvalue_counts = df['City'].value_counts()"
"दो DataFrames को मर्ज करो","import pandas as pd\n# df1, df2 = ...\nmerged_df = pd.merge(df1, df2, on='user_id')"
"एक DataFrame में `apply` फंक्शन का उपयोग करो","import pandas as pd\n# df = ...\ndf['Age_double'] = df['Age'].apply(lambda age: age * 2)"
"एक DataFrame को एक्सेल (Excel) फाइल में सेव करो","import pandas as pd\n# df = ...\ndf.to_excel('output.xlsx', index=False)"
"एक एक्सेल फाइल को Pandas में पढ़ो","import pandas as pd\ndf = pd.read_excel('input.xlsx')"
"Seaborn लाइब्रेरी को इम्पोर्ट करो","import seaborn as sns"
"Seaborn का उपयोग करके एक बॉक्स प्लॉट बनाओ","import seaborn as sns\n# df = ...\nsns.boxplot(x='day', y='total_bill', data=df)"
"Seaborn का उपयोग करके एक हीटमैप (heatmap) बनाओ","import seaborn as sns\n# data = ...\nsns.heatmap(data)"
"Seaborn का उपयोग करके एक पेयर प्लॉट (pairplot) बनाओ","import seaborn as sns\n# df = ...\nsns.pairplot(df)"
"एक NumPy एरे बनाओ","import numpy as np\narr = np.array([1, 2, 3])"
"एक 2D NumPy एरे बनाओ","import numpy as np\narr_2d = np.array([[1, 2], [3, 4]])"
"NumPy एरे का शेप पता करो","import numpy as np\narr = np.array([[1,2],[3,4]])\nprint(arr.shape)"
"NumPy में zeros का एक एरे बनाओ","import numpy as np\nzeros_arr = np.zeros((3, 3))"
"NumPy में ones का एक एरे बनाओ","import numpy as np\nones_arr = np.ones((2, 4))"
"NumPy में `arange` का उपयोग करो","import numpy as np\narr = np.arange(10) # Array from 0 to 9"
"NumPy में लीनियर अलजेब्रा ऑपरेशन (डॉट प्रोडक्ट) करो","import numpy as np\na = np.array([1,2])\nb = np.array([3,4])\ndot_product = np.dot(a, b)"
"NumPy एरे का औसत (mean) निकालो","import numpy as np\narr = np.array([1,2,3,4,5])\nprint(np.mean(arr))"
"NumPy एरे का स्टैण्डर्ड डेविएशन (standard deviation) निकालो","import numpy as np\narr = np.array([1,2,3,4,5])\nprint(np.std(arr))"
"एक DataFrame को NumPy एरे में बदलो","import pandas as pd\n# df = ...\nnumpy_array = df.to_numpy()"
"एक जावास्क्रिप्ट प्रॉमिस (Promise) बनाओ जो 1 सेकंड बाद resolve हो","<script>const myPromise = new Promise((resolve, reject) => { setTimeout(() => { resolve('Success!'); }, 1000); });</script>"
"एक प्रॉमिस को `.then()` और `.catch()` से हैंडल करो","<script>const myPromise = new Promise((resolve, reject) => { resolve('Done'); }); myPromise.then(result => console.log(result)).catch(error => console.error(error));</script>"
"एक प्रॉमिस बनाओ जो तुरंत reject हो जाए","<script>const rejectedPromise = new Promise((resolve, reject) => { reject('Failure!'); }); rejectedPromise.catch(error => console.error(error));</script>"
"`async/await` का उपयोग करके एक फंक्शन बनाओ जो डेटा फेच करे","<script>async function fetchData() { try { let response = await fetch('https://jsonplaceholder.typicode.com/todos/1'); let data = await response.json(); console.log(data); } catch (error) { console.error('Could not fetch data:', error); } } fetchData();</script>"
"`async` फंक्शन बनाओ जो एक वैल्यू लौटाए","<script>async function getValue() { return 'Hello Async'; } getValue().then(value => console.log(value));</script>"
"`Promise.all` का उपयोग करके एक साथ कई API कॉल्स करो","<script>Promise.all([fetch('https://jsonplaceholder.typicode.com/posts/1'), fetch('https://jsonplaceholder.typicode.com/posts/2')]).then(responses => Promise.all(responses.map(res => res.json()))).then(data => console.log(data));</script>"
"एक जावास्क्रिप्ट मॉड्यूल से एक फंक्शन एक्सपोर्ट करो","// In math.js file:\nexport function add(a, b) { return a + b; }"
"एक मॉड्यूल से एक फंक्शन इम्पोर्ट करो","// In main.js file:\nimport { add } from './math.js';"
"एक मॉड्यूल से डिफ़ॉल्ट एक्सपोर्ट करो","// In myModule.js:\nexport default function greet() { console.log('Hello'); }"
"एक डिफ़ॉल्ट एक्सपोर्ट को इम्पोर्ट करो","// In main.js:\nimport myGreetingFunction from './myModule.js';"
"`try...catch...finally` ब्लॉक का उपयोग करो","<script>try { console.log('Trying...'); nonExistentFunction(); } catch (e) { console.error('An error occurred:', e.message); } finally { console.log('Finally block runs always.'); }</script>"
"एक कस्टम एरर थ्रो (throw) करो","<script>function checkAge(age) { if (age < 18) { throw new Error('User must be 18 or older to proceed.'); } return true; } try { checkAge(15); } catch (e) { console.error(e.message); }</script>"
"स्प्रेड ऑपरेटर (...) का उपयोग करके दो एरे को मिलाओ","<script>const arr1 = ['a', 'b']; const arr2 = ['c', 'd']; const combinedArray = [...arr1, ...arr2]; console.log(combinedArray);</script>"
"स्प्रेड ऑपरेटर का उपयोग करके एक ऑब्जेक्ट को कॉपी करो","<script>const person = {name: 'Amit', city: 'Lucknow'}; const personCopy = {...person};</script>"
"रेस्ट पैरामीटर (...) का उपयोग करके एक फंक्शन बनाओ","<script>function sum(...numbers) { return numbers.reduce((total, num) => total + num, 0); } console.log(sum(1, 2, 3, 4));</script>"
"ऑब्जेक्ट डीस्ट्रक्चरिंग (Object Destructuring) का उपयोग करो","<script>const person = {name:'Amit', city:'Lucknow'}; const {name, city} = person; console.log(`Name: ${name}, City: ${city}`);</script>"
"एरे डीस्ट्रक्चरिंग (Array Destructuring) का उपयोग करो","<script>const fruits = ['Apple', 'Banana', 'Mango']; const [firstFruit, secondFruit] = fruits; console.log(firstFruit);</script>"
"डीस्ट्रक्चरिंग में एक नया वेरिएबल नाम दो","<script>const person = {name:'Amit'}; const {name: personName} = person; console.log(personName);</script>"
"JSON डेटा को डीस्ट्रक्चर करो","<script>const jsonResponse = '{\""user\"":\""Amit\"", \""posts\"":10}'; const {user, posts} = JSON.parse(jsonResponse);</script>"
"JavaScript `Map` ऑब्जेक्ट बनाओ और उसका उपयोग करो","<script>const myMap = new Map(); myMap.set('key1', 'value1'); myMap.set('key2', 'value2'); console.log(myMap.get('key1'));</script>"
"JavaScript `Set` ऑब्जेक्ट का उपयोग करके डुप्लीकेट हटाओ","<script>const numbers = [1, 2, 2, 3, 4, 3]; const uniqueNumbers = new Set(numbers); console.log(uniqueNumbers);</script>"
"एक ES6 क्लास (class) में एक मेथड बनाओ","<script>class Person { constructor(name){this.name=name;} greet(){return `Hello, my name is ${this.name}`;}} const amit = new Person('Amit'); console.log(amit.greet());</script>"
"क्लास इनहेरिटेंस (Inheritance) का उपयोग करो","<script>class Animal{ speak(){return 'Animal speaks.'} }; class Dog extends Animal { speak(){return 'Woof!'} }; const dog = new Dog(); console.log(dog.speak());</script>"
"क्लास में एक स्टेटिक मेथड बनाओ","<script>class MathHelper { static add(a,b){return a+b;} } console.log(MathHelper.add(5,10));</script>"
"क्लास में गेटर (getter) का उपयोग करो","<script>class Circle { constructor(radius){this.radius=radius;} get diameter(){return this.radius * 2;}} const c = new Circle(10); console.log(c.diameter);</script>"
"क्लास में सेटर (setter) का उपयोग करो","<script>class User { set name(newName){if(newName.length > 2){this._name=newName;}else{console.error('Name too short');}} get name(){return this._name;} } const u = new User(); u.name = 'Amit';</script>"
"JavaScript `Symbol` का उपयोग करके एक यूनिक प्रॉपर्टी बनाओ","<script>const id = Symbol('id'); const user = {name: 'Amit', [id]: 123}; console.log(user[id]);</script>"
"एक जेनरेटर फंक्शन `function*` बनाओ","<script>function* numberGenerator(){ yield 1; yield 2; yield 3; } const gen = numberGenerator(); console.log(gen.next().value);</script>"
"ES6 मॉड्यूल में वाइल्डकार्ड (`*`) इम्पोर्ट करो","// In main.js:\nimport * as mathUtils from './math.js';"
"`fetch` के साथ `POST` रिक्वेस्ट में `headers` भेजो","<script>fetch('/api/data', { method:'POST', headers:{'Content-Type':'application/json'}, body:JSON.stringify({name:'Amit'}) });</script>"
"एक `async` फंक्शन के अंदर एरर को `try...catch` से हैंडल करो","<script>async function fetchData() { try { let response = await fetch('https://invalid-url.xyz'); } catch(error) { console.error('Caught an error!', error); } }</script>"
"`Promise.resolve` का उपयोग करो","<script>Promise.resolve('Instant success message').then(msg => console.log(msg));</script>"
"`Promise.reject` का उपयोग करो","<script>Promise.reject('Instant failure message').catch(err => console.error(err));</script>"
"`Promise.race` का उपयोग करके पता करो कि कौन सा प्रॉमिस पहले पूरा होता है","<script>const p1 = new Promise(resolve => setTimeout(resolve, 500, 'one')); const p2 = new Promise(resolve => setTimeout(resolve, 100, 'two')); Promise.race([p1, p2]).then(value => console.log(value)); // Logs 'two'</script>"
"एक `async` IIFE (Immediately Invoked Function Expression) बनाओ","<script>(async () => { let response = await fetch('https://jsonplaceholder.typicode.com/users/1'); let user = await response.json(); console.log(user.name); })();</script>"
"ऑब्जेक्ट की प्रॉपर्टीज को लूप करने के लिए `Object.keys` का उपयोग करो","<script>const user = {a:1, b:2, c:3}; Object.keys(user).forEach(key => console.log(key, user[key]));</script>"
"डीस्ट्रक्चरिंग में डिफ़ॉल्ट वैल्यू सेट करो","<script>const person = {name: 'Amit'}; const {name, city='Lucknow'} = person; console.log(city);</script>"
"नेस्टेड डीस्ट्रक्चरिंग (Nested Destructuring) करो","<script>const user = {id:1, details:{name:'Amit', role:'dev'}}; const {details: {name}} = user; console.log(name);</script>"
"एक रेगुलर एक्सप्रेशन (RegEx) बनाओ जो ईमेल को मैच करे","<script>const emailRegex = /\\S+@\\S+\\.\\S+/;</script>"
"एक RegEx का उपयोग करके एक स्ट्रिंग को टेस्ट करो","<script>const emailRegex = /\\S+@\\S+\\.\\S+/; console.log(emailRegex.test('test@example.com'));</script>"
"RegEx का उपयोग करके एक स्ट्रिंग से सभी नंबर निकालो","<script>const text = 'My number is 123-456.'; const numbers = text.match(/\\d+/g); console.log(numbers);</script>"
"RegEx का उपयोग करके एक स्ट्रिंग को रिप्लेस करो","<script>const text = 'Hello world'; const newText = text.replace(/world/, 'Amit'); console.log(newText);</script>"
"एक केस-इनसेंसिटिव (case-insensitive) RegEx बनाओ","<script>const text = 'Hello Hello'; const matches = text.match(/hello/gi); console.log(matches.length);</script>"
"एक स्ट्रिंग के शुरू और अंत को मैच करने के लिए RegEx बनाओ","<script>const regex = /^start.*end$/; console.log(regex.test('start middle end'));</script>"
"ऑप्शनल पैरामीटर वाला एक फंक्शन बनाओ","<script>function greet(name, greeting='Hello') { console.log(`${greeting}, ${name}`); }</script>"
"जावास्क्रिप्ट में `console.table` का उपयोग करके डेटा दिखाओ","<script>const users = [{name:'A', age:20},{name:'B', age:25}]; console.table(users);</script>"
"जावास्क्रिप्ट में `console.time` का उपयोग करके परफॉरमेंस को मापो","<script>console.time('myLoop'); for(let i=0; i<10000; i++){} console.timeEnd('myLoop');</script>"
"`...` ऑपरेटर का उपयोग करके एरे से डुप्लीकेट हटाओ","<script>const numbers = [1,2,2,3,4,3]; const unique = [...new Set(numbers)];</script>"
"एक ऑब्जेक्ट को फ्रीज करो ताकि उसे बदला न जा सके","<script>const user = {name: 'Amit'}; Object.freeze(user); user.name = 'Ria'; console.log(user.name);</script>"
"एक सिंपल higher-order फंक्शन बनाओ","<script>function multiplyBy(factor) { return function(number) { return number * factor; } } const double = multiplyBy(2); console.log(double(5));</script>"
"पाइथन में एक लीनियर सर्च (linear search) एल्गोरिथ्म लिखो","def linear_search(arr, target):\n    for i in range(len(arr)):\n        if arr[i] == target:\n            return i\n    return -1"
"पाइथन में एक बाइनरी सर्च (binary search) एल्गोरिथ्म लिखो","def binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"
"पाइथन में एक बबल सॉर्ट (bubble sort) एल्गोरिथ्म लिखो","def bubble_sort(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]"
"पाइथन में एक सिलेक्शन सॉर्ट (selection sort) एल्गोरिथ्म लिखो","def selection_sort(arr):\n    for i in range(len(arr)):\n        min_idx = i\n        for j in range(i+1, len(arr)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]"
"पाइथन में एक इंसर्शन सॉर्ट (insertion sort) एल्गोरिथ्म लिखो","def insertion_sort(arr):\n    for i in range(1, len(arr)):\n        key = arr[i]\n        j = i-1\n        while j >= 0 and key < arr[j]:\n            arr[j+1] = arr[j]\n            j -= 1\n        arr[j+1] = key"
"रिकर्शन (recursion) का उपयोग करके फैक्टोरियल निकालो","def factorial(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * factorial(n-1)"
"रिकर्शन का उपयोग करके फिबोनैची (Fibonacci) सीरीज का Nth नंबर निकालो","def fibonacci(n):\n    if n <= 1:\n        return n\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)"
"पाइथन लिस्ट का उपयोग करके एक स्टैक (stack) डेटा स्ट्रक्चर बनाओ","stack = []\nstack.append('a') # Push\nstack.append('b')\nprint(stack)\nitem = stack.pop() # Pop\nprint(item)"
"`collections.deque` का उपयोग करके एक क्यू (queue) डेटा स्ट्रक्चर बनाओ","from collections import deque\nq = deque()\nq.append('a') # Enqueue\nq.append('b')\nitem = q.popleft() # Dequeue\nprint(item)"
"एक फंक्शन लिखो जो चेक करे कि एक स्ट्रिंग पैलिंड्रोम है या नहीं","def is_palindrome(s):\n    return s == s[::-1]"
"एक स्ट्रिंग को बिना स्लाइसिंग के उल्टा करो","def reverse_string(s):\n    reversed_s = ''\n    for char in s:\n        reversed_s = char + reversed_s\n    return reversed_s"
"N तक के सभी प्राइम नंबर ढूंढने के लिए एक फंक्शन लिखो (Sieve of Eratosthenes)","def find_primes(n):\n    prime = [True for i in range(n+1)]\n    p = 2\n    while (p * p <= n):\n        if (prime[p] == True):\n            for i in range(p * p, n+1, p):\n                prime[i] = False\n        p += 1\n    for p in range(2, n+1):\n        if prime[p]:\n            print(p)"
"पाइथन डिक्शनरी का उपयोग करके एक सिंपल हैश टेबल बनाओ","hash_table = {}\nhash_table['key1'] = 'value1'\nhash_table['key2'] = 'value2'"
"एक लिंक्ड लिस्ट (linked list) के लिए एक नोड क्लास बनाओ","class Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None"
"एक बाइनरी ट्री (binary tree) के लिए एक नोड क्लास बनाओ","class TreeNode:\n    def __init__(self, key):\n        self.left = None\n        self.right = None\n        self.val = key"
"FizzBuzz प्रॉब्लम को हल करने के लिए एक प्रोग्राम लिखो","for i in range(1, 101):\n    if i % 15 == 0:\n        print('FizzBuzz')\n    elif i % 3 == 0:\n        print('Fizz')\n    elif i % 5 == 0:\n        print('Buzz')\n    else:\n        print(i)"
"एक लिस्ट में सबसे ज़्यादा बार आने वाला एलिमेंट ढूंढो","from collections import Counter\ndef most_frequent(my_list):\n    if not my_list: return None\n    return Counter(my_list).most_common(1)[0][0]"
"एक फंक्शन लिखो जो चेक करे कि दो स्ट्रिंग्स एनाग्राम हैं या नहीं","def are_anagrams(s1, s2):\n    return sorted(s1.replace(' ', '').lower()) == sorted(s2.replace(' ', '').lower())"
"Two Sum प्रॉब्लम को हल करो","def two_sum(nums, target):\n    num_map = {}\n    for i, num in enumerate(nums):\n        complement = target - num\n        if complement in num_map:\n            return [num_map[complement], i]\n        num_map[num] = i"
"मर्ज सॉर्ट (merge sort) एल्गोरिथ्म का ढाँचा लिखो","def merge_sort(arr):\n    if len(arr) > 1:\n        mid = len(arr)//2\n        L = arr[:mid]\n        R = arr[mid:]\n        merge_sort(L)\n        merge_sort(R)\n        # ... Merging logic here ..."
"क्विक सॉर्ट (quick sort) एल्गोरिथ्म का ढाँचा लिखो","def quick_sort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[len(arr) // 2]\n    left = [x for x in arr if x < pivot]\n    middle = [x for x in arr if x == pivot]\n    right = [x for x in arr if x > pivot]\n    return quick_sort(left) + middle + quick_sort(right)"
"एक स्ट्रिंग के सभी डुप्लीकेट कैरेक्टर्स को ढूंढो","my_string = 'hello world'\nduplicates = set([char for char in my_string if my_string.count(char) > 1])"
"दो सॉर्टेड लिस्ट्स को मर्ज करो","def merge_sorted_lists(list1, list2):\n    return sorted(list1 + list2)"
"एक लिस्ट के सभी परम्यूटेशन (permutations) जेनरेट करो","import itertools\nmy_list = [1, 2, 3]\npermutations = list(itertools.permutations(my_list))"
"एक ग्राफ डेटा स्ट्रक्चर (adjacency list) का उपयोग करके बनाओ","graph = {\n    'A': ['B', 'C'],\n    'B': ['D'],\n    'C': ['E'],\n    'D': [],\n    'E': []\n}"
"एक ग्राफ में ब्रेथ-फर्स्ट सर्च (BFS) एल्गोरिथ्म लिखो","from collections import deque\ndef bfs(graph, start_node):\n    visited = set()\n    queue = deque([start_node])\n    visited.add(start_node)\n    while queue:\n        node = queue.popleft()\n        print(node)\n        for neighbor in graph[node]:\n            if neighbor not in visited:\n                visited.add(neighbor)\n                queue.append(neighbor)"
"एक ग्राफ में डेप्थ-फर्स्ट सर्च (DFS) एल्गोरिथ्म लिखो","def dfs(graph, start_node, visited=None):\n    if visited is None:\n        visited = set()\n    visited.add(start_node)\n    print(start_node)\n    for neighbor in graph[start_node]:\n        if neighbor not in visited:\n            dfs(graph, neighbor, visited)"
"मेमोइज़ेशन (memoization) का उपयोग करके फिबोनैची को ऑप्टिमाइज़ करो","memo = {}\ndef fib_memo(n):\n    if n in memo: return memo[n]\n    if n <= 1: return n\n    memo[n] = fib_memo(n-1) + fib_memo(n-2)\n    return memo[n]"
"एक नंबर का ग्रेटेस्ट कॉमन डिवाइजर (GCD) निकालो","import math\ngcd = math.gcd(60, 48)"
"एक फंक्शन लिखो जो मिसिंग नंबर को एक सीरीज से ढूंढे","def find_missing(numbers):\n    n = len(numbers) + 1\n    total_sum = n * (n + 1) // 2\n    return total_sum - sum(numbers)"
"एक बाइनरी सर्च ट्री (BST) में एक नोड इंसर्ट करो","class Node:\n    # ... (init)\n\ndef insert(root, key):\n    if root is None:\n        return Node(key)\n    else:\n        if root.val < key:\n            root.right = insert(root.right, key)\n        else:\n            root.left = insert(root.left, key)\n    return root"
"डाइक्स्ट्रा (Dijkstra's) एल्गोरिथ्म का ढाँचा लिखो","import heapq\ndef dijkstra(graph, start):\n    distances = {node: float('infinity') for node in graph}\n    # ... algorithm logic ..."
"एक स्ट्रिंग के शब्दों को उल्टा करो","sentence = 'hello world'\nwords = sentence.split()\nreversed_sentence = ' '.join(reversed(words))"
"एक वाक्य में सबसे लंबा शब्द ढूंढो","def longest_word(sentence):\n    return max(sentence.split(), key=len)"
"एक नंबर आर्मस्ट्रांग नंबर है या नहीं, यह चेक करो","def is_armstrong(num):\n    order = len(str(num))\n    sum = 0\n    temp = num\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** order\n        temp //= 10\n    return num == sum"
"एक कैशिंग (caching) डेकोरेटर बनाओ","from functools import lru_cache\n\n@lru_cache(maxsize=None)\ndef expensive_function(n):\n    # ... heavy calculation ..."
"एक प्रायोरिटी क्यू (Priority Queue) बनाओ","import heapq\npq = []\nheapq.heappush(pq, (2, 'task1'))\nheapq.heappush(pq, (1, 'task2'))"
"एक मैट्रिक्स को ट्रांसपोज (transpose) करो","matrix = [[1, 2], [3, 4]]\ntransposed = list(zip(*matrix))"
"सभी डुप्लीकेट कैरेक्टर्स को एक स्ट्रिंग से हटाओ","my_string = 'hello'\nresult = ''.join(sorted(set(my_string), key=my_string.index))"
"एक सिंपल ग्रीडी एल्गोरिथ्म का उदाहरण (सिक्के बदलना)","def coin_change(coins, amount):\n    # ... greedy algorithm logic ..."
"ब्रूट-फोर्स एल्गोरिथ्म का एक उदाहरण (पासवर्ड क्रैकिंग)","import itertools\nchars = 'abc'\nfor length in range(1, 4):\n    for guess in itertools.product(chars, repeat=length):\n        print(''.join(guess))"
"एक Trie डेटा स्ट्रक्चर का नोड बनाओ","class TrieNode:\n    def __init__(self):\n        self.children = {}\n        self.is_end_of_word = False"
"एक 'Hello World' वेब सर्वर Flask और Gunicorn के साथ बनाओ","""# app.py\nfrom flask import Flask\napp = Flask(__name__)\n@app.route('/')\ndef hello(): return 'Hello'\n\n# Terminal command:\ngunicorn --bind 0.0.0.0:8000 app:app"""
"एक deque का उपयोग करके आखिरी N आइटम्स को रखो","from collections import deque\nlast_five = deque(maxlen=5)\nfor i in range(10):\n    last_five.append(i)"
"एक लिस्ट को रोटेट करो","my_list = [1, 2, 3, 4]\nrotated_list = my_list[2:] + my_list[:2]"
"यह चेक करो कि एक नंबर परफेक्ट स्क्वायर है या नहीं","import math\ndef is_perfect_square(n):\n    if n < 0: return False\n    sqrt_n = int(math.sqrt(n))\n    return sqrt_n * sqrt_n == n"
"टावर्स ऑफ हनोई (Towers of Hanoi) प्रॉब्लम को हल करो","def towers_of_hanoi(n, source, destination, auxiliary):\n    if n == 1:\n        print(f'Move disk 1 from {source} to {destination}')\n        return\n    towers_of_hanoi(n-1, source, auxiliary, destination)\n    print(f'Move disk {n} from {source} to {destination}')\n    towers_of_hanoi(n-1, auxiliary, destination, source)"
"एक स्ट्रिंग के कैरेक्टर्स की फ्रीक्वेंसी काउंट करो","my_string = 'hello'\nfrequency = {char: my_string.count(char) for char in set(my_string)}"
"`localStorage` में यूज़र का नाम सेव करो","<script>localStorage.setItem('username', 'Amit');</script>"
"`localStorage` से यूज़र का नाम प्राप्त करो","<script>let username = localStorage.getItem('username'); if(username) { alert('Welcome back, ' + username); }</script>"
"`localStorage` से एक आइटम हटाओ","<script>localStorage.removeItem('username');</script>"
"`localStorage` को पूरी तरह से क्लियर करो","<script>localStorage.clear();</script>"
"`sessionStorage` में एक अस्थायी (temporary) वैल्यू सेव करो","<script>sessionStorage.setItem('session_id', 'xyz-123-abc');</script>"
"`sessionStorage` से एक वैल्यू प्राप्त करो","<script>let sessionId = sessionStorage.getItem('session_id');</script>"
"लोकल स्टोरेज में एक ऑब्जेक्ट को JSON के रूप में सेव करो","<script>const user = {name: 'Amit', loggedIn: true}; localStorage.setItem('user_data', JSON.stringify(user));</script>"
"लोकल स्टोरेज से एक JSON ऑब्जेक्ट को पढ़ो","<script>const userData = JSON.parse(localStorage.getItem('user_data')); console.log(userData.name);</script>"
"यूज़र की जियोलोकेशन (latitude, longitude) प्राप्त करो","<button onclick=""navigator.geolocation.getCurrentPosition(position => alert('Latitude: ' + position.coords.latitude));"">Get My Location</button>"
"जियोलोकेशन एरर को हैंडल करो","<script>navigator.geolocation.getCurrentPosition(successCallback, errorCallback); function errorCallback(error) { console.error('Error getting location:', error.message); }</script>"
"यूज़र की लोकेशन को लगातार ट्रैक करो (watchPosition)","<script>const watchId = navigator.geolocation.watchPosition(pos => console.log('New position:', pos.coords));</script>"
"वेब शेयर API का उपयोग करके कंटेंट शेयर करो","<button onclick=""if(navigator.share){ navigator.share({ title: 'My Awesome Page', text: 'Check this out!', url: window.location.href }); }"">Share this Page</button>"
"`navigator.onLine` का उपयोग करके ऑनलाइन/ऑफलाइन स्टेटस चेक करो","<p>Current Status: <span id='status'></span></p><script>document.getElementById('status').innerText = navigator.onLine ? 'Online' : 'Offline';</script>"
"यूज़र का ब्राउज़र एजेंट (user agent) पता करो","<script>console.log('User Agent:', navigator.userAgent);</script>"
"यूज़र का ऑपरेटिंग सिस्टम (platform) पता करो","<script>alert('Your platform is: ' + navigator.platform);</script>"
"टेक्स्ट को बुलवाने के लिए (Text-to-Speech) एक बटन बनाओ","<input id='textSpeech' value='Hello from Gemini'><button onclick=""let msg = new SpeechSynthesisUtterance(document.getElementById('textSpeech').value); window.speechSynthesis.speak(msg);"">Speak Text</button>"
"`history.pushState` का उपयोग करके बिना रीलोड किए URL बदलो","<button onclick=""history.pushState({page: 2}, 'Page 2', '/page2.html')"">Change URL to /page2</button>"
"ब्राउज़र के बैक/फॉरवर्ड बटन को डिटेक्ट करो (`popstate` event)","<script>window.addEventListener('popstate', function(event) { console.log('Navigated to:', location.href, 'state:', event.state); });</script>"
"ब्राउज़र हिस्ट्री में एक पेज वापस जाने के लिए बटन","<button onclick='history.back()'>Go Back</button>"
"ब्राउज़र हिस्ट्री में एक पेज आगे जाने के लिए बटन","<button onclick='history.forward()'>Go Forward</button>"
"एक 200x100 का कैनवास (canvas) बनाओ","<canvas id='myCanvas' width='200' height='100' style='border:1px solid #000;'></canvas>"
"कैनवास पर एक सीधी लाल लाइन खींचो","<canvas id='c1' width='200' height='100'></canvas><script>var ctx = document.getElementById('c1').getContext('2d'); ctx.moveTo(10,10); ctx.lineTo(190,90); ctx.strokeStyle='red'; ctx.stroke();</script>"
"कैनवास पर एक भरा हुआ आयत (rectangle) बनाओ","<canvas id='c2' width='200'></canvas><script>var ctx = document.getElementById('c2').getContext('2d'); ctx.fillStyle='blue'; ctx.fillRect(20, 20, 150, 80);</script>"
"कैनवास पर एक सर्किल बनाओ","<canvas id='c3' width='200'></canvas><script>var ctx = document.getElementById('c3').getContext('2d'); ctx.beginPath(); ctx.arc(100, 50, 40, 0, 2 * Math.PI); ctx.stroke();</script>"
"कैनवास पर टेक्स्ट लिखो","<canvas id='c4' width='200'></canvas><script>var ctx = document.getElementById('c4').getContext('2d'); ctx.font = '30px Arial'; ctx.fillText('Hello World', 10, 50);</script>"
"HTML5 `draggable` एट्रिब्यूट का उपयोग करके एक एलिमेंट को ड्रैग करने योग्य बनाओ","<p draggable='true' style='border:1px solid; padding:5px; width:100px;'>Drag Me</p>"
"ड्रैग एंड ड्रॉप के लिए एक ड्रॉप ज़ोन बनाओ","<div ondrop='drop(event)' ondragover='allowDrop(event)' style='border:2px dashed #ccc; height:100px; padding:10px;'>Drop files here</div><script>function allowDrop(ev){ev.preventDefault();} function drop(ev){ev.preventDefault(); var data = ev.dataTransfer.getData('text'); ev.target.appendChild(document.getElementById(data));}</script>"
"मोबाइल को 500 मिलीसेकंड के लिए वाइब्रेट करो","<button onclick=""navigator.vibrate(500)"">Vibrate</button>"
"Page Visibility API का उपयोग करके चेक करो कि टैब एक्टिव है या नहीं","<script>document.addEventListener('visibilitychange', () => { if(document.visibilityState === 'visible') { console.log('Tab is active'); } else { console.log('Tab is inactive'); } });</script>"
"एक एलिमेंट को फुलस्क्रीन करने के लिए बटन बनाओ","<div id='fullscreenElement' style='background:lightblue; padding:20px;'><h1>Fullscreen Content</h1></div><button onclick=""document.getElementById('fullscreenElement').requestFullscreen()"">Go Fullscreen</button>"
"एक सिंपल नोटिफिकेशन भेजो (Notification API)","<button onclick=""Notification.requestPermission().then(perm => { if (perm === 'granted') { new Notification('Hello!'); } })"">Show Notification</button>"
"क्लिपबोर्ड पर टेक्स्ट कॉपी करने का एक फंक्शन","<button onclick=""navigator.clipboard.writeText('Text to copy').then(() => alert('Copied!'))"">Copy 'Text to copy'</button>"
"क्लिपबोर्ड से टेक्स्ट पेस्ट करने का एक फंक्शन","<input id='pasteTarget'><button onclick=""navigator.clipboard.readText().then(text => document.getElementById('pasteTarget').value = text)"">Paste</button>"
"बैटरी स्टेटस API का उपयोग करके बैटरी लेवल पता करो","<script>navigator.getBattery().then(battery => console.log(`Battery level: ${battery.level * 100}%`));</script>"
"यूज़र के नेटवर्क कनेक्शन का प्रकार पता करो","<script>alert('Connection type: ' + navigator.connection.type);</script>"
"एक वेब वर्कर (Web Worker) का बेसिक सेटअप","// worker.js: postMessage('Hello from worker');\n// main.js: const myWorker = new Worker('worker.js');"
"एक `MutationObserver` बनाओ जो DOM बदलावों को डिटेक्ट करे","<div id='observeMe'></div><script>const observer = new MutationObserver(mutations => console.log(mutations)); observer.observe(document.getElementById('observeMe'), {childList: true});</script>"
"पेज का टाइटल डायनामिक रूप से बदलो","<button onclick=""document.title = 'New Title!'"">Change Title</button>"
"जावास्क्रिप्ट से पेज को रीलोड करो","<button onclick='location.reload()'>Reload</button>"
"जावास्क्रिप्ट से एक नई ब्राउज़र विंडो खोलो","<button onclick=""window.open('https://google.com', 'newWindow', 'width=600,height=400')"">Open Google</button>"
"पेज लोड होने पर यूज़र से प्रिंट डायलॉग खोलने के लिए पूछो","<body onload='window.print()'></body>"
"`window.matchMedia` का उपयोग करके चेक करो कि स्क्रीन डार्क मोड में है या नहीं","<script>if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) { console.log('Dark mode is enabled'); }</script>"
"Fetch API में `AbortController` का उपयोग करके रिक्वेस्ट को कैंसिल करो","<script>const controller = new AbortController(); const signal = controller.signal; setTimeout(() => controller.abort(), 100); fetch('...', {signal}).catch(err => console.log(err.name));</script>"
"`performance.now()` का उपयोग करके कोड के परफॉरमेंस को मापो","<script>const startTime = performance.now(); for(let i=0; i<10000; i++){} const endTime = performance.now(); console.log(`Loop took ${endTime - startTime} milliseconds.`);</script>"
"वेबकैम को एक्सेस करने के लिए `getUserMedia` का उपयोग करो","<video id='video' autoplay></video><script>navigator.mediaDevices.getUserMedia({ video: true }).then(stream => document.getElementById('video').srcObject = stream);</script>"
"कैनवास से इमेज डेटा URL प्राप्त करो","<canvas id='c5'></canvas><script>var ctx=document.getElementById('c5').getContext('2d'); ctx.fillText('Hi',10,10); var dataURL = document.getElementById('c5').toDataURL();</script>"
"एक खाली बूँद (blob) बनाओ","<script>const myBlob = new Blob();</script>"
"कैनवास पर एक ग्रेडिएंट बनाओ","<canvas id='c6'></canvas><script>var ctx=document.getElementById('c6').getContext('2d'); var gradient=ctx.createLinearGradient(0,0,200,0); gradient.addColorStop(0,'red'); gradient.addColorStop(1,'blue'); ctx.fillStyle=gradient; ctx.fillRect(10,10,150,80);</script>"
"जावास्क्रिप्ट में कुकी को डिलीट करो","<script>document.cookie = 'username=; expires=Thu, 01 Jan 1970 00:00:00 GMT;';</script>"
"एक लाइट/डार्क मोड टॉगल बटन बनाओ","<style>body.dark-mode{background:#121212; color:white;}</style><button onclick=""document.body.classList.toggle('dark-mode')"">Toggle Dark/Light Mode</button><p>Some text</p>"
"एक 'Copy to Clipboard' बटन बनाओ","<input id='copyText' value='This is the text to copy'><button onclick=""document.getElementById('copyText').select(); document.execCommand('copy'); alert('Text Copied!')"">Copy Text</button>"
"एक 5-स्टार रेटिंग कॉम्पोनेन्ट बनाओ","<style>.stars span{cursor:pointer; font-size:24px; color:grey;}.stars span:hover, .stars span:hover ~ .stars span {color:orange;}</style><div class='stars'><span>★</span><span>★</span><span>★</span><span>★</span><span>★</span></div>"
"एक डायनामिक प्रोग्रेस बार बनाओ जो बटन क्लिक पर 100% हो जाए","<div style='width:100%; background-color:#ddd; border-radius:5px;'><div id='progressBar' style='width:10%; height:20px; background-color:green; border-radius:5px; transition:width 0.5s;'></div></div><button onclick=""document.getElementById('progressBar').style.width='100%'"">Complete Progress</button>"
"एक अकॉर्डियन बनाओ जो क्लिक करने पर कंटेंट दिखाए/छिपाए","<style>.accordion-panel{display:none; padding:10px; border-top:1px solid #ccc;}</style><button onclick=""var panel = this.nextElementSibling; panel.style.display = panel.style.display === 'block' ? 'none' : 'block';"">Section 1</button><div class='accordion-panel'><p>Hidden text for section 1.</p></div>"
"एक मोडल (popup) बॉक्स बनाओ","<style>.modal{display:none; position:fixed; z-index:1; left:0; top:0; width:100%; height:100%; overflow:auto; background-color:rgba(0,0,0,0.4);}.modal-content{background-color:#fefefe; margin:15% auto; padding:20px; border:1px solid #888; width:80%;}</style><button onclick=""document.getElementById('myModal').style.display='block'"">Open Modal</button><div id='myModal' class='modal'><div class='modal-content'><span onclick=""document.getElementById('myModal').style.display='none'"" style='float:right; cursor:pointer;'>&times;</span><p>This is a modal.</p></div></div>"
"एक टैब वाला इंटरफ़ेस बनाओ","<style>.tabcontent{display:none;}</style><div><button onclick=""openTab('Tab1')"">Tab 1</button><button onclick=""openTab('Tab2')"">Tab 2</button></div><div id='Tab1' class='tabcontent'>Content 1</div><div id='Tab2' class='tabcontent'>Content 2</div><script>function openTab(tabName){ var i, tabs; tabs = document.getElementsByClassName('tabcontent'); for(i=0;i<tabs.length;i++){tabs[i].style.display='none';} document.getElementById(tabName).style.display='block';}</script>"
"एक लिस्ट को फ़िल्टर करने के लिए एक सर्च बार बनाओ","<input id='searchInput' onkeyup='filterList()' placeholder='Search...'><ul id='filterUL'><li>Apple</li><li>Banana</li><li>Orange</li></ul><script>function filterList(){ var input, filter, ul, li, a, i, txtValue; input=document.getElementById('searchInput'); filter=input.value.toUpperCase(); ul=document.getElementById('filterUL'); li=ul.getElementsByTagName('li'); for(i=0; i<li.length; i++){ txtValue = li[i].textContent || li[i].innerText; if(txtValue.toUpperCase().indexOf(filter) > -1){li[i].style.display='';}else{li[i].style.display='none';}}}</script>"
"एक 'Scroll to Top' बटन बनाओ जो पेज स्क्रॉल होने पर दिखे","<style>#scrollTopBtn{display:none; position:fixed; bottom:20px; right:20px; z-index:99;}</style><button id='scrollTopBtn' onclick=""window.scrollTo({top: 0, behavior: 'smooth'});"">Top</button><div style='height:1000px'>Scroll down</div><script>window.onscroll = function() {scrollFunction()}; function scrollFunction(){if(document.body.scrollTop > 20 || document.documentElement.scrollTop > 20){document.getElementById('scrollTopBtn').style.display='block';}else{document.getElementById('scrollTopBtn').style.display='none';}}</script>"
"एक पासवर्ड स्ट्रेंथ इंडिकेटर बनाओ","<label>Password:</label><input type='password' oninput=""var strength = 'Weak'; if(this.value.length > 8) strength = 'Strong'; document.getElementById('pass-strength').innerText = strength;""><p>Strength: <span id='pass-strength'></span></p>"
"एक टेक्स्टएरिया बनाओ जो रियल-टाइम में कैरेक्टर काउंट दिखाए","<textarea oninput=""document.getElementById('char-count').innerText = this.value.length;""></textarea><p>Characters typed: <span id='char-count'>0</span></p>"
"एक स्नैकबार (toast) नोटिफिकेशन बनाओ","<style>#snackbar{visibility:hidden; min-width:250px; background-color:#333; color:#fff; text-align:center; border-radius:2px; padding:16px; position:fixed; z-index:1; left:50%; bottom:30px; transform: translateX(-50%);}</style><button onclick=""var x = document.getElementById('snackbar'); x.style.visibility = 'visible'; setTimeout(function(){ x.style.visibility = 'hidden'; }, 3000);"">Show Toast</button><div id='snackbar'>This is a notification!</div>"
"एक बटन बनाओ जो फॉर्म सबमिट होने पर डिसेबल हो जाए","<form onsubmit=""document.getElementById('sbmBtn').disabled=true; document.getElementById('sbmBtn').innerText='Submitting...'; return false;""><button id='sbmBtn' type='submit'>Submit</button></form>"
"एक सिंपल ऑटोमेटिक इमेज स्लाइडर बनाओ","<img id='slider' src='img1.jpg' width='300' height='200'><script>const myImages=['img1.jpg', 'img2.jpg', 'img3.jpg']; let currentIndex=0; setInterval(() => { currentIndex = (currentIndex + 1) % myImages.length; document.getElementById('slider').src = myImages[currentIndex]; }, 2000);</script>"
"एक ड्रैग करने योग्य (draggable) div बनाओ","<div id='dragElement' style='position:absolute; width:50px; height:50px; background:blue; cursor:move;'></div><script>dragElement(document.getElementById('dragElement')); function dragElement(elmnt){...}</script>"
"एक पासवर्ड फील्ड बनाओ जिसमें पासवर्ड को दिखाने/छिपाने का विकल्प हो","<input id='myPassword' type='password' value='MySecret'><input type='checkbox' onclick=""document.getElementById('myPassword').type = this.checked ? 'text' : 'password';""> Show Password"
"एक डिजिटल क्लॉक बनाओ जो हर सेकंड अपडेट हो","<div id='digitalClock' style='font-size:24px; font-family:monospace;'></div><script>setInterval(() => document.getElementById('digitalClock').innerText = new Date().toLocaleTimeString(), 1000);</script>"
"पेजिनेशन के लिए एक UI कॉम्पोनेन्ट बनाओ","<style>.pagination a{padding:8px 16px; text-decoration:none; color:black; border:1px solid #ddd;}.pagination a.active{background-color:#4CAF50; color:white;}</style><div class='pagination'><a href='#'>&laquo; Prev</a><a href='#'>1</a><a href='#' class='active'>2</a><a href='#'>3</a><a href='#'>Next &raquo;</a></div>"
"एक before/after इमेज स्लाइडर का UI बनाओ","<div style='position:relative; width:300px; height:200px;'><img src='image_before.jpg' width='300' height='200'><div style='position:absolute; top:0; left:0; width:50%; height:100%; overflow:hidden; border-right:2px solid white;'><img src='image_after.jpg' width='300' height='200'></div></div>"
"एक कलर पिकर बनाओ जो चुने हुए रंग से पेज का बैकग्राउंड बदल दे","<label>Change page background:</label><input type='color' value='#FFFFFF' oninput=""document.body.style.backgroundColor=this.value;"">"
"एक टेक्स्ट का फॉन्ट साइज़ बदलने के लिए स्लाइडर बनाओ","<p id='resizeText' style='font-size:16px;'>Adjust my size</p><input type='range' min='10' max='50' value='16' oninput=""document.getElementById('resizeText').style.fontSize = this.value + 'px'"">"
"एक सिंपल क्विज बनाओ जो सही या गलत जवाब का फीडबैक दे","<h4>What is 5 + 5?</h4><button onclick=""alert('Correct!')"">10</button> <button onclick=""alert('Wrong!')"">12</button>"
"एक स्टॉपवॉच का बेसिक UI बनाओ","<h2 style='font-family:monospace;'>00:00:00</h2><button>Start</button><button>Stop</button><button>Reset</button>"
"एक लाइव वेलकम मैसेज बनाओ जो टाइप करते ही अपडेट हो","<label>Enter your name:</label><input onkeyup=""document.getElementById('welcomeText').innerText = 'Welcome, ' + this.value""><h3 id='welcomeText'></h3>"
"एक बटन बनाओ जो 1 से 6 के बीच एक रैंडम नंबर (जैसे डाइस रोल) दिखाए","<p>Dice Roll: <span id='diceRoll' style='font-size:24px;'>0</span></p><button onclick=""document.getElementById('diceRoll').innerText = Math.floor(Math.random() * 6) + 1"">Roll Dice</button>"
"एक वर्ड काउंटर टूल बनाओ","<textarea oninput=""document.getElementById('wordCounter').innerText = this.value.trim() === '' ? 0 : this.value.trim().split(/\s+/).length;"" rows='4'></textarea><p>Word Count: <span id='wordCounter'>0</span></p>"
"एक टेक्स्ट-टू-अपरकेस कनवर्टर बनाओ","<label>Type here:</label><input oninput=""this.value=this.value.toUpperCase()"" placeholder='Text will be capitalized'>"
"10 से 0 तक का एक सिंपल काउंटडाउन टाइमर शुरू करने के लिए बटन","<h2 id='countdownTimer'>10</h2><button onclick=""var count=10; var interval=setInterval(()=>{count--; document.getElementById('countdownTimer').innerText=count; if(count<=0) clearInterval(interval);}, 1000);"">Start Countdown</button>"
"एक 'स्टिकी नोट' बनाओ जो टेक्स्ट को ब्राउज़र की मेमोरी में सेव करे","<h3>My Sticky Note:</h3><textarea oninput=""localStorage.setItem('my_note', this.value);"" style='width:200px; height:100px;'></textarea><script>document.querySelector('textarea').value = localStorage.getItem('my_note');</script>"
"एक बेसिक BMI कैलकुलेटर बनाओ","<input id='height_m' placeholder='Height (m)'><input id='weight_kg' placeholder='Weight (kg)'><button onclick=""var h=document.getElementById('height_m').value; var w=document.getElementById('weight_kg').value; document.getElementById('bmi_result').innerText = (w/(h*h)).toFixed(2);"">Calculate BMI</button><p>Your BMI: <span id='bmi_result'></span></p>"
"सेल्सियस को फारेनहाइट में बदलने वाला कनवर्टर बनाओ","<input type='number' placeholder='Celsius' oninput=""document.getElementById('fahrenheit_val').innerText = (this.value * 9/5) + 32;""><p>Fahrenheit: <span id='fahrenheit_val'></span></p>"
"एक रैंडम कोट (quote) जेनरेटर बनाओ","<p id='quoteDisplay' style='font-style:italic;'>Click the button for a quote.</p><script>const myQuotes=['Quote 1','Quote 2','Quote 3'];</script><button onclick=""document.getElementById('quoteDisplay').innerText = myQuotes[Math.floor(Math.random() * myQuotes.length)];"">New Quote</button>"
"एक स्क्रॉल प्रोग्रेस बार बनाओ","<div style='position:fixed;top:0;left:0;height:5px;background:green;width:0%;' id='scrollProgressBar'></div><div style='height:2000px; padding:20px;'><h1>Scroll down...</h1></div><script>window.onscroll=function(){var winScroll=document.body.scrollTop||document.documentElement.scrollTop;var height=document.documentElement.scrollHeight-document.documentElement.clientHeight;var scrolled=(winScroll/height)*100;document.getElementById('scrollProgressBar').style.width=scrolled+'%';};</script>"
"पेज की भाषा बदलने के लिए एक ड्रॉपडाउन बनाओ","<select onchange=""alert('Language changed to ' + this.value)""><option value='en'>English</option><option value='hi'>Hindi</option></select>"
"एक हॉरिजॉन्टल स्क्रॉलिंग मेन्यू बनाओ","<style>.scroll-menu{display:flex; overflow-x:auto;}.scroll-menu a{padding:10px; text-decoration:none;}</style><div class='scroll-menu'><a href='#'>Link 1</a><a href='#'>Link 2</a><a href='#'>Link 3</a>...</div>"
"एक कस्टम टूलटिप बनाओ","<style>.tooltip-container{position:relative;}.tooltip-text{visibility:hidden;...}.tooltip-container:hover .tooltip-text{visibility:visible;}</style><div class='tooltip-container'>Hover me<span class='tooltip-text'>Tooltip!</span></div>"
"एक 'Read More' लिंक बनाओ जो टेक्स्ट को दिखाए/छिपाए","<p>Short text... <span id='moreText' style='display:none;'>more text here.</span></p><button onclick=""var dots = this.previousElementSibling.querySelector('span'); dots.style.display = 'inline'; this.style.display='none';"">Read More</button>"
"एक ऑडियो के लिए प्ले और पॉज बटन बनाओ","<audio id='my_audio' src='song.mp3'></audio><button onclick=""document.getElementById('my_audio').play()"">Play</button><button onclick=""document.getElementById('my_audio').pause()"">Pause</button>"
"एक डायनामिक टेबल बनाओ जो जावास्क्रिप्ट एरे से बनती हो","<table id='dynamicTable' border='1'></table><script>const data=[{name:'A', age:20}]; let table=document.getElementById('dynamicTable'); data.forEach(item=>{let row=table.insertRow(); row.insertCell(0).innerHTML=item.name;});</script>"
"एक सिंपल पोल (poll) कॉम्पोनेन्ट बनाओ","<h3>Favorite Language?</h3><p><button onclick=""alert('Voted JS!')"">JavaScript</button></p><p><button onclick=""alert('Voted Python!')"">Python</button></p>"
"एक क्रेडिट कार्ड इनपुट का UI बनाओ","<div><label>Card Number:</label><input placeholder='0000 0000 0000 0000'>...</div>"
"एक सिंपल प्राइसिंग टेबल बनाओ","<div style='display:flex;'><div style='border:1px solid; padding:10px;'><h3>Basic</h3><p>$10</p></div><div style='border:1px solid; padding:10px;'><h3>Pro</h3><p>$25</p></div></div>"
"एक कुकी कंसेंट बैनर बनाओ","<div id='cookieBanner' style='position:fixed; bottom:0; width:100%; background:#333; color:white; padding:10px;'>This site uses cookies. <button onclick=""this.parentElement.style.display='none'"">Accept</button></div>"
"पेज को प्रिंट करने के लिए एक बटन बनाओ","<button onclick='window.print()'>Print Page</button>"
"एक टेक्स्ट को बोलने के लिए (Text-to-Speech) बटन बनाओ","<input id='textToSpeak' value='Hello'><button onclick=""var msg=new SpeechSynthesisUtterance(document.getElementById('textToSpeak').value); window.speechSynthesis.speak(msg);"">Speak</button>"
"एक स्टेप-बाय-स्टेप प्रोग्रेस इंडिकेटर (stepper) बनाओ","<style>.step{display:inline-block; width:30px; height:30px; border-radius:50%; background:grey; color:white; text-align:center;}.step.active{background:blue;}</style><div class='step active'>1</div><div class='step'>2</div><div class='step'>3</div>"
"एक ब्रेडक्रंब (breadcrumb) नेविगेशन बनाओ","<div><a href='#'>Home</a> &gt; <a href='#'>Library</a> &gt; <span>Data</span></div>"
"एक वीडियो के लिए कस्टम प्ले/पॉज बटन बनाओ","<video id='myVideo' width='300'>...</video><button onclick=""document.getElementById('myVideo').play()"">Play</button>"
"एक डायनामिक CSS वेरिएबल बनाओ जिसे जावास्क्रिप्ट से कंट्रोल किया जा सके","<style>:root{--box-color: blue;}</style><div style='width:50px; height:50px; background:var(--box-color);'></div><button onclick=""document.documentElement.style.setProperty('--box-color', 'red')"">Change Color</button>"
"एक पाइथन स्क्रिप्ट बनाओ जो कमांड-लाइन से एक नाम ले और उसे ग्रीट करे","import sys\nif len(sys.argv) > 1:\n    name = sys.argv[1]\n    print(f'Hello, {name}')\nelse:\n    print('Hello, Guest')"
"एक कमांड-लाइन कैलकुलेटर बनाओ जो दो नंबरों को जोड़े","import sys\nnum1 = int(sys.argv[1])\nnum2 = int(sys.argv[2])\nresult = num1 + num2\nprint(f'The sum is: {result}')"
"`argparse` मॉड्यूल को इम्पोर्ट करो","import argparse"
"`argparse` का उपयोग करके एक सिंपल कमांड-लाइन टूल बनाओ","import argparse\nparser = argparse.ArgumentParser(description='A simple CLI tool.')\nparser.parse_args()"
"argparse में एक पोजीशनल आर्गुमेंट 'name' जोड़ो","import argparse\nparser = argparse.ArgumentParser()\nparser.add_argument('name', help='The name to greet')\nargs = parser.parse_args()\nprint(f'Hello, {args.name}')"
"argparse में एक ऑप्शनल आर्गुमेंट '--verbose' जोड़ो","import argparse\nparser = argparse.ArgumentParser()\nparser.add_argument('-v', '--verbose', help='Enable verbose mode', action='store_true')\nargs = parser.parse_args()\nif args.verbose:\n    print('Verbose mode is on.')"
"argparse में एक इंटीजर टाइप का आर्गुमेंट जोड़ो","import argparse\nparser = argparse.ArgumentParser()\nparser.add_argument('number', type=int, help='A number to double')\nargs = parser.parse_args()\nprint(f'Double of {args.number} is {args.number * 2}')"
"एक पाइथन स्क्रिप्ट बनाओ जो एक फाइल में लाइनों, शब्दों और कैरेक्टर्स की गिनती करे","import sys\nfilename = sys.argv[1]\nlines = 0\nwords = 0\nchars = 0\nwith open(filename, 'r') as f:\n    for line in f:\n        lines += 1\n        words += len(line.split())\n        chars += len(line)\nprint(f'Lines: {lines}, Words: {words}, Characters: {chars}')"
"पाइथन से एक सिंपल HTTP सर्वर शुरू करो","import http.server\nimport socketserver\n\nPORT = 8000\nHandler = http.server.SimpleHTTPRequestHandler\n\nwith socketserver.TCPServer(('', PORT), Handler) as httpd:\n    print('Serving at port', PORT)\n    httpd.serve_forever()"
"एक फोल्डर की सभी '.jpg' फाइलों को '.jpeg' में रीनेम करो","import os\nfor filename in os.listdir('.'):\n    if filename.endswith('.jpg'):\n        base = os.path.splitext(filename)[0]\n        os.rename(filename, base + '.jpeg')"
"एक स्क्रिप्ट बनाओ जो एक डायरेक्टरी में 1MB से बड़ी सभी फाइलों को ढूंढे","import os\nfor filename in os.listdir('.'):\n    if os.path.isfile(filename):\n        if os.path.getsize(filename) > 1024 * 1024:\n            print(f'{filename} is larger than 1 MB')"
"एक CSV फाइल को JSON में बदलने के लिए एक स्क्रिप्ट लिखो","import csv\nimport json\n\ncsv_file_path = 'data.csv'\njson_file_path = 'data.json'\n\ndata = []\nwith open(csv_file_path, 'r') as f:\n    csv_reader = csv.DictReader(f)\n    for row in csv_reader:\n        data.append(row)\n\nwith open(json_file_path, 'w') as f:\n    json.dump(data, f, indent=4)"
"पाइथन में `logging` मॉड्यूल का उपयोग करके लॉगिंग करो","import logging\nlogging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')\nlogging.info('This is an informational message.')\nlogging.warning('This is a warning message.')"
"लॉग्स को एक फाइल में लिखो","import logging\nlogging.basicConfig(filename='app.log', filemode='w', format='%(name)s - %(levelname)s - %(message)s')\nlogging.warning('This will get logged to a file')"
"`subprocess` मॉड्यूल का उपयोग करके एक शेल कमांड चलाओ","import subprocess\nsubprocess.run(['ls', '-l'])"
"एक फोल्डर को ज़िप (zip) करने के लिए एक स्क्रिप्ट लिखो","import shutil\nshutil.make_archive('output_archive', 'zip', 'folder_to_zip')"
"एक ज़िप फाइल को अनज़िप करो","import shutil\nshutil.unpack_archive('archive.zip', 'destination_folder')"
"पाइथन से एक सिंपल ईमेल भेजो (smtplib)","import smtplib\nserver = smtplib.SMTP('smtp.gmail.com', 587)\n# ...further configuration needed..."
"पाइथन में एक एनवायरनमेंट वेरिएबल को पढ़ो","import os\napi_key = os.environ.get('MY_API_KEY')"
"argparse और requests का उपयोग करके एक वेब स्क्रैपर बनाओ","import argparse\nimport requests\nparser = argparse.ArgumentParser()\nparser.add_argument('url', help='URL to fetch')\nargs = parser.parse_args()\ntry:\n    response = requests.get(args.url)\n    print(f'Status Code: {response.status_code}')\nexcept requests.exceptions.RequestException as e:\n    print(f'Error: {e}')"
"एक डायरेक्टरी ट्री को वॉक (walk) करो","import os\nfor dirpath, dirnames, filenames in os.walk('.'):\n    print(f'Found directory: {dirpath}')\n    for file_name in filenames:\n        print(f'\\t{file_name}')"
"एक टेक्स्ट फाइल में एक शब्द को दूसरे से बदलो","with open('file.txt', 'r') as f:\n    content = f.read()\n\nnew_content = content.replace('old_word', 'new_word')\n\nwith open('file.txt', 'w') as f:\n    f.write(new_content)"
"एक डायरेक्टरी के सभी डुप्लीकेट फाइलों को ढूंढो (hash का उपयोग करके)","import hashlib, os\nduplicates = {}\nfor dirpath, _, filenames in os.walk('.'):\n    for filename in filenames:\n        filepath = os.path.join(dirpath, filename)\n        file_hash = hashlib.md5(open(filepath, 'rb').read()).hexdigest()\n        # ... logic to find duplicates ..."
"argparse में शॉर्ट ऑप्शन (-o) और लॉन्ग ऑप्शन (--output) दोनों बनाओ","import argparse\nparser = argparse.ArgumentParser()\nparser.add_argument('-o', '--output', help='Specify output file')"
"एक पासवर्ड जेनरेटर कमांड-लाइन टूल बनाओ","import random, string, argparse\nparser = argparse.ArgumentParser()\nparser.add_argument('length', type=int)\nargs = parser.parse_args()\nchars = string.ascii_letters + string.digits\npassword = ''.join(random.choice(chars) for _ in range(args.length))\nprint(password)"
"एक JSON फाइल को pretty-print करने के लिए एक स्क्रिप्ट","import json\nwith open('data.json', 'r') as f:\n    data = json.load(f)\nprint(json.dumps(data, indent=4, sort_keys=True))"
"एक फाइल को हिस्सों (chunks) में पढ़ो","with open('large_file.bin', 'rb') as f:\n    while chunk := f.read(4096):\n        # process chunk"
"`platform` मॉड्यूल का उपयोग करके ऑपरेटिंग सिस्टम की जानकारी प्राप्त करो","import platform\nprint(platform.system())"
"`pickle` का उपयोग करके एक पाइथन ऑब्जेक्ट को सेव करो","import pickle\nmy_dict = {'a': 1}\nwith open('data.pkl', 'wb') as f:\n    pickle.dump(my_dict, f)"
"`pickle` का उपयोग करके एक पाइथन ऑब्जेक्ट को लोड करो","import pickle\nwith open('data.pkl', 'rb') as f:\n    my_dict = pickle.load(f)"
"`getpass` का उपयोग करके यूज़र से सुरक्षित रूप से पासवर्ड पूछो","import getpass\ntry:\n    password = getpass.getpass()\nexcept Exception as error:\n    print('ERROR', error)"
"पाइथन स्क्रिप्ट को 10 सेकंड के लिए रोको (sleep)","import time\nprint('Start')\ntime.sleep(10)\nprint('End')"
"एक स्क्रिप्ट के एक्सीक्यूशन समय को मापो","import time\nstart_time = time.time()\n# ... your code ...\nend_time = time.time()\nprint(f'Execution took {end_time - start_time} seconds')"
"एक सिंपल API सर्वर बनाओ जो FastAPI का उपयोग करे","from fastapi import FastAPI\napp = FastAPI()\n@app.get('/')\ndef read_root():\n    return {'Hello': 'World'}"
"पाइथन में एक SQLite डेटाबेस से कनेक्ट करो","import sqlite3\nconn = sqlite3.connect('example.db')"
"SQLite डेटाबेस में एक टेबल बनाओ","import sqlite3\nconn = sqlite3.connect('example.db')\nc = conn.cursor()\nc.execute('''CREATE TABLE stocks (date text, symbol text)''')\nconn.commit()\nconn.close()"
"SQLite टेबल में डेटा इंसर्ट करो","import sqlite3\nconn = sqlite3.connect('example.db')\nc = conn.cursor()\nc.execute('''INSERT INTO stocks VALUES ('2025-10-07','MSFT')''')\nconn.commit()\nconn.close()"
"SQLite टेबल से डेटा सिलेक्ट करो","import sqlite3\nconn = sqlite3.connect('example.db')\nc = conn.cursor()\nfor row in c.execute('SELECT * FROM stocks'):\n    print(row)"
"एक Temporary Directory बनाओ","import tempfile\nwith tempfile.TemporaryDirectory() as tmpdirname:\n    print('created temporary directory', tmpdirname)"
"एक टेक्स्ट फाइल की आखिरी N लाइनों को पढ़ो","def read_last_n_lines(filename, n):\n    with open(filename, 'r') as f:\n        return f.readlines()[-n:]"
"एक URL से एक फाइल डाउनलोड करो और प्रोग्रेस बार दिखाओ (tqdm)","from tqdm import tqdm\nimport requests\n# ... code to download with progress bar ..."
"एक सिंपल कमांड-लाइन To-Do ऐप बनाओ","import sys\n# ... code for a simple CLI to-do app ..."
"`configparser` का उपयोग करके एक कॉन्फ़िगरेशन फाइल पढ़ो","import configparser\nconfig = configparser.ConfigParser()\nconfig.read('config.ini')"
"एक स्क्रिप्ट बनाओ जो अपने आप को बैकग्राउंड में चलाए (daemonize)","import os\n# ... code for daemonizing a process ..."
"पाइथन में मल्टीथ्रेडिंग का एक बेसिक उदाहरण","import threading\ndef worker():\n    print('Worker')\n\nt = threading.Thread(target=worker)\nt.start()"
"पाइथन में मल्टीप्रोसेसिंग का एक बेसिक उदाहरण","import multiprocessing\ndef worker():\n    print('Worker')\n\np = multiprocessing.Process(target=worker)\np.start()"
"एक क्यू (Queue) का उपयोग करके थ्रेड्स के बीच डेटा शेयर करो","import queue, threading\nq = queue.Queue()\ndef worker():\n    item = q.get()\n    # ... process item\n\nt = threading.Thread(target=worker)\nt.start()\nq.put('hello')"
"एक पाइथन स्क्रिप्ट को एग्जीक्यूटेबल (executable) बनाओ (pyinstaller)","pyinstaller your_script.py"
"पाइथन से एक वेब ब्राउज़र खोलो","import webbrowser\nwebbrowser.open('https://google.com')"
"Flask API बनाओ जो यूजर्स की एक लिस्ट लौटाए","""# In app.py:\nfrom flask import jsonify\n@app.route('/api/users')\ndef get_users():\n    users = [{'id': 1, 'name': 'Amit'}, {'id': 2, 'name': 'Ria'}]\n    return jsonify(users)"""
"जावास्क्रिप्ट से यूजर्स की लिस्ट फेच करो और उसे एक ul में दिखाओ","""\n<ul id='users-list'></ul>\n<script>\nfetch('/api/users').then(res => res.json()).then(data => {\n    const userList = document.getElementById('users-list');\n    data.forEach(user => {\n        userList.innerHTML += `<li>${user.name}</li>`;\n    });\n});\n</script>"""
"एक डायनामिक Flask रूट बनाओ जो यूजर आईडी के आधार पर प्रोफाइल लौटाए","""# In app.py:\nfrom flask import jsonify\nusers_db = {1: {'name':'Amit'}, 2:{'name':'Ria'}}\n@app.route('/api/user/<int:user_id>')\ndef get_user_by_id(user_id):\n    user = users_db.get(user_id, {'error': 'User not found'})\n    return jsonify(user)"""
"जावास्क्रिप्ट से एक खास यूजर का प्रोफाइल फेच करो","""\n<script>\nfetch('/api/user/1').then(res => res.json()).then(data => console.log(data.name));\n</script>"""
"AJAX का उपयोग करके एक JSON ऑब्जेक्ट के रूप में फॉर्म डेटा POST करो","""\n<script>\ndocument.getElementById('myForm').addEventListener('submit', function(e) {\n    e.preventDefault();\n    const data = { username: 'testuser' };\n    fetch('/api/register', { \n        method: 'POST', \n        headers: {'Content-Type': 'application/json'},\n        body: JSON.stringify(data)\n    });\n});\n</script>"""
"Flask में एक JSON POST रिक्वेस्ट को हैंडल करो","""# In app.py:\nfrom flask import request, jsonify\n@app.route('/api/register', methods=['POST'])\ndef register_user():\n    data = request.json\n    username = data.get('username')\n    # ... save user to database ...\n    return jsonify({'status': 'success', 'registered_user': username})"""
"फॉर्म सबमिट करने के बाद सर्वर से मिले जवाब को पेज पर दिखाओ","""\n<p id='response-message'></p>\n<script>\n//... fetch POST call in submit event ...\n.then(res => res.json()).then(data => {\n    document.getElementById('response-message').innerText = `User ${data.registered_user} registered!`;\n});\n</script>"""
"Jinja2 टेम्पलेट में एक डिक्शनरी से डेटा दिखाओ","""\n<h2>User Profile</h2>\n<p>Name: {{ user.name }}</p>\n<p>City: {{ user.city }}</p>"""
"Flask से टेम्पलेट में एक डिक्शनरी पास करो","""# In app.py:\nfrom flask import render_template\n@app.route('/user-profile')\ndef user_profile_page():\n    user_data = {'name': 'Amit Saka', 'city': 'Lucknow'}\n    return render_template('profile.html', user=user_data)"""
"Jinja2 में एक लेआउट टेम्पलेट को एक्सटेंड करो","""\n{% extends 'base.html' %}\n{% block content %}\n<h1>This is the page content.</h1>\n{% endblock %}"""
"Jinja2 के लिए एक 'base.html' लेआउट बनाओ","""\n<!DOCTYPE html>\n<html>\n<head><title>My Site</title></head>\n<body>\n    <nav>...</nav>\n    {% block content %}{% endblock %}\n    <footer>...</footer>\n</body>\n</html>"""
"एक सिंपल लॉगइन API बनाओ जो यूजरनेम और पासवर्ड चेक करे","""# In app.py:\nfrom flask import request, jsonify\n@app.route('/api/login', methods=['POST'])\ndef login_api():\n    data = request.json\n    if data.get('username') == 'admin' and data.get('password') == '1234':\n        return jsonify({'status': 'success', 'token': 'fake_token_123'})\n    return jsonify({'status': 'error', 'message': 'Invalid credentials'}), 401"""
"एक लाइव सर्च के लिए Flask API बनाओ","""# In app.py:\nfrom flask import request, jsonify\nitems = ['Apple', 'Avocado', 'Banana', 'Apricot']\n@app.route('/api/search')\ndef search_api():\n    query = request.args.get('q', '').lower()\n    results = [item for item in items if query in item.lower()]\n    return jsonify(results)"""
"एक इनपुट फील्ड बनाओ जो टाइप करते ही लाइव सर्च API को कॉल करे","""\n<input type='text' onkeyup=""fetch('/api/search?q='+this.value).then(res=>res.json()).then(data => {\n    const resultsList = document.getElementById('results');\n    resultsList.innerHTML = '';\n    data.forEach(item => { resultsList.innerHTML += `<li>${item}</li>`; });\n});"">\n<ul id='results'></ul>"""
"सभी To-Do आइटम्स को लौटाने वाला एक Flask API बनाओ","""# In app.py:\nfrom flask import jsonify\ntodos = ['Learn HTML', 'Learn CSS', 'Learn JavaScript']\n@app.route('/api/todos')\ndef get_todos():\n    return jsonify(todos)"""
"पेज लोड होने पर सभी To-Do आइटम्स को फेच करने के लिए जावास्क्रिप्ट लिखो","""\n<ul id='todo-list'></ul>\n<script>\nwindow.onload = () => {\n    fetch('/api/todos').then(res => res.json()).then(data => {\n        const list = document.getElementById('todo-list');\n        data.forEach(item => { list.innerHTML += `<li>${item}</li>`; });\n    });\n}\n</script>"""
"To-Do लिस्ट में नया आइटम जोड़ने वाला एक Flask API","""# In app.py:\nfrom flask import request, jsonify\n@app.route('/api/add_todo', methods=['POST'])\ndef add_todo_api():\n    new_item = request.json.get('item')\n    if new_item:\n        todos.append(new_item)\n    return jsonify(todos)"""
"To-Do लिस्ट में नया आइटम जोड़ने के लिए जावास्क्रिप्ट कोड","""\n<input id='todo-input'><button onclick=""fetch('/api/add_todo', {method:'POST', headers:{'Content-Type':'application/json'}, body:JSON.stringify({item: document.getElementById('todo-input').value})})"">Add</button>"""
"Flask से एक इमेज फाइल सर्व करो","""# In app.py:\nfrom flask import send_from_directory\n@app.route('/images/<filename>')\ndef serve_image(filename):\n    return send_from_directory('static/images', filename)"""
"Jinja2 टेम्पलेट में Flask द्वारा सर्व की गई इमेज को दिखाओ","""\n<img src=""{{ url_for('serve_image', filename='logo.png') }}"">"""
"Flask में एक यूज़र को दूसरे पेज पर रीडायरेक्ट करो","""# In app.py:\nfrom flask import redirect, url_for\n@app.route('/old-url')\ndef old_url():\n    return redirect(url_for('new_url_function'))"""
"पैरामीटर लेने वाली एक पाइथन API बनाओ","""# In app.py:\nfrom flask import request, jsonify\n@app.route('/api/product')\ndef get_product():\n    product_id = request.args.get('id', '0')\n    return jsonify({'product_id': product_id})"""
"पैरामीटर के साथ जावास्क्रिप्ट से API को कॉल करो","""\n<script>fetch('/api/product?id=123').then(res => res.json()).then(data => console.log(data.product_id));</script>"""
"Jinja2 में टेम्पलेट फ़िल्टर का उपयोग करो (जैसे `upper`)","""\n<p>{{ name|upper }}</p>"""
"Flask में एक डायनामिक इमेज जनरेटर का ढाँचा","""# In app.py:\nfrom PIL import Image, ImageDraw\nfrom flask import Response\n@app.route('/image.png')\ndef generate_image():\n    img = Image.new('RGB', (100, 30), color='red')\n    # ... serve image buffer ..."""
"Flask में एक लॉगआउट रूट बनाओ जो सेशन को क्लियर करे","""# In app.py:\nfrom flask import session, redirect, url_for\napp.secret_key = 'your_secret_key'\n@app.route('/logout')\ndef logout():\n    session.pop('username', None)\n    return redirect(url_for('index'))"""
"HTML फाइल अपलोड फॉर्म","""\n<form action='/upload' method='post' enctype='multipart/form-data'>\n  <input type='file' name='file'>\n  <input type='submit' value='Upload'>\n</form>"""
"Flask में एक फाइल अपलोड हैंडलर बनाओ","""# In app.py:\nfrom flask import request\nfrom werkzeug.utils import secure_filename\n@app.route('/upload', methods=['POST'])\ndef upload_file():\n    if 'file' in request.files:\n        f = request.files['file']\n        f.save(secure_filename(f.filename))\n        return 'File uploaded successfully'\n    return 'No file part'"""
"Flask में कुकी (cookie) सेट करो","""# In app.py:\nfrom flask import make_response\n@app.route('/set-cookie')\ndef set_cookie():\n    resp = make_response('Setting a cookie')\n    resp.set_cookie('user', 'amit')\n    return resp"""
"Flask में कुकी पढ़ो","""# In app.py:\nfrom flask import request\n@app.route('/get-cookie')\ndef get_cookie():\n    username = request.cookies.get('user')\n    return f'Username from cookie is {username}'"""
"Flask में सेशन (session) का उपयोग करो","""# In app.py:\nfrom flask import Flask, session\napp = Flask(__name__)\napp.secret_key = 'a_secret_key'\n@app.route('/set-session')\ndef set_session():\n    session['logged_in'] = True\n    return 'Session set'"""
"Flask में एक 404 एरर हैंडलर बनाओ","""# In app.py:\nfrom flask import render_template\n@app.errorhandler(404)\ndef page_not_found(error):\n    return render_template('404.html'), 404"""
"एक फुल-स्टैक 'लाइक' बटन का बैकएंड","""# In app.py:\nfrom flask import jsonify\nlikes = 0\n@app.route('/api/like', methods=['POST'])\ndef like_post():\n    global likes\n    likes += 1\n    return jsonify({'likes': likes})"""
"एक 'लाइक' बटन का फ्रंटएंड","""\n<p>Likes: <span id='like-count'>0</span></p>\n<button onclick=""fetch('/api/like', {method:'POST'}).then(res=>res.json()).then(data=>document.getElementById('like-count').innerText=data.likes)"">👍 Like</button>"""
"बैकग्राउंड में चलने वाले टास्क के लिए एक पाइथन स्क्रिप्ट","""# In tasks.py:\nimport time\ndef long_running_task():\n    time.sleep(10)\n    print('Task finished!')"""
"एक पाइथन वेबस्क्रैपर का ढाँचा जो BeautifulSoup का उपयोग करे","""import requests\nfrom bs4 import BeautifulSoup\nURL = 'http://example.com'\npage = requests.get(URL)\nsoup = BeautifulSoup(page.content, 'html.parser')"""
"एक पाइथन स्क्रिप्ट जो एक टेक्स्ट फाइल की लाइनों को गिने","""line_count = 0\nwith open('my_file.txt', 'r') as f:\n    for line in f:\n        line_count += 1\nprint(f'The file has {line_count} lines.')"""
"HTML में एक SVG आइकन का उपयोग करो","""<svg width='100' height='100'><circle cx='50' cy='50' r='40' stroke='black' stroke-width='3' fill='red' /></svg>"""
"एक Flask API बनाओ जो डेटाबेस से डेटा लाए (स्यूडो-कोड)","""# In app.py:\n@app.route('/users/<int:id>')\ndef get_user_from_db(id):\n    # user = Database.get_user(id)\n    user = {'id': id, 'name': 'Dummy User'}\n    return jsonify(user)"""
"एक API बनाओ जो एक JSON फाइल से डेटा लौटाए","""# In app.py:\nimport json\n@app.route('/api/products')\ndef get_products():\n    with open('products.json', 'r') as f:\n        products = json.load(f)\n    return jsonify(products)"""
"एक HTML पेज बनाओ जो वेबसॉकेट (WebSocket) से कनेक्ट हो","""\n<script>\n    const socket = new WebSocket('ws://localhost:8080');\n    socket.onmessage = function(event) {\n        console.log('Message from server:', event.data);\n    };\n</script>"""
"एक सिंपल पाइथन वेबसॉकेट सर्वर का ढाँचा","""import asyncio\nimport websockets\n\nasync def handler(websocket):\n    async for message in websocket:\n        print(f'Received: {message}')\n\nasync def main():\n    async with websockets.serve(handler, 'localhost', 8080):\n        await asyncio.Future() # run forever"""
"HTML में सर्वर-सेंट इवेंट्स (Server-Sent Events) का उपयोग करो","""\n<script>\n    const evtSource = new EventSource('/stream');\n    evtSource.onmessage = function(event) {\n        console.log('New data:', event.data);\n    };\n</script>"""
"Flask में सर्वर-सेंट इवेंट्स (SSE) का एक स्ट्रीम बनाओ","""# In app.py:\nfrom flask import Response\nimport time\n@app.route('/stream')\ndef stream():\n    def event_stream():\n        while True:\n            time.sleep(1)\n            yield 'data: Hello\\n\\n'\n    return Response(event_stream(), mimetype='text/event-stream')"""
"Jinja2 में URL पैरामीटर को एक्सेस करो","""\n<p>Welcome, {{ request.args.get('name') }}!</p>"""
"Flask में एक डायनामिक sitemap.xml जनरेट करो","""# In app.py:\nfrom flask import render_template\n@app.route('/sitemap.xml')\ndef sitemap():\n    # ... get pages from database ...\n    return render_template('sitemap.xml', pages=pages)"""
"पाइथन `Pillow` का उपयोग करके एक इमेज पर टेक्स्ट लिखो","""from PIL import Image, ImageDraw\nimg = Image.new('RGB', (200, 50), color='white')\nd = ImageDraw.Draw(img)\nd.text((10,10), 'Hello World', fill='black')\nimg.save('text_image.png')"""
"एक API बनाओ जो यूज़र के IP एड्रेस को लौटाए","""# In app.py:\nfrom flask import request, jsonify\n@app.route('/api/ip')\ndef get_ip():\n    return jsonify({'ip': request.remote_addr})"""
"Pandas का उपयोग करके एक CSV फाइल पढ़ो","import pandas as pd\ndf = pd.read_csv('my_data.csv')"
"एक Pandas DataFrame से 'Name' कॉलम को सिलेक्ट करो","import pandas as pd\n# df = pd.read_csv('my_data.csv')\nnames = df['Name']"
"एक DataFrame को फ़िल्टर करो जहाँ 'Age' 30 से ज़्यादा हो","import pandas as pd\n# df = pd.read_csv('my_data.csv')\nadults = df[df['Age'] > 30]"
"एक DataFrame को एक नई CSV फाइल में सेव करो","import pandas as pd\n# df = ...\ndf.to_csv('output.csv', index=False)"
"पाइथन में एक JSON फाइल का कंटेंट पढ़ो","import json\nwith open('data.json', 'r') as f:\n    data = json.load(f)"
"एक पाइथन डिक्शनरी को एक JSON फाइल में लिखो","import json\ndata = {'name': 'Amit', 'city': 'Lucknow'}\nwith open('user.json', 'w') as f:\n    json.dump(data, f, indent=4)"
"`os` मॉड्यूल का उपयोग करके चेक करो कि एक फाइल मौजूद है या नहीं","import os\nif os.path.exists('myfile.txt'):\n    print('File exists.')"
"एक फाइल का साइज़ (बाइट्स में) पता करो","import os\nsize_in_bytes = os.path.getsize('myfile.txt')"
"एक नई डायरेक्टरी 'images' बनाओ","import os\nif not os.path.exists('images'):\n    os.mkdir('images')"
"एक फाइल का नाम 'old.txt' से 'new.txt' बदलो","import os\nos.rename('old.txt', 'new.txt')"
"एक फाइल को डिलीट करो","import os\nos.remove('file_to_delete.txt')"
"`datetime` का उपयोग करके आज की तारीख प्राप्त करो","import datetime\ntoday = datetime.date.today()"
"एक डेट ऑब्जेक्ट को 'DD-MM-YYYY' फॉर्मेट में दिखाओ","import datetime\ntoday = datetime.date.today()\nprint(today.strftime('%d-%m-%Y'))"
"दो तारीखों के बीच का अंतर (दिनों में) निकालो","from datetime import date\ndate1 = date(2025, 1, 1)\ndate2 = date(2026, 1, 1)\ndifference = date2 - date1\nprint(f'{difference.days} days')"
"`requests` का उपयोग करके एक फॉर्म डेटा POST करो","import requests\npayload = {'key1': 'value1', 'key2': 'value2'}\nresponse = requests.post('https://httpbin.org/post', data=payload)"
"`requests` में कस्टम हेडर्स भेजो","import requests\nheaders = {'User-Agent': 'my-app/1.0.0'}\nresponse = requests.get('https://httpbin.org/headers', headers=headers)"
"`requests` का उपयोग करके एक इमेज डाउनलोड करो","import requests\nresponse = requests.get('https://via.placeholder.com/150')\nwith open('image.png', 'wb') as f:\n    f.write(response.content)"
"`shutil` का उपयोग करके एक फाइल को कॉपी करो","import shutil\nshutil.copyfile('source.txt', 'destination.txt')"
"`shutil` का उपयोग करके एक फाइल को दूसरी डायरेक्टरी में मूव करो","import shutil\nshutil.move('source.txt', 'new_folder/source.txt')"
"`glob` का उपयोग करके वर्तमान डायरेक्टरी में सभी `.txt` फाइलों को ढूंढो","import glob\ntxt_files = glob.glob('*.txt')"
"एक लिस्ट को सेट में बदलकर डुप्लीकेट्स हटाओ","my_list = [1, 2, 2, 3, 4, 3]\nunique_items = list(set(my_list))"
"एक डिक्शनरी की keys पर लूप चलाओ","my_dict = {'a': 1, 'b': 2, 'c': 3}\nfor key in my_dict.keys():\n    print(key)"
"नंबरों की एक लिस्ट को आरोही क्रम में सॉर्ट करो","numbers = [4, 1, 8, 3, 5]\nnumbers.sort()"
"`sorted()` फंक्शन का उपयोग करके एक नई सॉर्टेड लिस्ट बनाओ","numbers = [4, 1, 8, 3, 5]\nsorted_numbers = sorted(numbers)"
"डिक्शनरी की एक लिस्ट को 'age' के आधार पर सॉर्ट करो","people = [{'name': 'Amit', 'age': 30}, {'name': 'Ria', 'age': 20}]\npeople.sort(key=lambda person: person['age'])"
"एक लिस्ट के सभी आइटम्स का योग करो","numbers = [1, 2, 3, 4, 5]\ntotal = sum(numbers)"
"एक लिस्ट में सबसे छोटा और सबसे बड़ा नंबर ढूंढो","numbers = [10, 4, 88, 2]\nmin_num = min(numbers)\nmax_num = max(numbers)"
"एक स्ट्रिंग को कैरेक्टर्स की लिस्ट में बदलो","my_string = 'hello'\nchar_list = list(my_string)"
"एक लिस्ट में किसी आइटम का इंडेक्स पता करो","fruits = ['apple', 'banana', 'cherry']\nindex = fruits.index('banana')"
"एक 2D लिस्ट (मैट्रिक्स) बनाओ","matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]"
"एक 2D लिस्ट के एक एलिमेंट को एक्सेस करो","matrix = [[1, 2], [3, 4]]\nelement = matrix[0][1] # Will be 2"
"`zip` का उपयोग करके दो लिस्ट्स को एक साथ जोड़ो","names = ['Amit', 'Ria']\nages = [25, 22]\nfor name, age in zip(names, ages):\n    print(f'{name} is {age}')"
"`sys` मॉड्यूल से कमांड-लाइन आर्गुमेंट्स एक्सेस करो","import sys\n# In terminal: python script.py arg1 arg2\nfirst_arg = sys.argv[1]"
"`random` मॉड्यूल का उपयोग करके एक रैंडम इंटीजर जेनरेट करो","import random\nrandom_number = random.randint(1, 100)"
"`random` मॉड्यूल का उपयोग करके एक लिस्ट से एक रैंडम आइटम चुनो","import random\nmy_list = ['a', 'b', 'c']\nrandom_choice = random.choice(my_list)"
"एक फाइल के अस्तित्व को चेक करके उसे सुरक्षित रूप से डिलीट करो","import os\nif os.path.exists('file.txt'):\n    os.remove('file.txt')"
"वर्तमान समय को एक ख़ास फॉर्मेट में प्रिंट करो","import time\nprint(time.strftime('%Y-%m-%d %H:%M:%S'))"
"एक डिक्शनरी से `.get()` का उपयोग करके सुरक्षित रूप से वैल्यू निकालो","my_dict = {'a': 1}\nvalue = my_dict.get('b', 0) # 'b' नहीं है, तो 0 लौटाएगा"
"एक लिस्ट से `.pop()` का उपयोग करके आखिरी आइटम निकालो","my_list = [1, 2, 3]\nlast_item = my_list.pop()"
"पाइथन में एक टर्नेरी ऑपरेटर का उपयोग करो","age = 20\nstatus = 'adult' if age >= 18 else 'minor'"
"एक स्ट्रिंग में `in` कीवर्ड का उपयोग करके सबस्ट्रिंग खोजो","if 'hello' in 'hello world':\n    print('Found')"
"एक फंक्शन को दूसरे फंक्शन के अंदर डिफाइन करो (नेस्टेड फंक्शन)","def outer():\n    def inner():\n        print('Inner function')\n    inner()"
"पाइथन में `pass` स्टेटमेंट का उपयोग करो","def my_empty_function():\n    pass # To be implemented later"
"एक डिक्शनरी की दो डिक्शनरी को मर्ज करो","dict1 = {'a': 1}\ndict2 = {'b': 2}\nmerged_dict = {**dict1, **dict2}"
"`collections.Counter` का उपयोग करके एक लिस्ट में आइटम्स की गिनती करो","from collections import Counter\nmy_list = ['a', 'b', 'a', 'c', 'b', 'a']\ncounts = Counter(my_list)"
"एक `deque` ऑब्जेक्ट बनाओ","from collections import deque\nd = deque(['a', 'b', 'c'])"
"एक रेगुलर एक्सप्रेशन का उपयोग करके एक ईमेल को वैलिडेट करो","import re\nemail_regex = r'\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b'\nre.match(email_regex, 'test@example.com')"
"एक JSON स्ट्रिंग को pretty-print करो","import json\ndata = {'name':'Amit','skills':['Python','JS']}\nprint(json.dumps(data, indent=4, sort_keys=True))"
"एक फंक्शन बनाओ जो एक जेनरेटर `yield` का उपयोग करे","def number_generator(n):\n    for i in range(n):\n        yield i"

"एक div को हॉरिजॉन्टली और वर्टिकली सेंटर करने के लिए फ्लेक्सबॉक्स का उपयोग करो","<div style='display:flex; justify-content:center; align-items:center; height:100px; border:1px solid;'>Centered Item</div>"
"CSS `transform-origin` का उपयोग करके रोटेशन का केंद्र बदलो","<style>.origin-box:hover{transform:rotate(45deg);}</style><div class='origin-box' style='width:50px; height:50px; background:coral; transform-origin:top left; transition:transform 0.5s;'></div>"
"CSS से एक टियर-ऑफ (tear-off) पेपर इफ़ेक्ट बनाओ","<style>.paper{position:relative; background:#fff; box-shadow:0 1px 4px rgba(0,0,0,0.3); padding:20px;}.paper::after{content:''; position:absolute; bottom:-10px; left:5%; width:90%; height:10px; box-shadow:0 5px 5px rgba(0,0,0,0.3); transform:rotate(-3deg); z-index:-1;}</style><div class='paper'>Paper Effect</div>"
"`caret-color` का उपयोग करके टेक्स्ट इनपुट के कर्सर का रंग बदलो","<input style='caret-color:red; border:1px solid;' placeholder='Cursor here is red'>"
"CSS `column-count` का उपयोग करके टेक्स्ट को कई कॉलम में बांटो","<div style='column-count:3; column-gap:20px; column-rule: 1px solid #ccc; padding:10px;'>This long text will be split into three columns. It makes reading easier for large blocks of text, similar to a newspaper layout which is very readable.</div>"
"CSS से एक चेकरबोर्ड (checkerboard) पैटर्न बनाओ","<div style='width:100px; height:100px; background-image: conic-gradient(#fff 90deg, #ccc 90deg 180deg, #fff 180deg 270deg, #ccc 270deg); background-size: 50px 50px;'></div>"
":not() स्यूडो-क्लास का उपयोग करके एक एलिमेंट को छोड़कर बाकी सबको स्टाइल करो","<style>p:not(.special){color:grey;}</style><p>Grey text.</p><p class='special'>Special text (not grey).</p><p>Grey text again.</p>"
"चेकबॉक्स के चेक्ड होने पर एक लेबल का टेक्स्ट बदलो","<style>.check-label{color:red; transition:color 0.3s;}.checker:checked + .check-label{color:green;}</style><input type='checkbox' class='checker' id='mycheck'><label for='mycheck' class='check-label'>Status</label>"
"CSS `all` प्रॉपर्टी का उपयोग करके सभी स्टाइल रीसेट करो","<style>.reset-all{all:initial; font-family:monospace; font-size:16px;}</style><button class='reset-all' style='color:red; border:2px solid blue;'>Reset Button</button>"
"एक div बनाओ जिसके कोने अलग-अलग रेडियस के हों","<div style='width:100px; height:100px; background:coral; border-radius: 10px 40px 10px 40px;'></div>"
"CSS `shape-outside` का उपयोग करके टेक्स्ट को एक सर्किल के चारों ओर रैप करो","<style>.shape{width:100px; height:100px; float:left; shape-outside:circle(50%); clip-path:circle(50%); background:lightblue;}</style><div class='shape'></div><p>This long text will wrap around the circular shape that has been floated to the left. This allows for more interesting and magazine-like layouts on the web.</p>"
"एक 3D फ्लिप कार्ड एनीमेशन बनाओ","<style>.card{perspective:1000px; width:150px; height:100px;}.card-inner{position:relative; width:100%; height:100%; transform-style:preserve-3d; transition:transform 0.6s;}.card:hover .card-inner{transform:rotateY(180deg);}.front, .back{position:absolute; width:100%; height:100%;}</style><div class='card'><div class='card-inner'><div class='front' style='background:lightblue;'>Front</div><div class='back' style='background:lightcoral; transform:rotateY(180deg);'>Back</div></div></div>"
"एनीमेशन से टेक्स्ट का रंग बदलो (रेनबो इफ़ेक्ट)","<style>@keyframes rainbow-text{0%{color:red;} 25%{color:orange;} 50%{color:green;} 75%{color:blue;} 100%{color:purple;}} h1.rainbow{animation:rainbow-text 5s infinite alternate;}</style><h1 class='rainbow'>Rainbow Text</h1>"
"CSS `mix-blend-mode` का उपयोग करो","<style>.blend-container{position:relative;}.blend-text{position:absolute; top:20px; left:20px; font-size:24px; color:white; mix-blend-mode:difference;}</style><div class='blend-container'><img src='image.jpg' width='200' alt='background'><h2 class='blend-text'>Blended Text</h2></div>"
"`object-fit: scale-down` का उपयोग करो","<div style='width:150px; height:100px; border:1px solid;'><img src='image.jpg' alt='fit image' style='width:100%; height:100%; object-fit:scale-down;'></div>"
"BEM (Block, Element, Modifier) नेमिंग कन्वेंशन का उदाहरण","<style>.card--featured { border-color: gold; }</style><div class='card card--featured'><p class='card__text'>Featured Card</p></div>"
"CSS `clamp()` का उपयोग करके एक रिस्पॉन्सिव पैडिंग बनाओ","<div style='padding: clamp(1rem, 5vw, 3rem); background:lightgrey;'>Padding changes with screen width.</div>"
"एक इमेज पर होवर करने पर शार्प ज़ूम इफ़ेक्ट बनाओ","<style>.zoom-container{width:200px; overflow:hidden;}.zoom-container img{transition: transform 0.3s;}.zoom-container:hover img{transform:scale(1.2);}</style><div class='zoom-container'><img src='image.jpg' width='200'></div>"
"CSS से एक 'न्यूमॉर्फिक' (Neumorphic) बटन बनाओ","<style>.neumorphic-btn{padding:10px 20px; background:#f0f0f0; border:none; border-radius:10px; box-shadow: 5px 5px 10px #bebebe, -5px -5px 10px #ffffff;}</style><button class='neumorphic-btn'>Neumorphic</button>"
"टेक्स्ट की आखिरी लाइन को दाईं ओर अलाइन करो (`text-align-last`)","<p style='text-align: justify; text-align-last: right;'>This is a long paragraph of text. The very last line of this paragraph will be aligned to the right side, which can be a neat typographic effect.</p>"
"CSS से एक लाइन खींचने वाला एनीमेशन बनाओ","<style>h2.draw-line{position:relative;} h2.draw-line::after{content:''; position:absolute; bottom:-5px; left:0; width:0; height:2px; background:blue; transition:width 0.5s;} h2.draw-line:hover::after{width:100%;}</style><h2 class='draw-line'>Hover to draw a line</h2>"
"एक 'ऑफ-कैनवास' मेन्यू का बेसिक स्ट्रक्चर बनाओ","<style>.off-canvas{position:fixed; top:0; left:-250px; width:250px; height:100%; background:#333; transition:left 0.3s;}</style><div class='off-canvas'></div><button onclick=""document.querySelector('.off-canvas').style.left='0px'"">Open Menu</button>"
"CSS `will-change` का उपयोग करके एनीमेशन को ऑप्टिमाइज़ करो","<style>.animated-box{will-change:transform; transition:transform 0.5s;}.animated-box:hover{transform:translateX(50px);}</style><div class='animated-box' style='width:50px; height:50px; background:red;'></div>"
"एक `drop-shadow` फ़िल्टर का उपयोग करो","<img src='icon.png' width='100' style='filter: drop-shadow(5px 5px 5px #666);'>"
"एक div के स्क्रॉलबार को स्टाइल करो","<style>.custom-scroll::-webkit-scrollbar{width:10px;} .custom-scroll::-webkit-scrollbar-thumb{background:grey; border-radius:5px;}</style><div class='custom-scroll' style='height:100px; overflow-y:scroll;'>Long content...</div>"
"CSS `user-select: none` का उपयोग करके टेक्स्ट को सेलेक्ट होने से रोको","<p style='user-select:none;'>You cannot select this text.</p>"
"CSS `pointer-events: none` का उपयोग करके क्लिक इवेंट्स को डिसेबल करो","<div style='pointer-events:none;'><a href='#'>This link is unclickable.</a></div>"
"`hue-rotate` फ़िल्टर का उपयोग करके एक इमेज का रंग बदलो","<img src='image.jpg' width='150' style='filter: hue-rotate(90deg);'>"
"एक लोडिंग टेक्स्ट के लिए 'blinking' एनीमेशन बनाओ","<style>@keyframes blink{50%{opacity:0;}} .blinking-text{animation:blink 1s infinite;}</style><p class='blinking-text'>Loading...</p>"
"एक टेक्स्ट बनाओ जिसके ऊपर से लाइन गुज़रे (overline)","<p style='text-decoration: overline;'>Overlined Text</p>"
"CSS काउंटर का उपयोग करके आइटम्स को ऑटो-नंबर करो","<style>body{counter-reset:section;} h2::before{counter-increment:section; content:'Section ' counter(section) ': ';}</style><h2>Title 1</h2><h2>Title 2</h2>"
"एक div बनाओ जो सिर्फ प्रिंट करते समय दिखाई दे","<style>@media print{.print-only{display:block;}} .print-only{display:none;}</style><div class='print-only'>This is only visible when printing.</div>"
"एक एलिमेंट बनाओ जो प्रिंट करते समय छिप जाए","<style>@media print{.no-print{display:none;}}</style><button class='no-print'>Don't print me</button>"
"CSS `background-clip: text` का उपयोग करो","<h1 style='font-size:48px; background:url(image.jpg); -webkit-background-clip:text; color:transparent;'>Text with Image BG</h1>"
"एक मैग्निफाइंग ग्लास इफ़ेक्ट का UI बनाओ","<div style='position:relative;'><img src='image.jpg' width='200'><div style='position:absolute; top:50px; left:50px; width:50px; height:50px; border:2px solid; border-radius:50%;'></div></div>"
"CSS `skew` ट्रांसफॉर्म का उपयोग करो","<div style='width:100px; height:50px; background:lightblue; transform:skewY(-10deg);'></div>"
"CSS `perspective` का उपयोग करके एक 3D इफ़ेक्ट बनाओ","<style>.scene{perspective:400px;}.box3d{width:100px; height:100px; background:coral; transform:rotateY(30deg);}</style><div class='scene'><div class='box3d'></div></div>"
"CSS से एक 'डार्क मोड' थीम बनाओ","<style>body.dark-mode{background:#121212; color:white;}</style><body class='dark-mode'>Dark mode content.</body>"
"CSS `background-blend-mode` का उपयोग करो","<style>.blend-bg{width:150px; height:100px; background-image:url(image.jpg); background-color:blue; background-blend-mode:screen;}</style><div class='blend-bg'></div>"
"CSS `shape-margin` का उपयोग करो","<style>.shape2{width:100px; height:100px; float:left; shape-outside:circle(50%); shape-margin:10px;}</style><div class='shape2'></div><p>Text will wrap around the circle with a 10px margin...</p>"
"CSS `scroll-behavior: smooth` का उपयोग करो","<style>html{scroll-behavior:smooth;}</style><a href='#bottom'>Go to Bottom</a><div style='height:1000px;'></div><div id='bottom'>Bottom</div>"
"एक 'रिबन' (ribbon) बैनर CSS से बनाओ","<style>.ribbon{position:absolute; top:10px; right:-25px; background:red; color:white; padding:5px 10px; transform:rotate(45deg);}</style><div style='position:relative; width:100px; height:100px; border:1px solid;'></div><div class='ribbon'>New!</div>"
"CSS `filter: invert()` का उपयोग करके रंगों को उल्टा करो","<img src='image.jpg' width='150' style='filter:invert(100%);'>"
"CSS `initial` कीवर्ड का उपयोग करके एक प्रॉपर्टी को रीसेट करो","<p style='color:blue;'><span style='color:initial;'>This text will have the default color.</span></p>"
"CSS `unset` कीवर्ड का उपयोग करके एक प्रॉपर्टी को अनसेट करो","<p style='color:green;'>This text is green. <span style='color:unset;'>This text is also green (inherits).</span></p>"
"CSS `revert` कीवर्ड का उपयोग करो","<p style='color:blue;'>Blue text, but <span style='color:revert;'>this part reverts</span> to the browser's default color.</p>"
"एक एनिमेटेड ग्रेडिएंट बैकग्राउंड बनाओ","<style>@keyframes gradient-anim{0%{background-position:0% 50%;} 50%{background-position:100% 50%;} 100%{background-position:0% 50%;}} .animated-gradient{background:linear-gradient(-45deg, #ee7752, #e73c7e, #23a6d5, #23d5ab); background-size:400% 400%; animation:gradient-anim 15s ease infinite; height:100px;}</style><div class='animated-gradient'></div>"
"CSS से एक 'glassmorphism' कार्ड बनाओ","<div style='background:rgba(255,255,255,0.3); backdrop-filter:blur(10px); border:1px solid rgba(255,255,255,0.1); border-radius:10px; padding:20px;'>Glassmorphism Card</div>"
"एक 'sticky' फुटर बनाओ जो हमेशा पेज के नीचे रहे","<style>body{display:flex; min-height:100vh; flex-direction:column;} main{flex:1;} footer{background:#333; color:white; padding:10px;}</style><body><main>Main Content</main><footer>Sticky Footer</footer></body>"
"CSS `:target` स्यूडो-क्लास का उपयोग करो","<style>:target{background:yellow;}</style><a href='#section1'>Go to Section 1</a><div id='section1'>When you click the link, I get a yellow background.</div>"
"एक एलिमेंट के ठीक बाद आने वाले पैराग्राफ को स्टाइल करो (Adjacent Sibling)","<style>h2 + p { font-style: italic; }</style><h2>Heading</h2><p>This paragraph is italic.</p><p>This one is not.</p>"
"एक हेडिंग के बाद आने वाले सभी पैराग्राफ को स्टाइल करो (General Sibling)","<style>h3 ~ p { color: grey; }</style><h3>Title</h3><p>Grey.</p><div><p>Not grey.</p></div><p>Grey.</p>"
"उन सभी लिंक्स को स्टाइल करो जिनमें 'target' एट्रिब्यूट हो","<style>a[target] { border: 1px solid green; }</style><a href='#' target='_blank'>Styled</a><a href='#'>Not Styled</a>"
"उन सभी लिंक्स को स्टाइल करो जिनका href '.pdf' पर खत्म होता हो","<style>a[href$='.pdf'] { color: red; }</style><a href='file.pdf'>PDF Link</a><a href='page.html'>HTML Link</a>"
"एक लिस्ट में हर दूसरे आइटम को स्टाइल करो (nth-child)","<style>li:nth-child(even){background-color:#f2f2f2;}</style><ul><li>1</li><li>2</li><li>3</li><li>4</li></ul>"
"एक लिस्ट में सिर्फ पहले आइटम को स्टाइल करो (:first-child)","<style>li:first-child{font-weight:bold;}</style><ul><li>First</li><li>Second</li></ul>"
"एक लिस्ट में सिर्फ आखिरी आइटम को स्टाइल करो (:last-child)","<style>li:last-child{font-style:italic;}</style><ul><li>First</li><li>Last</li></ul>"
"उन सभी पैराग्राफ को स्टाइल करो जो अपने पैरेंट का पहला पैराग्राफ हो (:first-of-type)","<style>p:first-of-type{color:blue;}</style><div><h1>Title</h1><p>First p (blue)</p><p>Second p</p></div>"
"उन सभी इनपुट फील्ड को स्टाइल करो जो चेक्ड (checked) हों","<style>:checked + label {color:green; text-decoration:line-through;}</style><input type='checkbox' id='c1' checked><label for='c1'>Completed</label>"
"खाली पैराग्राफ को छिपा दो (:empty)","<style>p:empty { display: none; }</style><p></p><p>Not empty</p>"
"इनपुट फील्ड पर फोकस होने पर उसके पैरेंट div को स्टाइल करो (:focus-within)","<style>.input-group:focus-within { background-color: lightyellow; border-left: 3px solid orange;}</style><div class='input-group' style='border:1px solid #ccc; padding:5px;'><input type='text' style='border:none; outline:none;'></div>"
"टेक्स्ट को सेलेक्ट करने पर उसका रंग बदलो (::selection)","<style>::selection { background: orange; color: white; }</style><p>Select this text to see the custom highlight color.</p>"
"इनपुट फील्ड के प्लेसहोल्डर टेक्स्ट को स्टाइल करो (::placeholder)","<style>::placeholder { color: red; opacity: 1; font-style:italic;}</style><input placeholder='Username (in red)'>"
"CSS में एक 'main-color' नाम का वेरिएबल बनाओ","<style>:root { --main-color: dodgerblue; --padding-size: 15px; }</style>"
"`main-color` CSS वेरिएबल का उपयोग करके टेक्स्ट का रंग सेट करो","<style>:root { --main-color: dodgerblue; } p { color: var(--main-color); }</style><p>This text uses a CSS variable for its color.</p>"
"एक मीडिया क्वेरी बनाओ जो 600px से बड़ी स्क्रीन पर बैकग्राउंड बदले","<style>body { background-color: lightblue; } @media (min-width: 600px) { body { background-color: lightgreen; } }</style><div>Resize the browser window to see the background color change.</div>"
"ग्रिड लेआउट को मोबाइल पर एक कॉलम का बनाओ","<style>.grid{display:grid; grid-template-columns: 1fr 1fr 1fr; gap:10px;} @media (max-width: 600px){.grid{grid-template-columns: 1fr;}}</style><div class='grid'><div style='background:lightgrey; padding:10px;'>1</div><div style='background:lightgrey; padding:10px;'>2</div><div style='background:lightgrey; padding:10px;'>3</div></div>"
"`vw` यूनिट का उपयोग करके एक div की चौड़ाई सेट करो","<div style='width: 50vw; background: coral; padding:10px; color:white;'>This div's width is 50% of the viewport width.</div>"
"`vh` यूनिट का उपयोग करके एक div की ऊंचाई सेट करो","<div style='height: 50vh; background: lightblue; padding:10px;'>This div's height is 50% of the viewport height.</div>"
"रिस्पॉन्सिव फॉन्ट साइज़ के लिए `rem` यूनिट का उपयोग करो","<style>html{font-size:16px;} p{font-size: 1.5rem;}</style><p>This font size is 1.5 x 16px = 24px.</p>"
"नेस्टेड फॉन्ट साइज़ के लिए `em` यूनिट का उपयोग करो","<div style='font-size: 20px;'><p style='font-size: 1.5em;'>This text's size (30px) is 1.5 times its parent's font size (20px).</p></div>"
"`clamp()` का उपयोग करके एक रिस्पॉन्सिव (fluid) फॉन्ट साइज़ बनाओ","<h1 style='font-size: clamp(1.5rem, 4vw, 3rem);'>This is a Fluid Responsive Title</h1>"
"एक div बनाओ जिसका आस्पेक्ट रेश्यो 16/9 हो","<div style='width: 50%; aspect-ratio: 16 / 9; background: lightgrey;'><p style='text-align:center; padding-top:20%;'>16:9 Aspect Ratio</p></div>"
"रिस्पॉन्सिव इमेज के लिए `picture` टैग का उपयोग करो","<picture><source media='(min-width: 650px)' srcset='large_image.jpg'><source media='(min-width: 465px)' srcset='medium_image.jpg'><img src='small_image.jpg' alt='flowers' style='width:auto;'></picture>"
"CSS `filter` से एक इमेज को ग्रेस्केल करो","<img src='image.jpg' alt='grayscale' style='filter: grayscale(100%);' width='150'>"
"CSS `filter` से एक इमेज पर ब्लर इफ़ेक्ट लगाओ","<img src='image.jpg' alt='blur' style='filter: blur(3px);' width='150'>"
"CSS `filter` से एक इमेज का कंट्रास्ट बढ़ाओ","<img src='image.jpg' alt='contrast' style='filter: contrast(180%);' width='150'>"
"CSS `filter` से एक इमेज पर सेपिया (sepia) इफ़ेक्ट लगाओ","<img src='image.jpg' alt='sepia' style='filter: sepia(100%);' width='150'>"
"एक div के पीछे वाले कंटेंट को ब्लर करो (backdrop-filter)","<div style='background-image:url(image.jpg); height:150px; padding:20px;'><div style='background:rgba(255,255,255,0.5); backdrop-filter:blur(5px); padding:10px; border:1px solid white;'>Text with blurred background</div></div>"
"`clip-path` का उपयोग करके एक div को सर्किल के रूप में काटो","<div style='width:100px; height:100px; background:coral; clip-path:circle(50%);'></div>"
"`clip-path` का उपयोग करके एक div को त्रिभुज (triangle) के रूप में काटो","<div style='width:100px; height:100px; background:green; clip-path:polygon(50% 0%, 0% 100%, 100% 100%);'></div>"
"एक इमेज पर होवर करने पर उसे ज़ूम और रोटेट करो","<style>img.zoom-rotate:hover{transform: scale(1.1) rotate(-5deg);}</style><img class='zoom-rotate' src='image.jpg' width='150' style='transition:transform 0.3s;' alt='image'>"
"CSS से एक लोडिंग स्पिनर बनाओ","<style>@keyframes spin{to{transform:rotate(360deg);}} .spinner{width:30px; height:30px; border:4px solid #f3f3f3; border-top:4px solid #3498db; border-radius:50%; animation:spin 1s linear infinite;}</style><div class='spinner'></div>"
"CSS ग्रेडिएंट टेक्स्ट बनाओ","<h1 style='font-size:48px; background:linear-gradient(to right, red, blue); -webkit-background-clip:text; -webkit-text-fill-color:transparent;'>Gradient Text</h1>"
"CSS `conic-gradient` से एक पाई चार्ट बनाओ","<div style='width:100px; height:100px; border-radius:50%; background:conic-gradient(red 0% 25%, blue 25% 75%, green 75% 100%);'></div>"
"`@supports` का उपयोग करके चेक करो कि ब्राउज़र ग्रिड को सपोर्ट करता है या नहीं","<style>@supports (display:grid){ div.support-test{color:green;} } @supports not (display:grid){ div.support-test{color:red;} }</style><div class='support-test'>This text is green if your browser supports CSS Grid.</div>"
"तार्किक (logical) प्रॉपर्टी `margin-inline-start` का उपयोग करो","<p style='margin-inline-start: 20px; border:1px solid;'>This has a left margin in left-to-right languages.</p>"
"तार्किक (logical) प्रॉपर्टी `padding-block-end` का उपयोग करो","<p style='padding-block-end: 20px; border:1px solid;'>This has a bottom padding.</p>"
"`:is()` स्यूडो-क्लास का उपयोग करके कई एलिमेंट्स को एक साथ स्टाइल करो","<style>header:is(h1, h2, h3){color:purple;}</style><header><h1>Purple Heading 1</h1><h2>Purple Heading 2</h2></header>"
"CSS `scroll-snap` का उपयोग करके एक स्नैपिंग स्क्रॉल कंटेनर बनाओ","<style>.snap-container{scroll-snap-type:y mandatory; height:200px; overflow-y:scroll; border:1px solid;}.snap-child{scroll-snap-align:start; height:200px; display:flex; align-items:center; justify-content:center;}</style><div class='snap-container'><div class='snap-child' style='background:lightblue;'>Section 1</div><div class='snap-child' style='background:lightcoral;'>Section 2</div></div>"
"एक बटन बनाओ जिसमें टेक्स्ट और Font Awesome आइकन दोनों हों","<link rel='stylesheet' href='https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css'><button style='padding:5px 10px;'><i class='fas fa-download' style='margin-right:5px;'></i>Download</button>"
"एक div में टेक्स्ट ओवरफ्लो होने पर ellipsis (...) दिखे","<div style='white-space:nowrap; width:150px; overflow:hidden; text-overflow:ellipsis; border:1px solid;'>This is a very long text that will be truncated with an ellipsis.</div>"
"एक इमेज पर होवर करने पर ग्रेस्केल इफ़ेक्ट हटाओ","<style>img.bw-hover{filter:grayscale(100%); transition:filter 0.3s ease;}.bw-hover:hover{filter:grayscale(0%);}</style><img class='bw-hover' src='image.jpg' width='150' alt='image'>"
"मीडिया क्वेरी में `orientation` का उपयोग करो","<style>@media (orientation: landscape) { body { color: blue; } } @media (orientation: portrait) { body { color: green; } }</style><div>Text color changes depending on screen orientation (landscape or portrait).</div>"
"CSS से एक 3D बटन बनाओ","<style>.btn-3d{background-color:#4CAF50; border:none; padding:10px 20px; color:white; border-radius:5px; box-shadow:0 5px #999; cursor:pointer;}.btn-3d:active{box-shadow:0 2px #666; transform:translateY(3px);}</style><button class='btn-3d'>3D Button</button>"
"टेबल में हर विषम (odd) रो को स्टाइल करो","<style>tr:nth-child(odd){background-color:#f9f9f9;}</style><table><tr><td>Row 1 (Odd)</td></tr><tr><td>Row 2 (Even)</td></tr><tr><td>Row 3 (Odd)</td></tr></table>"
"एक div को हॉरिजॉन्टली और वर्टिकली सेंटर करने के लिए ग्रिड का उपयोग करो","<div style='display:grid; place-items:center; height:100px; border:1px solid;'><div>Perfectly Centered Item</div></div>"
"CSS मास्क (mask-image) का उपयोग करके टेक्स्ट पर इमेज इफ़ेक्ट लगाओ","<style>.masked-text{font-size:48px; font-weight:bold; color:white; background:url(image.jpg); -webkit-background-clip:text; background-clip:text; color:transparent;}</style><h1 class='masked-text'>MASKED</h1>"
"एक जावास्क्रिप्ट प्रॉमिस (Promise) बनाओ जो 1 सेकंड बाद resolve हो","<script>const myPromise = new Promise((resolve, reject) => { setTimeout(() => { resolve('Success!'); }, 1000); });</script>"
"एक प्रॉमिस को `.then()` और `.catch()` से हैंडल करो","<script>const myPromise = new Promise((resolve, reject) => { resolve('Done'); }); myPromise.then(result => console.log(result)).catch(error => console.error(error));</script>"
"एक प्रॉमिस बनाओ जो तुरंत reject हो जाए","<script>const rejectedPromise = new Promise((resolve, reject) => { reject('Failure!'); }); rejectedPromise.catch(error => console.error(error));</script>"
"`async/await` का उपयोग करके एक फंक्शन बनाओ जो डेटा फेच करे","<script>async function fetchData() { try { let response = await fetch('https://jsonplaceholder.typicode.com/todos/1'); let data = await response.json(); console.log(data); } catch (error) { console.error('Could not fetch data:', error); } } fetchData();</script>"
"`async` फंक्शन बनाओ जो एक वैल्यू लौटाए","<script>async function getValue() { return 'Hello Async'; } getValue().then(value => console.log(value));</script>"
"`Promise.all` का उपयोग करके एक साथ कई API कॉल्स करो","<script>Promise.all([fetch('.../posts/1'), fetch('.../posts/2')]).then(responses => Promise.all(responses.map(res => res.json()))).then(data => console.log(data));</script>"
"एक जावास्क्रिप्ट मॉड्यूल से एक फंक्शन एक्सपोर्ट करो","// In math.js file:\nexport function add(a, b) { return a + b; }"
"एक मॉड्यूल से एक फंक्शन इम्पोर्ट करो","// In main.js file:\nimport { add } from './math.js';"
"एक मॉड्यूल से डिफ़ॉल्ट एक्सपोर्ट करो","// In myModule.js:\nexport default function greet() { console.log('Hello'); }"
"एक डिफ़ॉल्ट एक्सपोर्ट को इम्पोर्ट करो","// In main.js:\nimport myGreetingFunction from './myModule.js';"
"`try...catch...finally` ब्लॉक का उपयोग करो","<script>try { console.log('Trying...'); } catch (e) { console.log('Error!'); } finally { console.log('Finally block runs always.'); }</script>"
"एक कस्टम एरर थ्रो (throw) करो","<script>function checkAge(age) { if (age < 18) { throw new Error('Must be 18 or older'); } } try { checkAge(15); } catch (e) { console.error(e.message); }</script>"
"`Array.findIndex` का उपयोग करके एक एलिमेंट का इंडेक्स पता करो","<script>const numbers = [10, 20, 30, 40]; const index = numbers.findIndex(num => num > 25); console.log(index);</script>"
"`Array.some` का उपयोग करके चेक करो कि क्या कोई एलिमेंट कंडीशन को पूरा करता है","<script>const numbers = [1, 2, 3, 4, 5]; const hasEvenNumber = numbers.some(num => num % 2 === 0); console.log(hasEvenNumber);</script>"
"`Array.every` का उपयोग करके चेक करो कि क्या सभी एलिमेंट कंडीशन को पूरा करते हैं","<script>const numbers = [2, 4, 6]; const allAreEven = numbers.every(num => num % 2 === 0); console.log(allAreEven);</script>"
"स्प्रेड ऑपरेटर (...) का उपयोग करके दो एरे को मिलाओ","<script>const arr1 = [1, 2]; const arr2 = [3, 4]; const combined = [...arr1, ...arr2]; console.log(combined);</script>"
"स्प्रेड ऑपरेटर का उपयोग करके एक ऑब्जेक्ट को कॉपी करो","<script>const person = {name: 'Amit'}; const personCopy = {...person};</script>"
"रेस्ट पैरामीटर (...) का उपयोग करके एक फंक्शन बनाओ","<script>function sum(...numbers) { return numbers.reduce((total, num) => total + num, 0); } console.log(sum(1,2,3));</script>"
"ऑब्जेक्ट डीस्ट्रक्चरिंग (Object Destructuring) का उपयोग करो","<script>const person = {name:'Amit', city:'Lucknow'}; const {name, city} = person; console.log(name, city);</script>"
"एरे डीस्ट्रक्चरिंग (Array Destructuring) का उपयोग करो","<script>const fruits = ['Apple', 'Banana']; const [first, second] = fruits; console.log(first);</script>"
"डीस्ट्रक्चरिंग में एक नया वेरिएबल नाम दो","<script>const person = {name:'Amit'}; const {name: personName} = person; console.log(personName);</script>"
"JSON डेटा को डीस्ट्रक्चर करो","<script>const jsonResponse = '{\""user\"":\""Amit\"", \""posts\"":10}'; const {user, posts} = JSON.parse(jsonResponse);</script>"
"JavaScript `Map` ऑब्जेक्ट बनाओ","<script>const myMap = new Map(); myMap.set('key1', 'value1');</script>"
"JavaScript `Set` ऑब्जेक्ट बनाओ","<script>const mySet = new Set([1, 2, 2, 3]); console.log(mySet);</script>"
"क्लास (class) में एक मेथड बनाओ","<script>class Person { constructor(name){this.name=name;} greet(){return `Hello, ${this.name}`;}}</script>"
"क्लास इनहेरिटेंस (Inheritance) का उपयोग करो","<script>class Animal{}; class Dog extends Animal {};</script>"
"क्लास में एक स्टेटिक मेथड बनाओ","<script>class MathHelper { static add(a,b){return a+b;} } console.log(MathHelper.add(2,3));</script>"
"क्लास में गेटर (getter) का उपयोग करो","<script>class Circle { constructor(radius){this.radius=radius;} get diameter(){return this.radius*2;}}</script>"
"क्लास में सेटर (setter) का उपयोग करो","<script>class User { set name(newName){this._name=newName;} } const u = new User(); u.name = 'Amit';</script>"
"JavaScript `Symbol` का उपयोग करो","<script>const mySymbol = Symbol('description');</script>"
"एक जेनरेटर फंक्शन `function*` बनाओ","<script>function* numberGenerator(){ yield 1; yield 2; }</script>"
"ES6 मॉड्यूल में वाइल्डकार्ड (`*`) इम्पोर्ट करो","// In main.js:\nimport * as math from './math.js';"
"`fetch` के साथ `POST` रिक्वेस्ट में `headers` भेजो","<script>fetch('/api/data', { method:'POST', headers:{'Content-Type':'application/json'}, body:JSON.stringify({name:'Amit'}) });</script>"
"एक `async` फंक्शन के अंदर एरर को `try...catch` से हैंडल करो","<script>async function fetchData(){ try { let res = await fetch('...'); } catch(e) { console.error(e); } }</script>"
"`Promise.resolve` का उपयोग करो","<script>Promise.resolve('Instant success').then(msg => console.log(msg));</script>"
"`Promise.reject` का उपयोग करो","<script>Promise.reject('Instant failure').catch(err => console.error(err));</script>"
"`Promise.race` का उपयोग करो","<script>const p1=new Promise(r=>setTimeout(r,500,'one')); const p2=new Promise(r=>setTimeout(r,100,'two')); Promise.race([p1,p2]).then(val=>console.log(val));</script>"
"एक `async` IIFE (Immediately Invoked Function Expression) बनाओ","<script>(async () => { let data = await fetch('...'); console.log(data); })();</script>"
"ऑब्जेक्ट की प्रॉपर्टीज को लूप करने के लिए `Object.keys` का उपयोग करो","<script>const obj = {a:1,b:2}; Object.keys(obj).forEach(key => console.log(key, obj[key]));</script>"
"`localStorage` में ऑब्जेक्ट को सेव करो","<script>const user = {name:'Amit'}; localStorage.setItem('user', JSON.stringify(user));</script>"
"`localStorage` से ऑब्जेक्ट को प्राप्त करो","<script>const user = JSON.parse(localStorage.getItem('user'));</script>"
"एक `async` एरो फंक्शन बनाओ","<script>const fetchData = async () => { const response = await fetch('...'); };</script>"
"डीस्ट्रक्चरिंग में डिफ़ॉल्ट वैल्यू सेट करो","<script>const person = {name:'Amit'}; const {name, city='Lucknow'} = person;</script>"
"नेस्टेड डीस्ट्रक्चरिंग (Nested Destructuring) करो","<script>const user = {id:1, details:{name:'Amit'}}; const {details: {name}} = user;</script>"
"AJAX रिक्वेस्ट के लिए `FormData` ऑब्जेक्ट बनाओ","<form id='myForm'></form><script>const myForm = document.getElementById('myForm'); const formData = new FormData(myForm);</script>"
"`fetch` के साथ `AbortController` का उपयोग करके रिक्वेस्ट को कैंसिल करो","<script>const controller = new AbortController(); const signal = controller.signal; fetch('...', {signal}).catch(err=>{if(err.name==='AbortError')console.log('Fetch aborted')}); controller.abort();</script>"
"`Proxy` ऑब्जेक्ट का एक बेसिक उदाहरण","<script>const target = {}; const handler = {}; const proxy = new Proxy(target, handler);</script>"
"`Reflect` API का एक बेसिक उदाहरण","<script>const obj = {}; Reflect.set(obj, 'prop', 'value');</script>"
"जावास्क्रिप्ट में `console.time` का उपयोग करके परफॉरमेंस को मापो","<script>console.time('my-timer'); for(let i=0;i<1000;i++){} console.timeEnd('my-timer');</script>"
"Flask में एक API बनाओ जो एक JSON ऑब्जेक्ट लौटाए","from flask import Flask, jsonify\napp = Flask(__name__)\n@app.route('/api/user')\ndef get_user():\n    user_data = {'name': 'Amit', 'city': 'Lucknow'}\n    return jsonify(user_data)"
"जावास्क्रिप्ट `fetch` का उपयोग करके एक Flask API से डेटा प्राप्त करो","<p id='user-name'></p><script>fetch('/api/user').then(response => response.json()).then(data => { document.getElementById('user-name').innerText = data.name; });</script>"
"Flask में एक HTML टेम्पलेट को रेंडर करो","from flask import Flask, render_template\napp = Flask(__name__)\n@app.route('/')\ndef index():\n    return render_template('index.html')"
"Flask से एक वेरिएबल को HTML टेम्पलेट में पास करो","from flask import render_template\n@app.route('/profile')\ndef profile():\n    username = 'Amit'\n    return render_template('profile.html', user=username)"
"Jinja2 टेम्पलेट में एक वेरिएबल को डिस्प्ले करो","""\n<h1>Welcome, {{ user }}!</h1>"""
"Jinja2 टेम्पलेट में một लिस्ट पर `for` लूप चलाओ","""\n<ul>\n{% for item in item_list %}\n    <li>{{ item }}</li>\n{% endfor %}\n</ul>"""
"Flask से एक लिस्ट को टेम्पलेट में पास करो","from flask import render_template\n@app.route('/items')\ndef show_items():\n    my_items = ['Apple', 'Banana', 'Cherry']\n    return render_template('items.html', item_list=my_items)"
"Jinja2 टेम्पलेट में `if` स्टेटमेंट का उपयोग करो","""{% if user_is_logged_in %}\n    <p>Welcome back!</p>\n{% else %}\n    <p>Please log in.</p>\n{% endif %}"""
"Flask में GET मेथड से फॉर्म डेटा प्राप्त करो","from flask import request\n@app.route('/search')\ndef search():\n    query = request.args.get('q')\n    return f'You searched for: {query}'"
"एक HTML फॉर्म बनाओ जो GET रिक्वेस्ट भेजे","<form action='/search' method='get'><input name='q' type='text' placeholder='Search...'><button type='submit'>Search</button></form>"
"Flask में POST मेथड से फॉर्म डेटा प्राप्त करो","from flask import request\n@app.route('/login', methods=['GET', 'POST'])\ndef login():\n    if request.method == 'POST':\n        username = request.form['username']\n        return f'Welcome, {username}'\n    return '<form method=""post""><input name=""username""><button>Login</button></form>'"
"एक HTML फॉर्म बनाओ जो POST रिक्वेस्ट भेजे","<form action='/login' method='post'><input name='username' placeholder='Username'><button type='submit'>Login</button></form>"
"एक सिंपल काउंटर के लिए Flask API बनाओ","from flask import Flask, jsonify\ncount = 0\napp = Flask(__name__)\n@app.route('/api/increment')\ndef increment_count():\n    global count\n    count += 1\n    return jsonify({'new_count': count})"
"जावास्क्रिप्ट से काउंटर API को कॉल करो और वैल्यू दिखाओ","<p>Server Clicks: <span id='server-count'>0</span></p><button onclick=""fetch('/api/increment').then(r=>r.json()).then(d=>document.getElementById('server-count').innerText=d.new_count);"">Increment on Server</button>"
"Flask में CSS जैसी स्टैटिक फाइलों को सर्व करने का तरीका","<link rel='stylesheet' href='{{ url_for('static', filename='style.css') }}'>"
"Flask में एक यूज़र को दूसरे पेज पर रीडायरेक्ट करो","from flask import redirect, url_for\n@app.route('/admin')\ndef admin_page():\n    return redirect(url_for('home_page'))"
"पैरामीटर लेने वाली एक पाइथन API बनाओ","from flask import request, jsonify\n@app.route('/api/greet')\ndef greet_api():\n    name = request.args.get('name', 'Guest')\n    return jsonify({'greeting': f'Hello, {name}!'})"
"पैरामीटर के साथ जावास्क्रिप्ट से API को कॉल करो","<script>fetch('/api/greet?name=Amit').then(r=>r.json()).then(d=>console.log(d.greeting));</script>"
"Flask ऐप में एक टेक्स्ट फाइल पढ़ो और दिखाओ","@app.route('/file-content')\ndef read_file():\n    with open('data.txt', 'r') as f:\n        content = f.read()\n    return content"
"बिना पेज रीलोड किए AJAX से एक फॉर्म सबमिट करो","<form id='ajax-form'><input name='message' id='msg-input'></form><button onclick=""fetch('/submit-ajax', {method:'POST', body:new FormData(document.getElementById('ajax-form'))});"">Submit via AJAX</button>"
"Flask में AJAX रिक्वेस्ट को हैंडल करो","from flask import request\n@app.route('/submit-ajax', methods=['POST'])\ndef handle_ajax():\n    message = request.form['message']\n    # Process the message...\n    return 'OK'"
"Jinja2 में टेम्पलेट इनहेरिटेंस का उपयोग करो","""\n<html><body>{% block content %}{% endblock %}</body></html>\n\n{% extends 'layout.html' %}\n{% block content %}<h1>Hello</h1>{% endblock %}"""
"एक API बनाओ जो सर्वर से वर्तमान समय लौटाए","import datetime\nfrom flask import jsonify\n@app.route('/api/time')\ndef get_time():\n    return jsonify({'time': datetime.datetime.now().isoformat()})"
"जावास्क्रिप्ट से सर्वर का समय प्राप्त करो और दिखाओ","<p id='server-time'></p><script>fetch('/api/time').then(r=>r.json()).then(d=>document.getElementById('server-time').innerText=d.time);</script>"
"Flask में URL पैरामीटर के साथ एक रूट बनाओ","@app.route('/post/<int:post_id>')\ndef show_post(post_id):\n    return f'Showing post number {post_id}'"
"Jinja2 में डिक्शनरी पर लूप चलाओ","""{% for key, value in my_dict.items() %}\n    <p>{{ key }}: {{ value }}</p>\n{% endfor %}"""
"Flask से डिक्शनरी को टेम्पलेट में पास करो","from flask import render_template\n@app.route('/dict')\ndef show_dict():\n    user_info = {'name':'Amit', 'role':'Developer'}\n    return render_template('dict.html', my_dict=user_info)"
"Flask में 404 एरर हैंडलर बनाओ","from flask import render_template\n@app.errorhandler(404)\ndef page_not_found(e):\n    return render_template('404.html'), 404"
"एक सिंपल Flask To-Do ऐप का बैकएंड (आइटम जोड़ना)","from flask import Flask, request, jsonify\napp = Flask(__name__)\ntodos = []\n@app.route('/add_todo', methods=['POST'])\ndef add_todo():\n    todo = request.json.get('item')\n    todos.append(todo)\n    return jsonify({'status': 'success'})"
"एक To-Do ऐप का फ्रंटएंड (आइटम जोड़ना)","<ul id='todo-list'></ul><input id='todo-item'><button onclick=""fetch('/add_todo', {method:'POST', body:JSON.stringify({item:document.getElementById('todo-item').value}), headers:{'Content-Type':'application/json'}});"">Add</button>"
"Flask में एक फाइल अपलोड हैंडलर बनाओ","from flask import request\n@app.route('/upload', methods=['POST'])\ndef upload_file():\n    f = request.files['file']\n    f.save('uploaded_file.txt')\n    return 'File uploaded'"
"HTML फाइल अपलोड फॉर्म","<form action='/upload' method='post' enctype='multipart/form-data'><input type='file' name='file'><input type='submit'></form>"
"Flask में कुकी (cookie) सेट करो","from flask import make_response\n@app.route('/set-cookie')\ndef set_cookie():\n    resp = make_response('Cookie set!')\n    resp.set_cookie('userID', '123')\n    return resp"
"Flask में कुकी पढ़ो","from flask import request\n@app.route('/get-cookie')\ndef get_cookie():\n    user_id = request.cookies.get('userID')\n    return f'User ID is {user_id}'"
"Flask में सेशन (session) का उपयोग करो","from flask import Flask, session\napp = Flask(__name__)\napp.secret_key = 'some_secret_key'\n@app.route('/login')\ndef login():\n    session['username'] = 'amit'"
"Jinja2 में फ़िल्टर का उपयोग करो","""<p>{{ my_text|upper }}</p> """
"Flask में GET और POST दोनों मेथड को एक ही रूट पर हैंडल करो","@app.route('/contact', methods=['GET', 'POST'])\ndef contact():\n    if request.method == 'POST':\n        # Handle form submission\n        return 'Thanks for your message!'\n    # Show the form\n    return render_template('contact.html')"
"एक लाइव सर्च के लिए Flask API बनाओ","@app.route('/api/search')\ndef live_search():\n    query = request.args.get('q')\n    # Search logic...\n    results = ['Result1', 'Result2']\n    return jsonify(results)"
"जावास्क्रिप्ट से लाइव सर्च फंक्शनैलिटी बनाओ","<input onkeyup=""fetch('/api/search?q='+this.value).then(r=>r.json()).then(d=>console.log(d))"">"
"पाइथन `requests` से अपनी ही Flask API को कॉल करो","import requests\nresponse = requests.get('http://127.0.0.1:5000/api/data')"
"एक To-Do ऐप के लिए सभी आइटम्स लौटाने वाला API","@app.route('/api/todos')\ndef get_todos():\n    return jsonify(todos)"
"जावास्क्रिप्ट से पेज लोड होने पर सभी To-Do आइटम्स को फेच करो","<ul id='list'></ul><script>window.onload = () => fetch('/api/todos').then(r=>r.json()).then(d=>d.forEach(i=>{...}));</script>"
"Flask में एक डायनामिक इमेज जनरेटर बनाओ","from PIL import Image, ImageDraw\n@app.route('/image')\ndef generate_image():\n    img = Image.new('RGB', (100, 30), color='red')\n    # ... serve image ... "
"Flask में एक लॉगआउट रूट बनाओ","from flask import session, redirect, url_for\n@app.route('/logout')\ndef logout():\n    session.pop('username', None)\n    return redirect(url_for('index'))"
"Jinja2 में मैक्रो (macro) का उपयोग करो","""{% macro render_input(name) %}<input name='{{ name }}'>{% endmacro %}\n{{ render_input('username') }}"""
"एक API बनाओ जो JSON डेटा ले और उसे प्रोसेस करे","@app.route('/api/process', methods=['POST'])\ndef process_data():\n    data = request.json\n    processed_data = data['value'] * 2\n    return jsonify({'result': processed_data})"
"एक API बनाओ जो डेटाबेस से डेटा लाए (स्यूडो-कोड)","@app.route('/users/<int:id>')\ndef get_user(id):\n    user = db.get_user_by_id(id)\n    return jsonify(user.to_dict())"
"एक क्लिक काउंटर बनाओ जो सर्वर पर स्टेट सेव करे","@app.route('/click', methods=['POST'])\ndef click():\n    session['clicks'] = session.get('clicks', 0) + 1\n    return jsonify({'clicks': session['clicks']})"
"पाइथन में एक async फंक्शन बनाओ","import asyncio\nasync def my_async_function():\n    print('Hello')\n    await asyncio.sleep(1)\n    print('World')"
"Flask में एक बैकग्राउंड टास्क चलाओ (स्यूडो-कोड)","def long_task():\n    # ... heavy processing ...\n\n@app.route('/start-task')\ndef start_task():\n    thread = Thread(target=long_task)\n    thread.start()\n    return 'Task started!'"
"पाइथन में एक खाली 'Car' क्लास बनाओ","class Car:\n    pass"
"एक 'Car' क्लास का ऑब्जेक्ट (instance) बनाओ","class Car:\n    pass\n\nmy_car = Car()"
"एक 'Car' क्लास में `__init__` मेथड बनाओ जो brand और model ले","class Car:\n    def __init__(self, brand, model):\n        self.brand = brand\n        self.model = model"
"एक ऑब्जेक्ट के इंस्टेंस एट्रिब्यूट्स को एक्सेस करो","class Car:\n    def __init__(self, brand):\n        self.brand = brand\n\ncar1 = Car('Tata')\nprint(car1.brand)"
"एक क्लास में एक इंस्टेंस मेथड 'display_info' बनाओ","class Car:\n    def __init__(self, brand):\n        self.brand = brand\n    def display_info(self):\n        return f'This is a {self.brand} car.'"
"एक ऑब्जेक्ट का इंस्टेंस मेथड कॉल करो","class Car:\n    def __init__(self, brand):\n        self.brand = brand\n    def display_info(self):\n        return f'A {self.brand}'\n\nmy_car = Car('Honda')\nprint(my_car.display_info())"
"एक क्लास एट्रिब्यूट 'wheels' बनाओ","class Car:\n    wheels = 4 # This is a class attribute"
"एक क्लास एट्रिब्यूट को एक्सेस करो","class Car:\n    wheels = 4\n\nprint(Car.wheels)"
"एक 'ElectricCar' क्लास बनाओ जो 'Car' क्लास से इनहेरिट करे","class Car:\n    def drive(self):\n        return 'Driving a regular car.'\n\nclass ElectricCar(Car):\n    pass"
"पैरेंट क्लास के एक मेथड को ओवरराइड करो","class Animal:\n    def speak(self):\n        return 'Some generic animal sound.'\n\nclass Dog(Animal):\n    def speak(self):\n        return 'Woof!'"
"`super()` फंक्शन का उपयोग करके पैरेंट क्लास के मेथड को कॉल करो","class Car:\n    def __init__(self, brand):\n        self.brand = brand\n\nclass ElectricCar(Car):\n    def __init__(self, brand, battery_size):\n        super().__init__(brand)\n        self.battery_size = battery_size"
"एक प्राइवेट एट्रिब्यूट `__speed` बनाओ","class Car:\n    def __init__(self):\n        self.__speed = 0 # Private attribute with double underscore"
"एक प्राइवेट एट्रिब्यूट के लिए एक गेटर (getter) मेथड बनाओ","class Car:\n    def __init__(self, speed):\n        self.__speed = speed\n    def get_speed(self):\n        return self.__speed"
"एक प्राइवेट एट्रिब्यूट के लिए एक सेटर (setter) मेथड बनाओ","class Car:\n    def __init__(self, speed):\n        self.__speed = speed\n    def set_speed(self, new_speed):\n        self.__speed = new_speed"
"एनकैप्सुलेशन (Encapsulation) का एक उदाहरण दिखाओ","class BankAccount:\n    def __init__(self, balance):\n        self.__balance = balance\n    def withdraw(self, amount):\n        if amount <= self.__balance:\n            self.__balance -= amount\n            return True\n        return False"
"एक स्टेटिक मेथड `@staticmethod` बनाओ","class MathUtils:\n    @staticmethod\n    def add(a, b):\n        return a + b\n\nresult = MathUtils.add(5, 3)"
"एक क्लास मेथड `@classmethod` बनाओ","class Car:\n    wheels = 4\n    @classmethod\n    def get_wheel_count(cls):\n        return f'All cars have {cls.wheels} wheels.'"
"`__str__` मेथड को डिफाइन करो ताकि ऑब्जेक्ट को प्रिंट करने पर एक रीडेबल स्ट्रिंग मिले","class Car:\n    def __init__(self, brand):\n        self.brand = brand\n    def __str__(self):\n        return f'This is a car of {self.brand} brand.'"
"एक 'mymodule.py' फाइल बनाओ जिसमें एक फंक्शन हो","""# This code would be in a file named mymodule.py\ndef greet(name):\n    return f'Hello, {name}'"""
"अपने बनाए हुए 'mymodule' को इम्पोर्ट करो","import mymodule"
"अपने बनाए हुए मॉड्यूल से एक फंक्शन इस्तेमाल करो","import mymodule\nprint(mymodule.greet('Amit'))"
"एक मॉड्यूल से सिर्फ एक ख़ास फंक्शन इम्पोर्ट करो","from mymodule import greet"
"इम्पोर्ट किए गए ख़ास फंक्शन का इस्तेमाल करो","from mymodule import greet\nprint(greet('Amit'))"
"एक मॉड्यूल को एक छोटे नाम (alias) से इम्पोर्ट करो","import datetime as dt\nnow = dt.datetime.now()"
"`if __name__ == '__main__':` का उपयोग करो ताकि कोड इम्पोर्ट होने पर न चले","def main():\n    print('This will only run when the script is executed directly.')\n\nif __name__ == '__main__':\n    main()"
"एक सिंपल पाइथन पैकेज का स्ट्रक्चर बनाओ","""my_package/\n|-- __init__.py\n|-- module1.py\n|-- module2.py"""
"एक पैकेज से एक मॉड्यूल इम्पोर्ट करो","from my_package import module1"
"पॉलीमॉर्फिज्म (Polymorphism) का एक उदाहरण दिखाओ","class Cat:\n    def speak(self): return 'Meow'\nclass Dog:\n    def speak(self): return 'Woof'\n\nanimals = [Cat(), Dog()]\nfor animal in animals:\n    print(animal.speak())"
"`@property` डेकोरेटर का उपयोग करके एक गेटर बनाओ","class Person:\n    def __init__(self, name):\n        self._name = name\n    @property\n    def name(self):\n        return self._name"
"`@property` के साथ एक सेटर बनाओ","class Person:\n    def __init__(self, name):\n        self._name = name\n    @property\n    def name(self):\n        return self._name\n    @name.setter\n    def name(self, value):\n        self._name = value"
"एक सिंपल डाटा क्लास `@dataclass` बनाओ","from dataclasses import dataclass\n\n@dataclass\nclass Point:\n    x: int\n    y: int"
"एक `__repr__` मेथड बनाओ","class Car:\n    def __repr__(self):\n        return 'Car()' "
"चेक करो कि एक ऑब्जेक्ट किसी क्लास का इंस्टेंस है या नहीं","class Car: pass\nmy_car = Car()\nisinstance(my_car, Car)"
"एक क्लास के सभी एट्रिब्यूट्स और मेथड्स को लिस्ट करो","class Car:\n    def drive(self): pass\ndir(Car)"
"एक abstract क्लास बनाओ","from abc import ABC, abstractmethod\n\nclass Shape(ABC):\n    @abstractmethod\n    def area(self): pass"
"मल्टीप्ल इनहेरिटेंस का एक उदाहरण","class A: pass\nclass B: pass\nclass C(A, B): pass"
"एक जेनरेटर फंक्शन बनाओ","def countdown(n):\n    while n > 0:\n        yield n\n        n -= 1"
"एक डेकोरेटर बनाओ जो फंक्शन के समय को मापे","import time\ndef timer(func):\n    def wrapper(*args, **kwargs):\n        start = time.time()\n        result = func(*args, **kwargs)\n        end = time.time()\n        print(f'{func.__name__} took {end-start} seconds')\n        return result\n    return wrapper"
"एक `__len__` मेथड बनाओ","class MyList:\n    def __init__(self, items):\n        self.items = items\n    def __len__(self):\n        return len(self.items)"
"पाइथन में एक enum बनाओ","from enum import Enum\nclass Color(Enum):\n    RED = 1\n    GREEN = 2"
"एक `__eq__` मेथड से दो ऑब्जेक्ट्स की तुलना करो","class Point:\n    def __init__(self, x):\n        self.x = x\n    def __eq__(self, other):\n        return self.x == other.x"
"एक Named Tuple बनाओ","from collections import namedtuple\nPoint = namedtuple('Point', ['x', 'y'])"
"एक Python पैकेज को `pip` से इनस्टॉल करो","pip install requests"
"इनस्टॉल किए गए पैकेजेज को `requirements.txt` में सेव करो","pip freeze > requirements.txt"
"एक `__init__.py` फाइल का उपयोग","""# In my_package/__init__.py:\nprint('Package is being initialized')"""
"एक मॉड्यूल के अंदर से दूसरे मॉड्यूल को इम्पोर्ट करो","""# In module1.py:\nimport module2"""
"एक स्लॉटेड क्लास `__slots__` बनाओ","class Point:\n    __slots__ = ['x', 'y']\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y"
"एक सिंपल कॉन्टेक्स्ट मेनेजर `@contextmanager` बनाओ","from contextlib import contextmanager\n\n@contextmanager\ndef my_file(filename):\n    f = open(filename, 'w')\n    try:\n        yield f\n    finally:\n        f.close()"
"एक `__call__` मेथड बनाओ","class Adder:\n    def __call__(self, x, y):\n        return x + y"
"`fetch` का उपयोग करके एक API से डेटा प्राप्त करो","<script>fetch('https://jsonplaceholder.typicode.com/todos/1').then(response => response.json()).then(data => console.log(data));</script>"
"API से fetched डेटा को एक div में दिखाओ","<div id='data-container'></div><script>fetch('https://jsonplaceholder.typicode.com/users/1').then(res=>res.json()).then(data=>document.getElementById('data-container').innerText=data.name);</script>"
"बटन क्लिक पर API से डेटा लोड करो","<button onclick=""fetch('https://jsonplaceholder.typicode.com/posts/1').then(res=>res.json()).then(data=>document.getElementById('post').innerHTML = `<h3>${data.title}</h3><p>${data.body}</p>`);"">Load Post</button><div id='post'></div>"
"`async/await` सिंटैक्स का उपयोग करके डेटा फेच करो","<script>async function getData() { const response = await fetch('https://jsonplaceholder.typicode.com/users/2'); const data = await response.json(); console.log(data.username); } getData();</script>"
"`fetch` में `.catch()` का उपयोग करके एरर को हैंडल करो","<script>fetch('https://jsonplaceholder.typicode.com/invalid-url').then(response => response.json()).catch(error => console.error('Error fetching data:', error));</script>"
"API कॉल के दौरान एक 'Loading...' मैसेज दिखाओ","<div id='loader'></div><button onclick=""document.getElementById('loader').innerText='Loading...'; fetch('https://jsonplaceholder.typicode.com/posts/2').then(res=>res.json()).finally(()=>document.getElementById('loader').innerText='');"">Fetch Data</button>"
"API से एक लिस्ट फेच करो और उसे एक ul में दिखाओ","<ul id='userList'></ul><script>fetch('https://jsonplaceholder.typicode.com/users').then(res=>res.json()).then(users=>{ let listItems = ''; users.forEach(user => { listItems += `<li>${user.name}</li>`; }); document.getElementById('userList').innerHTML = listItems; });</script>"
"एक POST रिक्वेस्ट में JSON डेटा भेजो","<script>fetch('https://jsonplaceholder.typicode.com/posts', { method: 'POST', body: JSON.stringify({ title: 'foo', body: 'bar', userId: 1 }), headers: { 'Content-type': 'application/json; charset=UTF-8' } }).then(res=>res.json()).then(json=>console.log(json));</script>"
"एक PUT रिक्वेस्ट से एक पोस्ट को अपडेट करो","<script>fetch('https://jsonplaceholder.typicode.com/posts/1', { method: 'PUT', body: JSON.stringify({ id: 1, title: 'new title' }), headers: { 'Content-type': 'application/json' } }).then(res=>res.json()).then(json=>console.log(json));</script>"
"एक DELETE रिक्वेस्ट से एक पोस्ट को डिलीट करो","<script>fetch('https://jsonplaceholder.typicode.com/posts/1', { method: 'DELETE' });</script>"
"API से एक इमेज का URL फेच करो और उसे दिखाओ","<img id='apiImage' width='150'><script>fetch('https://jsonplaceholder.typicode.com/photos/1').then(res=>res.json()).then(data=>document.getElementById('apiImage').src=data.thumbnailUrl);</script>"
"API रिक्वेस्ट में एक कस्टम हेडर भेजो","<script>fetch('https://api.example.com/data', { headers: { 'X-Custom-Header': 'MyValue' } });</script>"
"XMLHTTPRequest (XHR) का उपयोग करके डेटा फेच करो","<p id='xhr-data'></p><script>const xhr = new XMLHttpRequest(); xhr.open('GET', 'https://jsonplaceholder.typicode.com/users/3'); xhr.onload = function() { document.getElementById('xhr-data').innerText = JSON.parse(this.responseText).name; }; xhr.send();</script>"
"हर 10 सेकंड में API से डेटा रिफ्रेश करो","<div id='liveData'>Fetching...</div><script>setInterval(() => { fetch('https://jsonplaceholder.typicode.com/todos/1').then(res=>res.json()).then(data=>document.getElementById('liveData').innerText = data.title) }, 10000);</script>"
"JSON एरे से हर आइटम के लिए एक div बनाओ","<div id='container'></div><script>const data=[{text:'Item A'}, {text:'Item B'}]; data.forEach(item => { const div = document.createElement('div'); div.innerText=item.text; document.getElementById('container').appendChild(div); });</script>"
"एक लोकल JSON स्ट्रिंग को पार्स करो और नाम दिखाओ","<script>const jsonText = '{\""name\"":\""Amit\"", \""city\"":\""Lucknow\""}'; const user = JSON.parse(jsonText); alert(user.name);</script>"
"एक जावास्क्रिप्ट ऑब्जेक्ट को JSON स्ट्रिंग में बदलो","<script>const user = {name:'Amit', city:'Lucknow'}; const jsonText = JSON.stringify(user); alert(jsonText);</script>"
"एक डायनामिक सर्च बार बनाओ जो टाइप करते ही API को कॉल करे","<input placeholder='Search users...' onkeyup=""fetch('https://jsonplaceholder.typicode.com/users?username='+this.value).then(res=>res.json()).then(data=>console.log(data))"">"
"API कॉल के दौरान बटन को डिसेबल करो","<button id='loadBtn' onclick=""this.disabled=true; this.innerText='Loading...'; fetch('https://jsonplaceholder.typicode.com/users').finally(() => { this.disabled=false; this.innerText='Load Data'; });"">Load Data</button>"
"API से डेटा फेच करके एक HTML टेबल बनाओ","<table id='dataTable' border='1'><tr><th>ID</th><th>Name</th></tr></table><script>fetch('https://jsonplaceholder.typicode.com/users').then(res=>res.json()).then(users=>{ let table=document.getElementById('dataTable'); users.forEach(user=>{ let row=table.insertRow(); row.insertCell(0).innerHTML=user.id; row.insertCell(1).innerHTML=user.name; }); });</script>"
"एक API से कमेंट्स लोड करो और उन्हें दिखाओ","<div id='comments'></div><button onclick=""fetch('https://jsonplaceholder.typicode.com/comments?postId=1').then(res=>res.json()).then(data=>{...})"">Load Comments</button>"
"चेक करो कि API से रिस्पॉन्स ok है या नहीं","<script>fetch('https://jsonplaceholder.typicode.com/posts/1').then(response => { if (!response.ok) { throw new Error('Network response was not ok'); } return response.json(); }).then(data => console.log(data));</script>"
"एक API से सभी फोटो एलबम को ड्रॉपडाउन में दिखाओ","<select id='albums'></select><script>fetch('https://jsonplaceholder.typicode.com/albums').then(r=>r.json()).then(d=>d.forEach(a=>{let opt=document.createElement('option'); opt.text=a.title; document.getElementById('albums').add(opt);}));</script>"
"यूज़र इनपुट के आधार पर API को कॉल करो","<input id='userId' value='1'><button onclick=""fetch('https://jsonplaceholder.typicode.com/users/'+document.getElementById('userId').value).then(r=>r.json()).then(d=>alert(d.name));"">Get User</button>"
"एक साथ कई API कॉल्स करो","<script>Promise.all([fetch('.../posts/1'), fetch('.../comments/1')]).then(responses => Promise.all(responses.map(res => res.json()))).then(data => console.log(data));</script>"
"एक फोटो और उसका टाइटल API से लोड करो","<figure id='photoFig'><img id='photoImg' width='150'><figcaption id='photoTitle'></figcaption></figure><script>fetch('.../photos/2').then(r=>r.json()).then(d=>{document.getElementById('photoImg').src=d.thumbnailUrl; document.getElementById('photoTitle').innerText=d.title;});</script>"
"API से मिले डेटा को localStorage में सेव करो","<script>fetch('.../users/4').then(r=>r.json()).then(d=>localStorage.setItem('cachedUser', JSON.stringify(d)));</script>"
"अगर डेटा localStorage में है तो उसे इस्तेमाल करो, नहीं तो API से फेच करो","<script>if(localStorage.getItem('cachedUser')){...} else { fetch('...'); }</script>"
"एक बटन बनाओ जो API से नया फैक्ट फेच करे","<p id='fact'></p><button onclick=""fetch('https://catfact.ninja/fact').then(r=>r.json()).then(d=>document.getElementById('fact').innerText=d.fact);"">New Cat Fact</button>"
"AJAX का उपयोग करके एक सिंपल वेदर ऐप UI अपडेट करो","<div id='weather'>Weather: ...</div><script>fetch('.../weather?q=Lucknow').then(r=>r.json()).then(d=>document.getElementById('weather').innerText=`Weather: ${d.weather[0].main}`);</script>"
"API से मिले एरर मैसेज को यूज़र को दिखाओ","<p id='errorMsg' style='color:red;'></p><script>fetch('.../invalid').catch(err=>document.getElementById('errorMsg').innerText = 'Could not fetch data!');</script>"
"फॉर्म सबमिट करके डेटा को POST करो और जवाब दिखाओ","<form onsubmit=""...fetch('.../posts', {method:'POST', body:new FormData(this)}); return false;""><input name='title'><button>Submit</button></form>"
"पेज स्क्रॉल के अंत में पहुँचने पर और डेटा लोड करो (infinite scroll)","<script>window.onscroll = function() { if ((window.innerHeight + window.scrollY) >= document.body.offsetHeight) { fetchMoreData(); } };</script>"
"API से एक प्रोग्रेस बार को अपडेट करो","<progress id='pBar' max='100'></progress><script>fetch('...').then(res => { document.getElementById('pBar').value=100; });</script>"
"एक क्लिक करने योग्य लिस्ट बनाओ जो क्लिक पर और डिटेल्स फेच करे","<ul id='postList'></ul><script>fetch('.../posts').then(r=>r.json()).then(posts=>posts.forEach(p=>{let li=document.createElement('li'); li.innerText=p.title; li.onclick=()=>fetchPostDetails(p.id); document.getElementById('postList').appendChild(li);}));</script>"
"एक सर्च फॉर्म बनाओ जो सबमिट होने पर API कॉल करे","<form onsubmit=""fetch('...?q='+this.query.value); return false;""><input name='query'><button>Search</button></form>"
"एक API से यूज़र का प्रोफाइल कार्ड बनाओ","<div id='profileCard'></div><script>fetch('.../users/5').then(r=>r.json()).then(u=>document.getElementById('profileCard').innerHTML=`<h3>${u.name}</h3><p>${u.email}</p>`);</script>"
"एक रैंडम डॉग इमेज फेच करने के लिए बटन","<img id='dogImg' width='200'><button onclick=""fetch('https://dog.ceo/api/breeds/image/random').then(r=>r.json()).then(d=>document.getElementById('dogImg').src=d.message);"">New Dog</button>"
"API से मिले markdown टेक्स्ट को HTML में बदलो","<script>fetch('.../readme.md').then(r=>r.text()).then(markdown => { /* use a library to convert markdown to html */ });</script>"
"एक बिटकॉइन प्राइस टिकर बनाओ","<p>BTC Price: <span id='btc'></span></p><script>setInterval(()=>fetch('https://api.coindesk.com/v1/bpi/currentprice.json').then(r=>r.json()).then(d=>document.getElementById('btc').innerText=d.bpi.USD.rate), 60000)</script>"
"एक बटन बनाओ जो यूज़र की IP एड्रेस दिखाए","<p id='ip'></p><button onclick=""fetch('https://api.ipify.org?format=json').then(r=>r.json()).then(d=>document.getElementById('ip').innerText=d.ip);"">Show My IP</button>"
"देशों की एक लिस्ट ड्रॉपडाउन में दिखाओ","<select id='countries'></select><script>fetch('https://restcountries.com/v3.1/all').then(r=>r.json()).then(d=>{d.forEach(c=>{...});});</script>"
"API से मिले यूज़र डेटा को एक फॉर्म में भरो","<form><input id='name'></form><script>fetch('.../users/1').then(r=>r.json()).then(d=>document.getElementById('name').value=d.name);</script>"
"एक बटन बनाओ जो सर्वर से वर्तमान समय प्राप्त करे","<p id='serverTime'></p><button onclick=""fetch('http://worldtimeapi.org/api/timezone/Asia/Kolkata').then(r=>r.json()).then(d=>document.getElementById('serverTime').innerText=d.datetime);"">Get Server Time</button>"
"API से एक लिस्ट फेच करो और उसे अल्फाबेटिकली सॉर्ट करो","<ul id='sortedList'></ul><script>fetch('.../users').then(r=>r.json()).then(users=>users.sort((a,b)=>a.name.localeCompare(b.name)).forEach(u=>{...}));</script>"
"एक टू-डू आइटम को 'completed' मार्क करने के लिए PATCH रिक्वेस्ट भेजो","<script>fetch('.../todos/1', { method:'PATCH', body:JSON.stringify({completed:true}), headers:{'Content-type':'application/json'} });</script>"
"API से एक GIF इमेज लोड करो","<img id='gif'><script>fetch('https://api.giphy.com/v1/gifs/random?api_key=...').then(r=>r.json()).then(d=>document.getElementById('gif').src=d.data.images.original.url);</script>"
"API से मिले डेटा को फ़िल्टर करो","<script>fetch('.../posts').then(r=>r.json()).then(posts => { const filtered = posts.filter(p => p.userId === 1); console.log(filtered); });</script>"
"एक लिस्ट के पहले तीन आइटम्स को स्लाइस करो","numbers = [0, 1, 2, 3, 4, 5]\nfirst_three = numbers[0:3]"
"एक लिस्ट के आखिरी दो आइटम्स को स्लाइस करो","numbers = [0, 1, 2, 3, 4, 5]\nlast_two = numbers[-2:]"
"लिस्ट कॉम्प्रिहेंशन का उपयोग करके नंबरों का स्क्वायर बनाओ","numbers = [1, 2, 3, 4]\nsquares = [n**2 for n in numbers]"
"एक लिस्ट को अल्फाबेटिकली सॉर्ट करो","words = ['banana', 'apple', 'cherry']\nwords.sort()"
"एक लिस्ट को रिवर्स करो","items = ['a', 'b', 'c']\nitems.reverse()"
"`enumerate` का उपयोग करके इंडेक्स और वैल्यू के साथ लूप चलाओ","fruits = ['apple', 'banana', 'cherry']\nfor index, fruit in enumerate(fruits):\n    print(f'Index: {index}, Fruit: {fruit}')"
"एक डिक्शनरी की सभी keys प्राप्त करो","person = {'name': 'Amit', 'age': 25}\nkeys = person.keys()"
"एक डिक्शनरी की सभी values प्राप्त करो","person = {'name': 'Amit', 'age': 25}\nvalues = person.values()"
"एक डिक्शनरी के सभी की-वैल्यू पेयर्स प्राप्त करो","person = {'name': 'Amit', 'age': 25}\nitems = person.items()"
"`get()` मेथड का उपयोग करके एक वैल्यू प्राप्त करो","person = {'name': 'Amit'}\nname = person.get('name', 'Not Found')"
"चेक करो कि एक की (key) डिक्शनरी में मौजूद है या नहीं","person = {'name': 'Amit'}\nif 'age' in person:\n    print('Age exists')\nelse:\n    print('Age does not exist')"
"डुप्लीकेट वैल्यू हटाने के लिए एक सेट (set) बनाओ","numbers = [1, 2, 2, 3, 3, 3]\nunique_numbers = set(numbers)"
"एक सेट में एक आइटम जोड़ो","my_set = {1, 2}\nmy_set.add(3)"
"दो सेट्स का यूनियन निकालो","set1 = {1, 2, 3}\nset2 = {3, 4, 5}\nunion_set = set1.union(set2)"
"दो सेट्स का इंटरसेक्शन निकालो","set1 = {1, 2, 3}\nset2 = {3, 4, 5}\nintersection_set = set1.intersection(set2)"
"एक फाइल को पढ़ने के लिए खोलो","file = open('myfile.txt', 'r')"
"एक फाइल का पूरा कंटेंट पढ़ो","with open('myfile.txt', 'r') as f:\n    content = f.read()"
"एक फाइल को लाइन-बाय-लाइन पढ़ो","with open('myfile.txt', 'r') as f:\n    for line in f:\n        print(line.strip())"
"एक फाइल में लिखने के लिए उसे खोलो","file = open('newfile.txt', 'w')"
"एक फाइल में एक लाइन लिखो","with open('newfile.txt', 'w') as f:\n    f.write('Hello, this is a new file!')"
"एक फाइल के अंत में एक नई लाइन जोड़ो","with open('logfile.txt', 'a') as f:\n    f.write('New log entry.\\n')"
"`with` स्टेटमेंट का उपयोग करके एक फाइल को सुरक्षित रूप से खोलो","with open('data.txt', 'r') as f:\n    data = f.read()"
"डिफ़ॉल्ट आर्गुमेंट वाला एक फंक्शन बनाओ","def greet(name='Guest'):\n    print(f'Hello, {name}')"
"कीवर्ड आर्गुमेंट का उपयोग करके एक फंक्शन को कॉल करो","def person_info(name, age):\n    print(f'{name} is {age} years old.')\nperson_info(age=25, name='Amit')"
"`*args` का उपयोग करके एक फंक्शन बनाओ जो कितने भी आर्गुमेंट ले सके","def add_all(*numbers):\n    return sum(numbers)"
"`**kwargs` का उपयोग करके एक फंक्शन बनाओ जो कीवर्ड आर्गुमेंट ले सके","def print_info(**details):\n    for key, value in details.items():\n        print(f'{key}: {value}')"
"एक सिंपल लैम्ब्डा (lambda) फंक्शन बनाओ","double = lambda x: x * 2\nprint(double(5))"
"`map` और `lambda` का उपयोग करके एक लिस्ट के सभी आइटम्स को बदलो","numbers = [1, 2, 3, 4]\ndoubled_numbers = list(map(lambda x: x * 2, numbers))"
"`filter` और `lambda` का उपयोग करके एक लिस्ट से सिर्फ सम (even) नंबर निकालो","numbers = [1, 2, 3, 4, 5, 6]\neven_numbers = list(filter(lambda x: x % 2 == 0, numbers))"
"`.format()` मेथड का उपयोग करके एक स्ट्रिंग को फॉर्मेट करो","name = 'Amit'\nage = 25\nprint('My name is {} and I am {} years old.'.format(name, age))"
"पाइथन में एक मल्टी-लाइन स्ट्रिंग बनाओ","my_string = 'This is the first line.\\nThis is the second line.'"
"`try...except` का उपयोग करके एक एरर को हैंडल करो","try:\n    result = 10 / 0\nexcept ZeroDivisionError:\n    print('Error: Cannot divide by zero!')"
"`finally` ब्लॉक का उपयोग करो जो हमेशा चलता है","try:\n    f = open('file.txt', 'r')\nexcept FileNotFoundError:\n    print('File not found')\nfinally:\n    print('Execution finished.')"
"पाइथन में एक ValueError एक्सेप्शन रेज (raise) करो","x = -1\nif x < 0:\n    raise ValueError('Number cannot be negative')"
"एक लिस्ट में किसी खास इंडेक्स पर एक आइटम इंसर्ट करो","fruits = ['apple', 'cherry']\nfruits.insert(1, 'banana')"
"एक लिस्ट से दूसरे इंडेक्स वाले आइटम को हटाओ (`pop`)","fruits = ['apple', 'banana', 'cherry']\nfruits.pop(1)"
"एक लिस्ट में एक आइटम कितनी बार आया है, यह काउंट करो","numbers = [1, 2, 2, 3, 2]\ncount_of_2 = numbers.count(2)"
"एक डिक्शनरी से `pop()` मेथड का उपयोग करके एक आइटम हटाओ","person = {'name': 'Amit', 'age': 25}\nage = person.pop('age')"
"चेक करो कि एक स्ट्रिंग किसी खास शब्द से शुरू होती है या नहीं","text = 'Hello World'\nprint(text.startswith('Hello'))"
"चेक करो कि एक स्ट्रिंग किसी खास शब्द पर खत्म होती है या नहीं","filename = 'document.txt'\nprint(filename.endswith('.txt'))"
"एक स्ट्रिंग के दोनों ओर से व्हाइटस्पेस हटाओ","text = '  hello world  '\nclean_text = text.strip()"
"एक मल्टी-लाइन स्ट्रिंग को लाइनों की एक लिस्ट में बदलो","text = 'line one\\nline two'\nlines = text.splitlines()"
"एक मॉड्यूल से सिर्फ एक फंक्शन इम्पोर्ट करो","from math import sqrt"
"`os` मॉड्यूल का उपयोग करके वर्तमान वर्किंग डायरेक्टरी पता करो","import os\ncurrent_dir = os.getcwd()"
"`os` मॉड्यूल का उपयोग करके एक डायरेक्टरी की सभी फाइलें और फोल्डर लिस्ट करो","import os\nall_items = os.listdir('.') # '.' मतलब वर्तमान डायरेक्टरी"
"`datetime` मॉड्यूल का उपयोग करके वर्तमान तारीख और समय प्राप्त करो","import datetime\nnow = datetime.datetime.now()"
"एक डेट ऑब्जेक्ट को एक खास फॉर्मेट में स्ट्रिंग के रूप में दिखाओ","import datetime\nnow = datetime.datetime.now()\nprint(now.strftime('%d-%m-%Y %H:%M:%S'))"
"एक सिंपल 'Person' क्लास बनाओ जिसमें एक मेथड हो","class Person:\n    def __init__(self, name):\n        self.name = name\n    def introduce(self):\n        return f'My name is {self.name}'"
"एक क्लास बनाओ जो दूसरी क्लास से इनहेरिट करे (Inheritance)","class Animal:\n    def speak(self):\n        return 'Some sound'\nclass Dog(Animal):\n    def speak(self):\n        return 'Woof!'"
"`csv` मॉड्यूल का उपयोग करके एक CSV फाइल पढ़ो","import csv\nwith open('data.csv', 'r') as file:\n    reader = csv.reader(file)\n    for row in reader:\n        print(row)"
"पाइथन में 'Hello, World!' प्रिंट करो","print('Hello, World!')"
"एक वेरिएबल 'x' बनाओ और उसे मान 10 दो","x = 10"
"एक वेरिएबल की वैल्यू प्रिंट करो","name = 'Amit'\nprint(name)"
"एक इंटीजर (integer) वेरिएबल बनाओ","age = 25"
"एक स्ट्रिंग (string) वेरिएबल बनाओ","city = 'Lucknow'"
"एक फ्लोट (float) वेरिएबल बनाओ","price = 99.95"
"एक बूलियन (True/False) वेरिएबल बनाओ","is_active = True"
"पाइथन में दो नंबरों को जोड़ो","result = 5 + 3\nprint(result)"
"पाइथन में दो नंबरों को घटाओ","result = 10 - 4"
"पाइथन में दो नंबरों को गुणा करो","product = 7 * 6"
"पाइथन में दो नंबरों को विभाजित करो","quotient = 20 / 4"
"पाइथन में एक सिंगल-लाइन कमेंट लिखो","# This is a comment"
"पाइथन में एक मल्टी-लाइन कमेंट लिखो","""\nThis is a\nmulti-line comment.\n"""
"यूज़र से उसका नाम पूछो और प्रिंट करो","name = input('Enter your name: ')\nprint('Hello, ' + name)"
"दो स्ट्रिंग्स को एक साथ जोड़ो","first_name = 'Amit'\nlast_name = 'Saka'\nfull_name = first_name + ' ' + last_name"
"`f-string` का उपयोग करके एक वेरिएबल को स्ट्रिंग में डालो","name = 'Amit'\nprint(f'Hello, {name}!')"
"एक स्ट्रिंग को इंटीजर में बदलो","str_num = '123'\nnum = int(str_num)"
"एक इंटीजर को स्ट्रिंग में बदलो","num = 123\nstr_num = str(num)"
"एक फंक्शन बनाओ जो 'Hello' प्रिंट करे","def greet():\n    print('Hello')"
"एक फंक्शन को कॉल करो","def greet():\n    print('Hello')\ngreet()"
"एक पैरामीटर लेने वाला फंक्शन बनाओ","def greet(name):\n    print(f'Hello, {name}')"
"एक फंक्शन बनाओ जो दो नंबरों का योग लौटाए (return)","def add(a, b):\n    return a + b"
"पाइथन में तीन फलों की एक लिस्ट बनाओ","fruits = ['apple', 'banana', 'cherry']"
"एक लिस्ट का दूसरा आइटम एक्सेस करो","fruits = ['apple', 'banana', 'cherry']\nprint(fruits[1])"
"एक लिस्ट की लम्बाई पता करो","fruits = ['apple', 'banana', 'cherry']\nprint(len(fruits))"
"एक लिस्ट के अंत में एक आइटम जोड़ो (`append`)","fruits = ['apple']\nfruits.append('banana')"
"एक लिस्ट से 'banana' को हटाओ (`remove`)","fruits = ['apple', 'banana', 'cherry']\nfruits.remove('banana')"
"पाइथन में `if` स्टेटमेंट का उपयोग करो","age = 20\nif age >= 18:\n    print('You are an adult.')"
"पाइथन में `if-else` स्टेटमेंट का उपयोग करो","x = 10\nif x > 5:\n    print('Greater than 5')\nelse:\n    print('Not greater than 5')"
"पाइथन में `if-elif-else` का उपयोग करो","num = 0\nif num > 0:\n    print('Positive')\nelif num < 0:\n    print('Negative')\nelse:\n    print('Zero')"
"`for` लूप का उपयोग करके 0 से 4 तक गिनती प्रिंट करो","for i in range(5):\n    print(i)"
"`for` लूप का उपयोग करके एक लिस्ट के सभी आइटम्स को प्रिंट करो","fruits = ['apple', 'banana', 'cherry']\nfor fruit in fruits:\n    print(fruit)"
"`while` लूप का उपयोग करके 1 से 3 तक गिनती करो","i = 1\nwhile i <= 3:\n    print(i)\n    i += 1"
"लूप को बीच में रोकने के लिए `break` का उपयोग करो","for i in range(10):\n    if i == 5:\n        break\n    print(i)"
"लूप में एक इटरेशन को छोड़ने के लिए `continue` का उपयोग करो","for i in range(5):\n    if i == 2:\n        continue\n    print(i)"
"एक डिक्शनरी बनाओ जिसमें नाम और उम्र हो","person = {'name': 'Amit', 'age': 25}"
"एक डिक्शनरी से 'name' की वैल्यू प्राप्त करो","person = {'name': 'Amit', 'age': 25}\nprint(person['name'])"
"एक डिक्शनरी में एक नया की-वैल्यू पेयर जोड़ो","person = {'name': 'Amit'}\nperson['city'] = 'Lucknow'"
"एक टपल (tuple) बनाओ","colors = ('red', 'green', 'blue')"
"पाइथन में 'math' मॉड्यूल को इम्पोर्ट करो","import math"
"पाइथन में 'random' मॉड्यूल को इम्पोर्ट करो","import random"
"'math' मॉड्यूल से स्क्वायर रूट निकालो","import math\nprint(math.sqrt(16))"
"एक स्ट्रिंग को अपरकेस में बदलो","text = 'hello'\nprint(text.upper())"
"एक स्ट्रिंग को लोअरकेस में बदलो","text = 'HELLO'\nprint(text.lower())"
"एक स्ट्रिंग में एक सबस्ट्रिंग को ढूंढो (`find`)","text = 'hello world'\nprint(text.find('world'))"
"बूलियन लॉजिक `and` ऑपरेटर का उपयोग करो","if 5 > 1 and 10 > 5:\n    print('Both conditions are true')"
"बूलियन लॉजिक `or` ऑपरेटर का उपयोग करो","if 5 > 10 or 10 > 5:\n    print('At least one condition is true')"
"बूलियन लॉजिक `not` ऑपरेटर का उपयोग करो","is_raining = False\nif not is_raining:\n    print('It is not raining')"
"चेक करो कि एक आइटम लिस्ट में है या नहीं","fruits = ['apple', 'banana']\nif 'apple' in fruits:\n    print('Yes, apple is in the list!')"
"पेज का HTML लोड होने के बाद एक फंक्शन चलाओ (DOMContentLoaded)","<script>document.addEventListener('DOMContentLoaded', function() { console.log('DOM fully loaded and parsed'); });</script>"
"पेज पूरी तरह (इमेज सहित) लोड होने के बाद एक फंक्शन चलाओ (window.onload)","<script>window.onload = function() { console.log('Page including images and stylesheets is fully loaded'); };</script>"
"फॉर्म सबमिट होने पर डिफ़ॉल्ट एक्शन को रोको और एक फंक्शन चलाओ","<form id='myForm'><input type='text' value='test'><button type='submit'>Submit</button></form><script>document.getElementById('myForm').addEventListener('submit', function(event){ event.preventDefault(); alert('Default form submission prevented!'); });</script>"
"एक इनपुट फील्ड में की (key) छोड़ने पर कुछ करो (keyup)","<input onkeyup=""console.log('Key up event fired!')"" placeholder='Type something'>"
"कोई भी की दबाने पर उसका कोड पता करो (keydown)","<script>document.body.addEventListener('keydown', function(event) { console.log('Key pressed: ' + event.key + ', Key code: ' + event.keyCode); });</script>"
"`event` ऑब्जेक्ट का उपयोग करके माउस की क्लिक पोजीशन पता करो","<div onclick=""alert('Clicked at X: ' + event.clientX + ', Y: ' + event.clientY)"" style='width:100px; height:50px; border:1px solid; background:#f0f0f0;'>Click anywhere in this box</div>"
"`event.target` का उपयोग करके क्लिक किए गए एलिमेंट का टैग नाम पता करो","<button onclick=""alert('You clicked on a ' + event.target.tagName)"">Click Me</button><p onclick=""alert('You clicked on a ' + event.target.tagName)"">Click Me Too</p>"
"इवेंट बबलिंग को रोकने के लिए `stopPropagation()` का उपयोग करो","<div onclick=""alert('Div clicked. This will not fire if paragraph is clicked.')"" style='padding:20px; border:1px solid;'><p onclick=""event.stopPropagation(); alert('Paragraph clicked')"">Click me</p></div>"
"जावास्क्रिप्ट से एक इमेज एलिमेंट बनाओ और उसे बॉडी में जोड़ो","<script>const newImage = document.createElement('img'); newImage.src = 'https://via.placeholder.com/100'; newImage.alt = 'A placeholder image'; document.body.appendChild(newImage);</script>"
"एक एलिमेंट को दूसरे एलिमेंट से पहले इंसर्ट करो","<div id='containerDiv'><p id='pTwo'>Paragraph Two</p></div><script>const pOne = document.createElement('p'); pOne.innerText='Paragraph One'; const pTwo = document.getElementById('pTwo'); document.getElementById('containerDiv').insertBefore(pOne, pTwo);</script>"
"`insertAdjacentHTML` का उपयोग करके 'h3' टैग इंसर्ट करो","<div id='insertBox' style='border:1px solid;'></div><script>document.getElementById('insertBox').insertAdjacentHTML('beforeend', '<h3>This is a new heading</h3>');</script>"
"किसी एलिमेंट के पैरेंट एलिमेंट का बैकग्राउंड बदलो","<div id='parentDiv' style='padding:10px;'><p onclick=""this.parentElement.style.backgroundColor='yellow'"">Click me to highlight my parent</p></div>"
"किसी एलिमेंट के सभी चिल्ड्रेन का बॉर्डर लगाओ","<div id='parentWithChildren' style='border:1px solid; padding:5px;'><p>Child A</p><span>Child B</span></div><script>const children = document.getElementById('parentWithChildren').children; for(let child of children){child.style.border='1px solid red';}</script>"
"किसी एलिमेंट के अगले सिबलिंग का टेक्स्ट बदलो","<ul><li id='item_1'>One</li><li id='item_2'>Two</li></ul><button onclick=""document.getElementById('item_1').nextElementSibling.innerText='Item 2 Changed'"">Change Next Sibling</button>"
"किसी एलिमेंट के पिछले सिबलिंग को सिलेक्ट करो","<ul><li>One</li><li id='item_current'>Two</li></ul><script>var previousElement = document.getElementById('item_current').previousElementSibling;</script>"
"HTML `data-*` एट्रिब्यूट को जावास्क्रिप्ट से एक्सेस करो","<div id='userProfile' data-user-id='12345' data-user-role='admin'>Amit</div><script>const userDiv = document.getElementById('userProfile'); alert('User role is: ' + userDiv.dataset.userRole);</script>"
"जावास्क्रिप्ट से एक `data-*` एट्रिब्यूट को बदलो","<p id='dataPara' data-status='active'>Status</p><button onclick=""document.getElementById('dataPara').dataset.status = 'inactive';"">Set to Inactive</button>"
"पेज स्क्रॉल करने पर कंसोल में कुछ लॉग करो","<div style='height:1000px;'>Scroll this page</div><script>window.addEventListener('scroll', () => console.log('You are scrolling!'));</script>"
"माउस मूव करने पर उसका रंग बदलने वाला div बनाओ","<div onmousemove=""this.style.backgroundColor = 'lightblue'"" onmouseout=""this.style.backgroundColor = 'transparent'"" style='width:100px; height:100px; border:1px solid;'>Move mouse here</div>"
"इनपुट फील्ड पर फोकस और ब्लर इवेंट्स को ट्रैक करो","<input type='text' onfocus=""console.log('Input focused!')"" onblur=""console.log('Input blurred!')"" placeholder='Click in and out of this field'>"
"पेज का आकार बदलने पर विंडो की चौड़ाई दिखाओ (resize event)","<p>Window width: <span id='width'></span></p><script>window.addEventListener('resize', () => document.getElementById('width').innerText = window.innerWidth);</script>"
"डबल-क्लिक इवेंट का उपयोग करो","<button ondblclick=""alert('Double clicked!')"">Double Click Me</button>"
"एलिमेंट बनाने और एट्रिब्यूट सेट करने के लिए एक फंक्शन बनाओ","<script>function createImage(src) { const img = document.createElement('img'); img.setAttribute('src', src); document.body.appendChild(img); } createImage('https://via.placeholder.com/50');</script>"
"HTML `template` टैग का उपयोग करो","<template id='myTemplate'><p>This is a template.</p></template><button onclick=""var content = document.getElementById('myTemplate').content.cloneNode(true); document.body.appendChild(content);"">Use Template</button>"
"पेज से एक एलिमेंट को पूरी तरह से हटाओ","<p id='removeMe'>I will be removed.</p><button onclick=""document.getElementById('removeMe').remove()"">Remove Paragraph</button>"
"एक एलिमेंट की सभी CSS क्लासेज़ को दिखाओ","<div class='class1 class2' id='classDiv'></div><script>alert(document.getElementById('classDiv').classList);</script>"
"पेस्ट इवेंट को डिटेक्ट करो","<input type='text' onpaste=""alert('You pasted text!')"" placeholder='Paste something here'>"
"कॉपी इवेंट को डिटेक्ट करो","<p oncopy=""alert('You copied this text!')"">Copy this text.</p>"
"कट इवेंट को डिटेक्ट करो","<input type='text' oncut=""alert('You cut text!')"" value='Cut this text'>"
"एक एलिमेंट को क्लोन (clone) करो","<p id='original'>Original</p><button onclick=""var clone = document.getElementById('original').cloneNode(true); document.body.appendChild(clone);"">Clone Paragraph</button>"
"`document.createElement` से एक div बनाओ और उसे स्टाइल करो","<script>const myDiv = document.createElement('div'); myDiv.style.width='50px'; myDiv.style.height='50px'; myDiv.style.background='coral'; document.body.appendChild(myDiv);</script>"
"एक बटन बनाओ जो पेज का टाइटल बदले","<button onclick=""document.title = 'New Title at ' + new Date().toLocaleTimeString();"">Change Title</button>"
"किसी एलिमेंट के अंदर के HTML को पूरी तरह से बदलो","<div id='replaceBox'><p>Old content</p></div><button onclick=""document.getElementById('replaceBox').innerHTML='<h2>New Content</h2>';"">Replace Content</button>"
"पेज लोड होने पर इनपुट फील्ड में ऑटोमेटिकली फोकस करो","<input type='text' id='focusInput'><script>window.onload = function(){ document.getElementById('focusInput').focus(); };</script>"
"एलिमेंट के `innerHTML` और `outerHTML` में अंतर दिखाओ","<div id='testDiv'><p>Content</p></div><script>console.log(document.getElementById('testDiv').innerHTML); console.log(document.getElementById('testDiv').outerHTML);</script>"
"एक इनपुट की वैल्यू को दूसरे इनपुट में रियल-टाइम में कॉपी करो","<input placeholder='Type here...' onkeyup=""document.getElementById('outputInput').value=this.value""><input id='outputInput' placeholder='...and it appears here' readonly>"
"चेक करो कि एक एलिमेंट में कोई एट्रिब्यूट है या नहीं","<div id='attrDiv' title='hello'></div><script>alert(document.getElementById('attrDiv').hasAttribute('title'));</script>"
"एक एलिमेंट से एट्रिब्यूट हटाओ","<a id='linkToRemove' href='#'>Link</a><button onclick=""document.getElementById('linkToRemove').removeAttribute('href')"">Remove Link</button>"
"जावास्क्रिप्ट से CSS की `:hover` स्टेट को बदलो","<style>.my-btn:hover{background:blue; color:white;}</style><button class='my-btn'>Hover me</button>"
"कीबोर्ड से 'Enter' दबाने पर फॉर्म सबमिट करो","<input type='text' onkeydown=""if(event.key === 'Enter'){ alert('Enter was pressed!'); }"">"
"पेज को रीलोड करने के लिए एक बटन बनाओ","<button onclick='location.reload()'>Reload Page</button>"
"यूज़र से उसका स्क्रीन कलर डेप्थ पता करो","<script>alert('Your screen color depth is: ' + screen.colorDepth);</script>"
"एक लिंक पर क्लिक होने से रोको","<a href='https://google.com' onclick=""event.preventDefault(); alert('Navigation stopped!')"">Go to Google (Prevented)</a>"
"पेज पर कहीं भी क्लिक करने पर अलर्ट दिखाओ","<script>document.body.addEventListener('click', () => alert('Body was clicked!'), true);</script>"
"यह पता करो कि क्लिक करते समय Shift की दबी थी या नहीं","<button onclick=""alert('Shift key pressed: ' + event.shiftKey)"">Click or Shift+Click</button>"
"एक div को फुलस्क्रीन करने के लिए बटन बनाओ","<div id='fullscreenDiv'>Content</div><button onclick=""document.getElementById('fullscreenDiv').requestFullscreen()"">Go Fullscreen</button>"
"पेज की स्क्रॉल पोजीशन पता करो","<div style='height:1000px'></div><script>window.onscroll = () => console.log('Scroll Y: ' + window.scrollY);</script>"
"एक एलिमेंट तक स्मूथली स्क्रॉल करो","<div id='target' style='margin-top:800px;'>Target</div><button onclick=""document.getElementById('target').scrollIntoView({behavior: 'smooth'})"">Scroll to Target</button>"
"पेज की दृश्यता (visibility) बदलने पर डिटेक्ट करो","<script>document.addEventListener('visibilitychange', () => document.title = document.visibilityState);</script>"
"पाँच फलों का एक जावास्क्रिप्ट एरे बनाओ","<script>const fruits = ['Apple', 'Banana', 'Orange', 'Mango', 'Grapes'];</script>"
"एक एरे का तीसरा एलिमेंट एक्सेस करो","<script>const fruits = ['Apple', 'Banana', 'Orange']; console.log(fruits[2]);</script>"
"एक एरे की लम्बाई पता करो","<script>const fruits = ['Apple', 'Banana', 'Orange']; console.log(fruits.length);</script>"
"`for` लूप का उपयोग करके एक एरे के सभी आइटम्स को प्रिंट करो","<script>const fruits = ['Apple', 'Banana', 'Cherry']; for(let i=0; i<fruits.length; i++){ console.log(fruits[i]); }</script>"
"`forEach` लूप का उपयोग करके एक एरे के आइटम्स को प्रिंट करो","<script>const fruits = ['Apple', 'Banana', 'Cherry']; fruits.forEach(function(fruit) { console.log(fruit); });</script>"
"एक एरे के अंत में एक नया आइटम जोड़ो (`push`)","<script>const fruits = ['Apple', 'Banana']; fruits.push('Orange'); console.log(fruits);</script>"
"एक एरे के अंत से एक आइटम हटाओ (`pop`)","<script>const fruits = ['Apple', 'Banana', 'Orange']; fruits.pop(); console.log(fruits);</script>"
"एक व्यक्ति का नाम और शहर वाला एक जावास्क्रिप्ट ऑब्जेक्ट बनाओ","<script>const person = { name: 'Amit', city: 'Lucknow' };</script>"
"एक ऑब्जेक्ट की 'name' प्रॉपर्टी को एक्सेस करो","<script>const person = {name: 'Amit', city: 'Lucknow'}; console.log(person.name);</script>"
"ब्रैकेट नोटेशन का उपयोग करके एक ऑब्जेक्ट की प्रॉपर्टी को एक्सेस करो","<script>const person = {name: 'Amit', city: 'Lucknow'}; console.log(person['city']);</script>"
"एक ऑब्जेक्ट में एक नई 'age' प्रॉपर्टी जोड़ो","<script>const person = {name: 'Amit'}; person.age = 25; console.log(person);</script>"
"दो नंबरों को जोड़ने वाला एक फंक्शन बनाओ","<script>function addNumbers(a, b) { return a + b; } console.log(addNumbers(5, 10));</script>"
"एक कंडीशन चेक करो कि कोई व्यक्ति वोट दे सकता है या नहीं (`if-else`)","<script>let age = 20; if (age >= 18) { console.log('Can vote'); } else { console.log('Cannot vote'); }</script>"
"ग्रेड देने के लिए `if-else if-else` का उपयोग करो","<script>let score = 85; if (score >= 90) { console.log('Grade A'); } else if (score >= 80) { console.log('Grade B'); } else { console.log('Grade C'); }</script>"
"`switch` स्टेटमेंट का उपयोग करके दिन का नाम बताओ","<script>let day = 2; switch(day) { case 1: console.log('Monday'); break; case 2: console.log('Tuesday'); break; default: console.log('Other day'); }</script>"
"टर्नेरी ऑपरेटर का उपयोग करके एक कंडीशन चेक करो","<script>let isMember = true; let price = isMember ? '$5.00' : '$10.00'; console.log('Price is ' + price);</script>"
"`map` मेथड का उपयोग करके एक एरे के सभी नंबरों को दोगुना करो","<script>const numbers = [1, 2, 3, 4]; const doubled = numbers.map(num => num * 2); console.log(doubled);</script>"
"`filter` मेथड का उपयोग करके 10 से बड़े नंबरों को ढूंढो","<script>const numbers = [5, 12, 8, 20, 1]; const largeNumbers = numbers.filter(num => num > 10); console.log(largeNumbers);</script>"
"`reduce` मेथड का उपयोग करके एक एरे के सभी नंबरों का योग निकालो","<script>const numbers = [1, 2, 3, 4, 5]; const sum = numbers.reduce((total, num) => total + num, 0); console.log('Sum is ' + sum);</script>"
"`find` मेथड का उपयोग करके 'Amit' नाम वाले व्यक्ति को ढूंढो","<script>const users = [{name:'Ria', age:22}, {name:'Amit', age:25}]; const user = users.find(u => u.name === 'Amit'); console.log(user);</script>"
"चेक करो कि एक एरे में 'Banana' शामिल है या नहीं","<script>const fruits = ['Apple', 'Banana', 'Mango']; console.log(fruits.includes('Banana'));</script>"
"एक स्ट्रिंग को स्पेस के आधार पर एक एरे में बदलो (`split`)","<script>const sentence = 'Hello world this is a test'; const words = sentence.split(' '); console.log(words);</script>"
"एक एरे के आइटम्स को कॉमा से जोड़कर एक स्ट्रिंग बनाओ (`join`)","<script>const words = ['Hello', 'World']; const sentence = words.join(', '); console.log(sentence);</script>"
"एक स्ट्रिंग को अपरकेस में बदलो","<script>let text = 'hello world'; console.log(text.toUpperCase());</script>"
"एक स्ट्रिंग को लोअरकेस में बदलो","<script>let text = 'HELLO WORLD'; console.log(text.toLowerCase());</script>"
"एक स्ट्रिंग का एक हिस्सा निकालो (`slice`)","<script>let text = 'HelloWorld'; console.log(text.slice(0, 5));</script>"
"एक स्ट्रिंग में एक शब्द को दूसरे शब्द से बदलो (`replace`)","<script>let text = 'I like cats. Cats are great.'; let newText = text.replace('cats', 'dogs'); console.log(newText);</script>"
"0 और 1 के बीच एक रैंडम नंबर जेनरेट करो","<script>console.log(Math.random());</script>"
"एक नंबर को निकटतम छोटे पूर्णांक में बदलो (`floor`)","<script>console.log(Math.floor(4.9));</script>"
"एक नंबर को निकटतम बड़े पूर्णांक में बदलो (`ceil`)","<script>console.log(Math.ceil(4.1));</script>"
"एक नंबर को निकटतम पूर्णांक में राउंड करो (`round`)","<script>console.log(Math.round(4.5));</script>"
"एक लिस्ट में से सबसे बड़ा नंबर ढूंढो (`max`)","<script>console.log(Math.max(10, 20, 5, -1));</script>"
"वर्तमान तारीख और समय प्राप्त करो","<script>const now = new Date(); console.log(now.toString());</script>"
"एक तारीख में से सिर्फ साल निकालो","<script>const d = new Date(); console.log('Year: ' + d.getFullYear());</script>"
"एक तारीख में से सिर्फ महीना निकालो (0-11)","<script>const d = new Date(); console.log('Month: ' + d.getMonth());</script>"
"`while` लूप का उपयोग करके 0 से 2 तक गिनती करो","<script>let i = 0; while (i < 3) { console.log(i); i++; }</script>"
"`do...while` लूप का उपयोग करो","<script>let i = 0; do { console.log(i); i++; } while (i < 3);</script>"
"लूप को बीच में रोकने के लिए `break` का उपयोग करो","<script>for(let i=0; i<5; i++){ if(i===3){break;} console.log(i); }</script>"
"लूप में एक इटरेशन को छोड़ने के लिए `continue` का उपयोग करो","<script>for(let i=0; i<5; i++){ if(i===2){continue;} console.log(i); }</script>"
"एक ऑब्जेक्ट बनाओ जिसमें एक मेथड (फंक्शन) हो","<script>const car = {brand:'Tata', start: function(){return 'Engine started';}}; console.log(car.start());</script>"
"दो स्ट्रिंग्स को एक साथ जोड़ो","<script>let str1 = 'Hello'; let str2 = ' World'; console.log(str1 + str2);</script>"
"चेक करो कि एक वेरिएबल का टाइप 'string' है या नहीं","<script>let name = 'Amit'; console.log(typeof name === 'string');</script>"
"एक ऑब्जेक्ट की सभी keys को एक एरे में प्राप्त करो","<script>const person = {name:'Amit', age:25}; console.log(Object.keys(person));</script>"
"एक ऑब्जेक्ट की सभी values को एक एरे में प्राप्त करो","<script>const person = {name:'Amit', age:25}; console.log(Object.values(person));</script>"
"एक स्ट्रिंग को नंबर में बदलो (`parseInt`)","<script>let strNum = '123'; let num = parseInt(strNum); console.log(num + 7);</script>"
"एक नंबर को स्ट्रिंग में बदलो","<script>let num = 123; let strNum = num.toString(); console.log(strNum + ' is a string');</script>"
"एक ऑब्जेक्ट को डीप कॉपी (deep copy) करो","<script>const original = {a:1, b:{c:2}}; const copy = JSON.parse(JSON.stringify(original));</script>"
"ES6 क्लास का उपयोग करके एक 'Car' क्लास बनाओ","<script>class Car { constructor(brand) { this.brand = brand; } } const myCar = new Car('Tata');</script>"
"ES6 Destructuring का उपयोग करके ऑब्जेक्ट से वैल्यू निकालो","<script>const person = {name:'Amit', age:25}; const {name, age} = person; console.log(name);</script>"
"एक टेक्स्ट इनपुट बनाओ जिसे भरना ज़रूरी (required) हो","<input type='text' required>"
"एक ईमेल इनपुट बनाओ जिसमें ईमेल फॉर्मेट ज़रूरी हो","<input type='email' required placeholder='name@example.com'>"
"एक पासवर्ड फील्ड बनाओ जिसमें कम से कम 8 कैरेक्टर ज़रूरी हों","<input type='password' minlength='8' required>"
"एक 6 अंकों के पिन कोड के लिए इनपुट फील्ड बनाओ","<input type='text' pattern='[0-9]{6}' title='6-digit PIN code' required>"
"एक फ़ोन नंबर इनपुट बनाओ जो 10 अंकों का हो","<input type='tel' pattern='[0-9]{10}' title='10-digit mobile number' required>"
"एक नंबर इनपुट बनाओ जिसमें सिर्फ 18 से 60 तक की वैल्यू डाली जा सके","<input type='number' min='18' max='60' placeholder='Age'>"
"एक सर्च इनपुट फील्ड बनाओ","<input type='search' placeholder='Search...'>"
"एक URL इनपुट फील्ड बनाओ","<input type='url' placeholder='https://example.com' required>"
"फॉर्म के लिए एक फील्डसेट (fieldset) और लीजेंड (legend) बनाओ","<fieldset><legend>Personal Info</legend><label>Name:</label><input type='text'></fieldset>"
"एक 'I agree to the terms' चेकबॉक्स बनाओ जिसे टिक करना ज़रूरी हो","<input type='checkbox' required> I agree to the terms"
"एक सबमिट बटन बनाओ जो तब तक डिसेबल रहे जब तक चेकबॉक्स टिक न हो","<input type='checkbox' onchange=""document.getElementById('submitBtn').disabled = !this.checked;""><button id='submitBtn' type='submit' disabled>Submit</button>"
"एक फॉर्म बनाओ जो सबमिट करने पर पासवर्ड्स के मैच होने को चेक करे","<form onsubmit=""if(document.getElementById('p1').value !== document.getElementById('p2').value){alert('Passwords do not match!'); return false;}""><input id='p1' type='password'><input id='p2' type='password'><input type='submit'></form>"
"एक इनपुट फील्ड बनाओ जो रियल-टाइम में बताए कि पासवर्ड कमजोर है या मजबूत","<input type='password' oninput=""document.getElementById('strength').innerText = this.value.length < 8 ? 'Weak' : 'Strong';""><p>Strength: <span id='strength'></span></p>"
"एक टेक्स्ट इनपुट बनाओ जिसमें अधिकतम 50 कैरेक्टर की लिमिट हो","<input type='text' maxlength='50'>"
"एक फाइल इनपुट बनाओ जो सिर्फ इमेज (jpeg, png) स्वीकार करे","<input type='file' accept='image/jpeg, image/png'>"
"हफ्ते का कोई दिन चुनने के लिए इनपुट फील्ड बनाओ","<input type='week'>"
"महीना और साल चुनने के लिए इनपुट फील्ड बनाओ","<input type='month'>"
"समय चुनने के लिए इनपुट फील्ड बनाओ","<input type='time'>"
"एक फॉर्म बनाओ जिसमें autofocus वाला इनपुट फील्ड हो","<form><input type='text' autofocus placeholder='Cursor will be here'></form>"
"एक readonly टेक्स्ट फील्ड बनाओ जिसे बदला न जा सके","<input type='text' value='This is readonly' readonly>"
"एक फॉर्म में 'novalidate' एट्रिब्यूट का उपयोग करो ताकि ब्राउज़र की डिफ़ॉल्ट वैलिडेशन बंद हो जाए","<form novalidate>...</form>"
"एक टेक्स्टएरिया बनाओ जिसमें 5 रो और 30 कॉलम हों","<textarea rows='5' cols='30'></textarea>"
"एक इनपुट फील्ड में रियल-टाइम में कैरेक्टर काउंट दिखाओ","<input oninput=""document.getElementById('char-count').innerText = this.value.length""><p>Characters: <span id='char-count'>0</span></p>"
"एक रेंज स्लाइडर बनाओ जो 0 से 100 तक जाए और वैल्यू दिखाए","<input type='range' min='0' max='100' value='50' oninput=""this.nextElementSibling.innerText=this.value""><span>50</span>"
"एक सबमिट बटन बनाओ जो क्लिक होने पर अपना टेक्स्ट 'Submitting...' में बदल दे","<button type='submit' onclick=""this.innerText='Submitting...';"">Submit</button>"
"एक फॉर्म बनाओ जिसमें छिपा हुआ (hidden) इनपुट फील्ड हो","<form><input type='hidden' name='userId' value='123'></form>"
"एक फॉर्म के सभी इनपुट को क्लियर करने के लिए रीसेट बटन बनाओ","<form><input type='text'><input type='reset' value='Clear Form'></form>"
"एक इनपुट फील्ड बनाओ जो सिर्फ अपरकेस अक्षर स्वीकार करे","<input type='text' style='text-transform:uppercase;'>"
"एक div को contenteditable बनाकर उसे एक सिंपल टेक्स्ट एडिटर बनाओ","<div contenteditable='true' style='border: 1px solid black; min-height: 50px;'>Type here...</div>"
"एक फॉर्म बनाओ जिसके सबमिट होने पर एक कन्फर्मेशन मैसेज आए","<form onsubmit=""return confirm('Are you sure you want to submit?');"">...</form>"
"एक बटन बनाओ जो एक फॉर्म को जावास्क्रिप्ट से सबमिट करे","<form id='myForm'>...</form><button onclick=""document.getElementById('myForm').submit()"">Submit with JS</button>"
"एक इनपुट फील्ड के लिए मल्टीपल वैलिडेशन पैटर्न सेट करो","<input type='text' pattern='[A-Za-z0-9]{6,}' title='Minimum 6 letters or numbers'>"
"एक बटन बनाओ जो एक डिसेबल्ड फील्ड को इनेबल करे","<input id='myField' type='text' disabled><button onclick=""document.getElementById('myField').disabled=false"">Enable Input</button>"
"एक सिंपल contact form का पूरा HTML ढाँचा बनाओ","<form><fieldset><legend>Contact Us</legend><label>Name:</label><input required><label>Email:</label><input type='email' required><label>Message:</label><textarea required></textarea><button>Send</button></fieldset></form>"
"एक इनपुट फील्ड बनाओ जो खाली होने पर लाल बॉर्डर दिखाए","<input type='text' onblur=""this.style.borderColor = this.value === '' ? 'red' : 'grey'"" style='border: 1px solid grey;'>"
"जावास्क्रिप्ट से एक फॉर्म वैलिडेशन एरर मैसेज दिखाओ","<input id='name-field' type='text' onkeyup=""if(this.value.length < 3) document.getElementById('name-err').style.display='block'; else document.getElementById('name-err').style.display='none';""><p id='name-err' style='color:red; display:none;'>Name must be at least 3 characters.</p>"
"एक कलर पिकर बनाओ जो चुने हुए रंग का hex कोड दिखाए","<input type='color' oninput=""this.nextElementSibling.innerText = this.value""><span>#000000</span>"
"एक ऑटो-कम्प्लीट फीचर को बंद करने के लिए इनपुट बनाओ","<input type='text' autocomplete='off'>"
"एक ऑप्शन ग्रुप के साथ एक ड्रॉपडाउन मेन्यू बनाओ","<select><optgroup label='Swedish Cars'><option>Volvo</option></optgroup><optgroup label='German Cars'><option>Audi</option></optgroup></select>"
"एक से ज़्यादा फाइलों को अपलोड करने के लिए इनपुट बनाओ","<input type='file' multiple>"
"जावास्क्रिप्ट से एक रेडियो बटन का चेक्ड स्टेटस पता करो","<input type='radio' id='radio1' name='r'><button onclick=""alert(document.getElementById('radio1').checked)"">Is Checked?</button>"
"एक फील्ड को जावास्क्रिप्ट से 'required' के रूप में सेट करो","<input id='field1' type='text'><script>document.getElementById('field1').required = true;</script>"
"एक फॉर्म बनाओ जो एंटर की दबाने पर सबमिट न हो","<form onkeydown=""return event.key != 'Enter';"">...</form>"
"पासवर्ड और कन्फर्म पासवर्ड फील्ड बनाओ जो मैच न होने पर एरर दिखाए","<input type='password' id='pass1'><input type='password' id='pass2' onkeyup=""if(document.getElementById('pass1').value != this.value) this.style.borderColor='red'; else this.style.borderColor='green';"">"
"एक फॉर्म में रेडियो बटन के लिए डिफ़ॉल्ट रूप से एक ऑप्शन को चेक्ड रखो","<input type='radio' name='q' value='a'> A <input type='radio' name='q' value='b' checked> B"
"एक सिंपल सर्वे फॉर्म का ढाँचा बनाओ","<form><h3>Survey</h3><p>Your favorite color?</p><input type='radio' name='color'>Red<br><input type='radio' name='color'>Blue<br><button>Submit</button></form>"
"एक स्टेप एट्रिब्यूट वाला नंबर इनपुट बनाओ जो 5 के मल्टीपल में बढ़े","<input type='number' step='5'>"
"एक इनपुट फील्ड बनाओ जिसमें स्पेलचेक बंद हो","<input type='text' spellcheck='false'>"
"एक बटन बनाओ जो क्लिक होने पर फॉर्म को रीसेट करे","<form id='form1'><input value='text'></form><button onclick=""document.getElementById('form1').reset()"">Reset</button>"
"एक इनपुट फील्ड की वैल्यू को जावास्क्रिप्ट से सेट करो","<input id='input1' type='text'><script>document.getElementById('input1').value = 'Initial Value';</script>"
"एक साधारण ब्लॉग पोस्ट का पूरा HTML ढाँचा बनाओ","<!DOCTYPE html><html lang='en'><head><title>My Blog Post</title></head><body><article><h1>Blog Post Title</h1><p>Published on <time datetime='2025-09-27'>September 27, 2025</time></p><section><h2>Introduction</h2><p>This is the first paragraph.</p></section><section><h2>Conclusion</h2><p>This is the conclusion.</p></section></article></body></html>"
"एक कांटेक्ट पेज का ढाँचा बनाओ जिसमें फॉर्म और पता हो","<!DOCTYPE html><html><head><title>Contact Us</title></head><body><h2>Contact Information</h2><address>Lucknow, Uttar Pradesh<br>India</address><h2>Send us a Message</h2><form action='/submit' method='post'><input name='email' placeholder='Your Email'><textarea name='message'></textarea><button>Send</button></form></body></html>"
"एक पोर्टफोलियो प्रोजेक्ट पेज का ढाँचा बनाओ","<!DOCTYPE html><html><head><title>My Project</title></head><body><main><section><h1>Project Title</h1><img src='project-image.jpg' alt='Screenshot of the project' style='max-width:100%;'><p>This is a detailed description of my project.</p><a href='#'>Live Demo</a></section></main></body></html>"
"एक ई-कॉमर्स प्रोडक्ट पेज का ढाँचा बनाओ","<!DOCTYPE html><html><body><div style='display:flex;'><div style='flex:1;'><img src='product.png' alt='Product Image' style='width:100%;'></div><div style='flex:1; padding-left:20px;'><h1>Product Name</h1><p style='font-size:24px; color:green;'>$99.99</p><p>Product description goes here.</p><button>Add to Cart</button></div></div></body></html>"
"एक स्टाइल ब्लॉक के साथ एक HTML पेज बनाओ","<!DOCTYPE html><html><head><title>Internal CSS</title><style>body{background-color:#f0f0f0; font-family:sans-serif;} h1{color:navy;}</style></head><body><h1>This Heading is Navy</h1></body></html>"
"एक स्क्रिप्ट ब्लॉक के साथ एक HTML पेज बनाओ","<!DOCTYPE html><html><body><h2>My To-Do List</h2><ul id='myList'></ul><script>document.getElementById('myList').innerHTML += '<li>New Item from JS</li>';</script></body></html>"
"एक सामान्य लैंडिंग पेज का पूरा ढाँचा","<!DOCTYPE html><html><head><title>Landing Page</title></head><body style='text-align:center; font-family:sans-serif;'><header style='background:#333; color:white; padding:1em;'><h1>My Awesome Product</h1></header><main style='padding:2em;'><h2>It Will Change Your Life</h2><p>Sign up now to get exclusive access.</p><button style='padding:10px 20px; font-size:16px;'>Sign Up Now</button></main><footer style='padding:1em; background:#333; color:white;'><p>&copy; 2025 Awesome Inc.</p></footer></body></html>"
"एक '404 Not Found' एरर पेज का ढाँचा बनाओ","<!DOCTYPE html><html lang='en'><head><title>404 Not Found</title><style>body{text-align:center; font-family:sans-serif;}</style></head><body><h1>404</h1><h2>Page Not Found</h2><p>Sorry, the page you are looking for does not exist.</p><a href='/'>Go back to Homepage</a></body></html>"
"एक फोटो गैलरी पेज का ग्रिड-बेस्ड ढाँचा बनाओ","<!DOCTYPE html><html><head><title>Photo Gallery</title><style>.gallery{display:grid; grid-template-columns: repeat(auto-fit, minmax(150px, 1fr)); gap:10px;}</style></head><body><h1>My Gallery</h1><div class='gallery'><img src='1.jpg' alt='Image 1' style='width:100%;'><img src='2.jpg' alt='Image 2' style='width:100%;'><img src='3.jpg' alt='Image 3' style='width:100%;'></div></body></html>"
"एक FAQ पेज का ढाँचा बनाओ जिसमें 'details' टैग का उपयोग हो","<!DOCTYPE html><html><head><title>FAQ</title></head><body><h2>Frequently Asked Questions</h2><details><summary>What is an AI?</summary><p>Artificial intelligence is intelligence demonstrated by machines.</p></details><details><summary>What is HTML?</summary><p>HyperText Markup Language is the standard markup language for documents designed to be displayed in a web browser.</p></details></body></html>"
"एक टीम मेंबर्स पेज का फ्लेक्सबॉक्स-बेस्ड ढाँचा बनाओ","<!DOCTYPE html><html><body><h2 style='text-align:center;'>Our Team</h2><div class='team-container' style='display:flex; justify-content:space-around; flex-wrap:wrap;'><div class='member' style='text-align:center; margin:10px;'><img src='member1.jpg' alt='Team Member 1' style='width:100px; border-radius:50%;'><h4>Member One</h4><p>CEO</p></div><div class='member' style='text-align:center; margin:10px;'><img src='member2.jpg' alt='Team Member 2' style='width:100px; border-radius:50%;'><h4>Member Two</h4><p>Developer</p></div></div></body></html>"
"एक लॉगइन पेज बनाओ जो स्क्रीन के सेंटर में हो","<!DOCTYPE html><html><head><title>Login</title><style>body,html{height:100%; margin:0; display:flex; justify-content:center; align-items:center; background:#f1f1f1;}</style></head><body><form style='padding:20px; border:1px solid #ccc; background:white;'><h3>Login</h3><input placeholder='Username'><br><br><input placeholder='Password'><br><br><button>Log In</button></form></body></html>"
"एक सिंपल सर्च रिजल्ट्स पेज का UI बनाओ","<!DOCTYPE html><html><body><header><h1>Search Results</h1><p>Showing results for: <strong>AI</strong></p></header><div class='result'><a href='#'><h3>Artificial Intelligence - Wikipedia</h3></a><p>A description of the search result goes here...</p></div><div class='result'><a href='#'><h3>What is AI?</h3></a><p>Another description goes here...</p></div></body></html>"
"एक 'Under Construction' पेज बनाओ","<!DOCTYPE html><html><head><title>Coming Soon</title></head><body style='text-align:center; padding-top:50px; font-family:sans-serif;'><h1>🚧 Coming Soon 🚧</h1><p>Our website is currently under construction. We'll be here soon!</p></body></html>"
"एक टेस्टीमोनियल सेक्शन का लेआउट बनाओ","<section style='background:#f0f0f0; padding:20px;'><h2 style='text-align:center;'>What Our Users Say</h2><div style='display:flex; gap:20px;'><blockquote style='flex:1; border-left:3px solid #ccc; padding-left:10px;'>'This is an amazing product!'<cite>- User A</cite></blockquote><blockquote style='flex:1; border-left:3px solid #ccc; padding-left:10px;'>'I love it! Highly recommend.'<cite>- User B</cite></blockquote></div></section>"
"पेज के अंदर एक सेक्शन पर जाने वाला लिंक बनाओ","<!DOCTYPE html><html><body><nav><a href='#section-b'>Go to Section B</a></nav><div style='height:800px;'><h2 id='section-a'>Section A</h2><p>This is the first section.</p></div><div style='height:800px;'><h2 id='section-b'>Section B</h2><p>You have arrived at section B.</p></div></body></html>"
"HTML कोड में कमेंट्स के साथ एक डॉक्यूमेंट बनाओ","<!DOCTYPE html><html lang='en'><head><title>Page with Comments</title></head><body><h1>My Title</h1></body></html>"
"एक पूरा HTML पेज बनाओ जो 'main.css' और 'app.js' से लिंक्ड हो","<!DOCTYPE html><html lang='en'><head><meta charset='UTF-8'><title>My Web App</title><link rel='stylesheet' href='main.css'></head><body><main><h1>Welcome</h1></main><script src='app.js'></script></body></html>"
"एक वेबपेज का ढाँचा बनाओ जिसमें एक iframe हो जो YouTube वीडियो दिखाए","<!DOCTYPE html><html><body><h2>Embedding a YouTube Video</h2><iframe width='560' height='315' src='https://www.youtube.com/embed/dQw4w9WgXcQ' title='YouTube video player' frameborder='0' allowfullscreen></iframe></body></html>"
"एक सिंपल वेबपेज बनाओ जिसमें ऑडियो और वीडियो दोनों हों","<!DOCTYPE html><html><body><h1>Media Page</h1><h2>Audio</h2><audio controls src='sound.mp3'></audio><h2>Video</h2><video controls width='300' src='movie.mp4'></video></body></html>"
"एक खाली HTML5 पेज का पूरा ढाँचा बनाओ","<!DOCTYPE html><html lang='en'><head><meta charset='UTF-8'><meta name='viewport' content='width=device-width, initial-scale=1.0'><title>Page Title</title></head><body><h1>My First Heading</h1><p>My first paragraph.</p></body></html>"
"एक एक्सटर्नल CSS फाइल 'style.css' को लिंक करो","<link rel='stylesheet' href='style.css'>"
"एक एक्सटर्नल JS फाइल 'script.js' को body के अंत में लिंक करो","<script src='script.js'></script>"
"हेड के अंदर इंटरनल CSS का उपयोग करके body का बैकग्राउंड ग्रे करो","<head><style>body { background-color: #f0f0f0; }</style></head>"
"body के अंत में इंटरनल जावास्क्रिप्ट का उपयोग करके एक अलर्ट दिखाओ","<body><script>alert('Page Loaded!');</script></body>"
"एक हेडर, मेन और फुटर सेक्शन वाला एक पूरा पेज बनाओ","<!DOCTYPE html><html><body><header><h1>Welcome to my Website</h1></header><main><p>This is the main content.</p></main><footer><p>Copyright 2025</p></footer></body></html>"
"Google Fonts से 'Roboto' फॉन्ट को इम्पोर्ट करो","<link rel='preconnect' href='https://fonts.googleapis.com'><link rel='preconnect' href='https://fonts.gstatic.com' crossorigin><link href='https://fonts.googleapis.com/css2?family=Roboto&display=swap' rel='stylesheet'>"
"इम्पोर्ट किए गए 'Roboto' फॉन्ट को पूरी वेबसाइट पर लागू करो","<style>body { font-family: 'Roboto', sans-serif; }</style>"
"Font Awesome आइकन लाइब्रेरी को CDN से लिंक करो","<link rel='stylesheet' href='https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css'>"
"एक Font Awesome 'user' आइकन का उपयोग करो","<i class='fas fa-user'></i>"
"एक 'About' पेज (about.html) का लिंक बनाओ","<a href='about.html'>About Us</a>"
"नेविगेशन मेन्यू के साथ एक बेसिक वेबसाइट का ढाँचा","<body><header><nav><ul><li><a href='index.html'>Home</a></li><li><a href='about.html'>About</a></li><li><a href='contact.html'>Contact</a></li></ul></nav></header><main><h1>Home Page</h1></main></body>"
"एक सर्च फॉर्म बनाओ जो GET मेथड का उपयोग करे","<form action='/search' method='get'><label for='search'>Search:</label><input name='q' id='search' type='text' placeholder='Search...'><button type='submit'>Go</button></form>"
"एक लॉगइन फॉर्म बनाओ जो POST मेथड का उपयोग करे","<form action='/login' method='post'><input name='username' placeholder='Username'><input name='password' placeholder='Password'><button type='submit'>Login</button></form>"
"SEO के लिए một मेटा डिस्क्रिप्शन टैग डालो","<meta name='description' content='This is an awesome website about AI and coding.'>"
"SEO के लिए मेटा कीवर्ड्स टैग डालो","<meta name='keywords' content='HTML, CSS, JavaScript, AI Bot, Coding Assistant'>"
"एक favicon.ico को वेबसाइट से लिंक करो","<link rel='icon' type='image/x-icon' href='/images/favicon.ico'>"
"पेज के कंटेंट को एक मेन कंटेनर div में रैप करो","<body><div class='container'><h1>Main Title</h1><p>All content goes here.</p></div></body>"
"CSS ग्रिड का उपयोग करके एक 2-कॉलम ब्लॉग लेआउट का ढाँचा बनाओ","<style>.grid-container{display:grid; grid-template-columns: 70% 30%; gap: 20px;}</style><div class='grid-container'><main>Article content...</main><aside>Sidebar...</aside></div>"
"एक पूरा HTML पेज बनाओ जो 'style.css' और 'script.js' से लिंक्ड हो","<!DOCTYPE html><html lang='en'><head><title>Complete Page</title><link rel='stylesheet' href='style.css'></head><body><h1>Hello World</h1><script src='script.js'></script></body></html>"
"जावास्क्रिप्ट का उपयोग करके एक ईमेल को वैलिडेट करो","<input type='email' id='emailInput' placeholder='test@example.com'><button onclick=""var email = document.getElementById('emailInput').value; var pattern = /\\S+@\\S+\\.\\S+/; alert('Is valid email: ' + pattern.test(email));"">Validate Email</button>"
"एक टेक्स्टएरिया बनाओ जो कैरेक्टर लिमिट पहुंचने पर वार्निंग दिखाए","<textarea maxlength='100' oninput=""var remaining = 100 - this.value.length; document.getElementById('warningMsg').style.display = remaining < 20 ? 'block' : 'none';""></textarea><p id='warningMsg' style='display:none; color:red;'>Warning: Approaching character limit!</p>"
"एक बटन बनाओ जो एक बार क्लिक होने के बाद डिसेबल हो जाए","<button onclick=""this.disabled=true; this.innerText='Processing...';"">Submit Once</button>"
"CSS का उपयोग करके एक सिंपल पाई चार्ट बनाओ","<div style='width: 100px; height: 100px; border-radius: 50%; background-image: conic-gradient(dodgerblue 0% 70%, lightgrey 70% 100%);'></div>"
"`fetch` API का उपयोग करो और एरर को हैंडल करो","<script>fetch('https://invalid-url.xyz/data').then(response => {if(!response.ok){throw new Error('Network response was not ok');}}).catch(error => console.error('Fetch error:', error));</script>"
"HTML5 `draggable` एट्रिब्यूट का उपयोग करके एक ड्रैग करने योग्य एलिमेंट बनाओ","<p draggable='true' style='border:1px solid; padding:5px; width:100px;'>Drag me</p>"
"यूज़र के ऑनलाइन या ऑफलाइन स्टेटस का पता लगाओ","<p>Your Status: <span id='status'></span></p><script>window.addEventListener('online', () => document.getElementById('status').innerText = 'Online'); window.addEventListener('offline', () => document.getElementById('status').innerText = 'Offline'); document.getElementById('status').innerText = navigator.onLine ? 'Online' : 'Offline';</script>"
"यूज़र की जियोलोकेशन (latitude, longitude) प्राप्त करो","<button onclick=""navigator.geolocation.getCurrentPosition(pos => alert('Your Latitude is: ' + pos.coords.latitude));"">Get My Location</button>"
"एक ऑडियो विज़ुअलाइज़ेशन का UI बनाओ","<canvas width='200' height='50' style='border:1px solid;'></canvas><p>Audio Visualization Canvas</p>"
"एक बटन बनाओ जो पेज को प्रिंट करे","<button onclick='window.print()'>Print this Page</button>"
"एक बटन बनाओ जो टेक्स्ट को बोले (Text-to-Speech)","<input id='speechText' value='Hello world'><button onclick=""var msg = new SpeechSynthesisUtterance(document.getElementById('speechText').value); window.speechSynthesis.speak(msg);"">Speak Text</button>"
"आइकन वाला एक अकॉर्डियन बनाओ जो खुलने/बंद होने पर बदले","<div onclick=""var icon=this.querySelector('span'); var content=this.nextElementSibling; icon.innerText=icon.innerText==='+'?'-':'+'; content.style.display=content.style.display==='block'?'none':'block';"" style='cursor:pointer;'><span style='font-weight:bold;'>+</span> Section Title</div><div style='display:none; padding-left:20px;'><p>Hidden content.</p></div>"
"एक नंबर के लिए प्लस/माइनस बटन वाला इनपुट बनाओ","<button onclick=""document.getElementById('stepper').stepDown()"">-</button><input id='stepper' type='number' value='0' style='width:40px; text-align:center;' readonly><button onclick=""document.getElementById('stepper').stepUp()"">+</button>"
"एक ब्रेडक्रंब (breadcrumb) नेविगेशन बनाओ","<div class='breadcrumbs' style='font-size:14px;'><a href='#'>Home</a> &gt; <a href='#'>Category</a> &gt; <span>Current Page</span></div>"
"एक स्टार रेटिंग बनाओ जिसमें होवर इफ़ेक्ट हो","<style>.stars span:hover, .stars span:hover ~ span {color:grey;}</style><div class='stars' style='font-size:24px; cursor:pointer; color:orange;'><span>★</span><span>★</span><span>★</span><span>★</span><span>★</span></div>"
"आज की तारीख को 'DD-MM-YYYY' फॉर्मेट में दिखाओ","<p id='formattedDate'></p><script>var d = new Date(); var dd = String(d.getDate()).padStart(2, '0'); var mm = String(d.getMonth() + 1).padStart(2, '0'); var yyyy = d.getFullYear(); document.getElementById('formattedDate').innerText = dd + '-' + mm + '-' + yyyy;</script>"
"जावास्क्रिप्ट से एक CSS वेरिएबल का मान स्लाइडर से कंट्रोल करो","<style>:root{--blur-amount: 2px;}</style><img src='image.jpg' width='200' style='filter:blur(var(--blur-amount));'><br><label>Blur:</label><input type='range' min='0' max='10' value='2' oninput=""document.documentElement.style.setProperty('--blur-amount', this.value + 'px')"">"
"मोबाइल पर नेटिव शेयर डायलॉग खोलने के लिए एक बटन बनाओ","<button onclick=""if(navigator.share){navigator.share({title: 'Web Page', text: 'Check this out!', url: window.location.href})}else{alert('Share not supported')}"">Share</button>"
"एक इमेज एडिटर का UI बनाओ जिसमें फ़िल्टर बटन्स हों","<img id='editImg' src='image.jpg' width='200' style='transition: filter 0.3s;'><br><button onclick=""document.getElementById('editImg').style.filter='grayscale(100%)'"">Grayscale</button><button onclick=""document.getElementById('editImg').style.filter='blur(2px)'"">Blur</button><button onclick=""document.getElementById('editImg').style.filter='none'"">Reset</button>"
"एक धन्यवाद मैसेज वाला कॉम्पोनेन्ट बनाओ","<div style='text-align:center; padding:20px; border: 1px solid green; background-color:#e8f5e9; border-radius:5px; font-family:sans-serif;'><h2>Thank You!</h2><p>Your submission has been received.</p></div>"
"CSS से एक कस्टम टूलटिप बनाओ","<style>.tooltip{position:relative; display:inline-block; border-bottom:1px dotted;}.tooltip .tooltiptext{visibility:hidden; width:120px; background-color:black; color:#fff; text-align:center; border-radius:6px; padding:5px; position:absolute; z-index:1; bottom:125%; left:50%; margin-left:-60px; opacity:0; transition:opacity 0.3s;}.tooltip:hover .tooltiptext{visibility:visible; opacity:1;}</style><div class='tooltip'>Hover over me<span class='tooltiptext'>This is a tooltip!</span></div>"
"एक स्नैकबार (toast) नोटिफिकेशन बनाओ जो बटन क्लिक पर दिखे","<style>#snackbar{visibility:hidden; min-width:250px; background-color:#333; color:#fff; text-align:center; border-radius:2px; padding:16px; position:fixed; z-index:1; left:50%; bottom:30px; transform:translateX(-50%);}</style><button onclick=""var x=document.getElementById('snackbar'); x.style.visibility='visible'; setTimeout(function(){ x.style.visibility='hidden';}, 3000);"">Show Snackbar</button><div id='snackbar'>This is a notification message.</div>"
"एक इमेज बनाओ जिस पर होवर करने पर एक ओवरले दिखे","<style>.container{position:relative; width:200px;}.overlay{position:absolute; top:0; bottom:0; left:0; right:0; height:100%; width:100%; opacity:0; transition:.5s ease; background-color:rgba(0,140,186,0.7);}.container:hover .overlay{opacity:1;}</style><div class='container'><img src='image.jpg' alt='Avatar' width='200'><div class='overlay'></div></div>"
"पेज पर राइट-क्लिक करने पर एक कस्टम मेन्यू दिखाओ","<style>#customMenu{display:none; position:absolute; border:1px solid #ccc; background:white; padding:5px; box-shadow: 2px 2px 5px #eee;} #customMenu div{padding: 5px; cursor:pointer;} #customMenu div:hover{background:#f0f0f0;}</style><div id='customMenu'><div>Copy</div><div>Paste</div></div><script>document.oncontextmenu=function(e){e.preventDefault(); var menu=document.getElementById('customMenu'); menu.style.display='block'; menu.style.left=e.pageX+'px'; menu.style.top=e.pageY+'px';}; document.onclick=function(){document.getElementById('customMenu').style.display='none';};</script>"
"एक 'before/after' इमेज स्लाइडर का UI बनाओ","<div style='position:relative; width:300px; height:200px;'><img src='before.jpg' width='300' height='200'><div style='position:absolute; top:0; left:0; width:50%; height:100%; overflow:hidden; border-right:2px solid white;'><img src='after.jpg' width='300' height='200'></div></div>"
"एक स्लाइडर बनाओ जिसे ड्रैग करके वैल्यू बदली जा सके","<input type='range' min='1' max='100' value='50' oninput=""this.nextElementSibling.innerText=this.value""><span>50</span>"
"एक नेविगेशन बार बनाओ जो स्क्रॉल करने के बाद टॉप पर चिपक जाए","<style>.sticky{position:fixed; top:0; width:100%;}</style><div id='navbar' style='padding:10px; background:#333; color:white;'>Navbar</div><div style='height:1000px; padding:10px;'>Scroll down...</div><script>var navbar=document.getElementById('navbar'); var sticky=navbar.offsetTop; window.onscroll=function(){if(window.pageYOffset>=sticky){navbar.classList.add('sticky')}else{navbar.classList.remove('sticky')}};</script>"
"बटन्स का उपयोग करके एक फिल्टर करने वाली गैलरी बनाओ","<div><button>All</button><button>Cars</button><button>Animals</button></div><div class='item cars'>A Car</div><div class='item animals'>An Animal</div>"
"स्किल दिखाने के लिए एनिमेटेड प्रोग्रेस बार बनाओ","<style>.skill-bar{width:100%; background-color:#ddd;}.skill-level{width:1%; height:20px; background-color:green; transition:width 2s;}</style><div class='skill-bar'><div class='skill-level' style='width:80%;'></div></div><p>(Animates on load)</p>"
"एक रैंडम पासवर्ड जेनरेट करने वाला ऐप बनाओ","<input id='pass-output' readonly style='width:150px;'><button onclick=""document.getElementById('pass-output').value = Math.random().toString(36).substring(2, 10);"">Generate Password</button>"
"एक ट्री-व्यू (tree view) मेन्यू बनाओ","<style>.tree-view ul{display:none; margin-left:20px;}.tree-view span{cursor:pointer;}</style><ul class='tree-view' style='list-style-type:none;'><li><span onclick=""this.parentElement.querySelector('ul').style.display = this.parentElement.querySelector('ul').style.display==='block'?'none':'block';"">▶ Parent</span><ul><li>Child 1</li><li>Child 2</li></ul></li></ul>"
"CSS का उपयोग करके पेज पर स्मूथ स्क्रॉलिंग इनेबल करो","<style>html { scroll-behavior: smooth; }</style><a href='#section1'>Go to Section 1</a><div style='height:800px;'></div><h2 id='section1'>This is Section 1</h2>"
"एक बटन बनाओ जो फुल-स्क्रीन नेविगेशन मेन्यू खोले","<style>.overlay{height:0; width:100%; position:fixed; z-index:1; top:0; left:0; background-color:rgba(0,0,0, 0.9); overflow-y:hidden; transition:0.5s;}.overlay-content{position:relative; top:25%; width:100%; text-align:center;}</style><span style='font-size:30px;cursor:pointer' onclick=""document.getElementById('myNav').style.height='100%'"">&#9776; Open</span><div id='myNav' class='overlay'><a href='javascript:void(0)' style='position:absolute;top:20px;right:45px;font-size:60px;color:white;' onclick=""document.getElementById('myNav').style.height='0%'"">&times;</a><div class='overlay-content'><a href='#' style='color:white;'>About</a></div></div>"
"एक टेक्स्टएरिया बनाओ जो कैरेक्टर लिमिट पहुंचने पर लाल हो जाए","<style>.limit{color:red; font-weight:bold;}</style><textarea maxlength='50' oninput=""var rem=50-this.value.length; document.getElementById('remChar').innerText=rem; document.getElementById('remChar').className = rem < 10 ? 'limit' : '';""></textarea><p><span id='remChar'>50</span> characters remaining.</p>"
"एक सिंपल पोल (poll) कॉम्पोनेन्ट का UI बनाओ","<h3>Which is your favorite color?</h3><div><input type='radio' name='poll'> Red</div><div><input type='radio' name='poll'> Green</div><button>Vote</button>"
"एक क्रेडिट कार्ड इनपुट का UI बनाओ","<div style='padding:10px; border:1px solid #ccc; width:250px;'><label>Card Number:</label><input placeholder='0000 0000 0000 0000' style='width:95%;'><div style='display:flex;'><div style='width:50%;'><label>Expiry:</label><input placeholder='MM/YY'></div><div style='width:50%;'><label>CVV:</label><input placeholder='123'></div></div></div>"
"एक कैलेंडर का सिंपल UI बनाओ","<div style='width:220px; border:1px solid #ccc; font-family:sans-serif;'><div style='background:#333; color:white; text-align:center; padding:5px;'>September 2025</div><div style='display:grid; grid-template-columns:repeat(7,1fr); text-align:center;'><div>Mo</div><div>Tu</div><div>We</div><div>Th</div><div>Fr</div><div>Sa</div><div>Su</div><div>1</div><div>2</div>...</div></div>"
"तीन प्लान वाला एक प्राइसिंग टेबल बनाओ","<div style='display:flex; text-align:center;'><div style='border:1px solid; padding:10px; margin:5px; flex:1;'><h3>Basic</h3><p>$10 / month</p><button>Sign Up</button></div><div style='border:2px solid blue; padding:10px; margin:5px; flex:1;'><h3>Pro</h3><p>$25 / month</p><button>Sign Up</button></div><div style='border:1px solid; padding:10px; margin:5px; flex:1;'><h3>Enterprise</h3><p>$50 / month</p><button>Sign Up</button></div></div>"
"एक कुकी कंसेंट बैनर बनाओ जो नीचे दिखे","<div id='cookie-banner' style='position:fixed; bottom:0; left:0; width:100%; background:#333; color:white; padding:15px; text-align:center;'>This website uses cookies to ensure you get the best experience. <button onclick=""document.getElementById('cookie-banner').style.display='none'"" style='margin-left:10px;'>Accept</button></div>"
"एक टेक्स्ट बनाओ जो धीरे-धीरे टाइप होता हुआ दिखे (टाइपराइटर इफ़ेक्ट)","<p id='typewriter'></p><script>var i=0; var txt='This is a typewriter effect.'; function type(){if(i<txt.length){document.getElementById('typewriter').innerHTML+=txt.charAt(i);i++;setTimeout(type, 50);}} type();</script>"
"जावास्क्रिप्ट एरे से एक डायनामिक टेबल बनाओ","<table id='myTable' border='1'><tr><th>Name</th><th>City</th></tr></table><script>const users=[{name:'Amit', city:'Lucknow'},{name:'Ria', city:'Delhi'}]; users.forEach(user => { let row = document.getElementById('myTable').insertRow(); row.insertCell(0).innerHTML = user.name; row.insertCell(1).innerHTML = user.city; });</script>"
"एक लिस्ट के लिए सिंपल पेजिंग (pagination) UI बनाओ","<style>.pagination a{padding: 8px 16px; text-decoration: none; border: 1px solid #ddd;}.pagination a.active{background-color: dodgerblue; color: white;}</style><div class='pagination'><a href='#'>&laquo;</a><a href='#'>1</a><a href='#' class='active'>2</a><a href='#'>3</a><a href='#'>&raquo;</a></div>"
"एक एनालॉग क्लॉक का सिंपल UI बनाओ","<div style='width:150px; height:150px; border-radius:50%; border:4px solid black; position:relative;'><div style='position:absolute; top:50%; left:50%; width:2px; height:60px; background:black; transform-origin:bottom; transform:rotate(30deg);'></div><div style='position:absolute; top:50%; left:50%; width:2px; height:40px; background:grey; transform-origin:bottom; transform:rotate(-45deg);'></div></div>"
"एक ऑडियो रिकॉर्डर का UI (स्टार्ट/स्टॉप बटन) बनाओ","<button>Start Recording</button><button disabled>Stop Recording</button><br><br><audio controls></audio>"
"एक टेक्स्ट बनाओ जिस पर क्लिक करने पर वह क्लिपबोर्ड पर कॉपी हो जाए","<p onclick=""navigator.clipboard.writeText(this.innerText); alert('Text Copied!')"" style='cursor:pointer; border:1px solid; padding:5px;'>Click me to copy this text.</p>"
"फाइलों के लिए एक ड्रैग एंड ड्रॉप ज़ोन का UI बनाओ","<div id='dropzone' style='border: 2px dashed #ccc; padding: 25px; margin:10px; text-align:center; color: #aaa;'>Drag & Drop Files Here</div>"
"एक थीम स्विचर (लाइट/डार्क) बनाओ जो CSS क्लास बदले","<style>.dark-theme{background:#222; color:white;}</style><body id='myBody'><button onclick=""document.getElementById('myBody').classList.toggle('dark-theme')"">Switch Theme</button><p>Some content here.</p></body>"
"एक SVG सर्किल बनाओ जो क्लिक करने पर रंग बदले","<svg width='100' height='100'><circle id='myCircle' cx='50' cy='50' r='40' stroke='black' stroke-width='3' fill='red' onclick=""this.setAttribute('fill', this.getAttribute('fill') === 'red' ? 'blue' : 'red')"" style='cursor:pointer;' /></svg>"
"CSS का उपयोग करके एक सिंपल बार चार्ट बनाओ","<style>.bar-chart{display:flex; align-items:flex-end; height:100px; border-left:2px solid; border-bottom:2px solid;}.bar{width:30px; background:dodgerblue; margin: 0 5px;}</style><div class='bar-chart'><div class='bar' style='height:50%;'></div><div class='bar' style='height:80%;'></div><div class='bar' style='height:30%;'></div></div>"
"एक टेक्स्ट बनाओ जिसमें टाइपिंग इफ़ेक्ट हो","<p id='typing-effect' style='font-family:monospace; font-size:18px;'></p><script>var text='Hello, this is a typing effect.'; var i=0; function typeWriter(){if(i<text.length){document.getElementById('typing-effect').innerHTML+=text.charAt(i); i++; setTimeout(typeWriter, 100);}} typeWriter();</script>"
"एक टेक्स्टएरिया बनाओ जो बताए कि कितने कैरेक्टर बचे हैं","<textarea maxlength='100' oninput=""document.getElementById('charsLeft').innerText = 100 - this.value.length;"" style='width:200px; height:60px;'></textarea><p><span id='charsLeft'>100</span> characters remaining.</p>"
"एक 'Select All' चेकबॉक्स बनाओ जो बाकी सभी चेकबॉक्स को सिलेक्ट करे","<input type='checkbox' onclick=""var checkboxes=document.querySelectorAll('input[name=\'option\']'); for(var c of checkboxes){c.checked=this.checked;}"">Select All<br><hr><input type='checkbox' name='option'>Option 1<br><input type='checkbox' name='option'>Option 2<br><input type='checkbox' name='option'>Option 3"
"एक वेदर ऐप का UI बनाओ (शहर का नाम, तापमान, आइकन)","<div style='border:1px solid #ddd; border-radius:8px; padding:15px; width:150px; text-align:center; font-family:sans-serif;'><h3 style='margin:0;'>Lucknow</h3><p style='font-size:32px; margin:5px;'>☀️ 32°C</p><p style='margin:0;'>Clear Sky</p></div>"
"नए साल तक का काउंटडाउन टाइमर बनाओ","<h3 id='countdownTimer'></h3><script>var targetDate = new Date('Jan 1, 2026').getTime(); var x = setInterval(() => {var now=new Date().getTime(); var distance=targetDate-now; var days=Math.floor(distance/(1000*60*60*24)); document.getElementById('countdownTimer').innerText=days + ' days until New Year!'; if(distance<0){clearInterval(x); document.getElementById('countdownTimer').innerText='Happy New Year!';}},1000)</script>"
"एक म्यूजिक प्लेलिस्ट का UI बनाओ","<ul style='list-style-type:none; padding:0; width:200px;'><li style='padding:8px; border-bottom:1px solid #eee;'>▶️ Song 1 - Artist A</li><li style='padding:8px; border-bottom:1px solid #eee;'>▶️ Song 2 - Artist B</li><li style='padding:8px;'>▶️ Song 3 - Artist C</li></ul>"
"एक मूवी टिकट बुकिंग के लिए सीट सिलेक्टर का UI बनाओ","<style>.seat{width:20px; height:20px; background:grey; margin:3px; display:inline-block; cursor:pointer;}.seat.selected{background:limegreen;}</style><div><div class='seat' onclick=""this.classList.toggle('selected')""></div><div class='seat' onclick=""this.classList.toggle('selected')""></div><div class='seat' onclick=""this.classList.toggle('selected')""></div></div><p>Selected seats: ...</p>"
"एक टेक्स्ट एडिटर के लिए बोल्ड और इटैलिक बटन बनाओ","<div id='editor' contenteditable='true' style='border:1px solid; height:100px; padding:5px;'>Type here...</div><button onclick=""document.execCommand('bold')""><b>Bold</b></button><button onclick=""document.execCommand('italic')""><i>Italic</i></button>"
"एक करेंसी कनवर्टर का UI बनाओ","<div><input type='number' value='1'> USD = <input type='number' value='83.50'> INR</div>"
"एक रेसिपी कार्ड बनाओ जिसमें इमेज और सामग्री की लिस्ट हो","<div style='border:1px solid #ddd; border-radius:5px; width:250px;'><img src='food.jpg' alt='dish' width='100%'><div style='padding:10px;'><h3>Dish Name</h3><ul><li>Ingredient 1</li><li>Ingredient 2</li><li>Ingredient 3</li></ul></div></div>"
"एक GitHub प्रोफाइल कार्ड का UI बनाओ","<div style='display:flex; align-items:center; padding:10px; border:1px solid #ccc; border-radius:5px; font-family:sans-serif;'><img src='avatar.png' alt='avatar' width='50' height='50' style='border-radius:50%;'><div style='margin-left:10px;'><h4>Username</h4><p style='font-size:14px; margin:0;'>User bio goes here...</p></div></div>"
"दो नंबरों को जोड़ने वाला एक सिंपल कैलकुलेटर","<input id='n1' type='number' value='5' style='width:50px;'> + <input id='n2' type='number' value='10' style='width:50px;'><button onclick=""document.getElementById('res').innerText = parseInt(document.getElementById('n1').value) + parseInt(document.getElementById('n2').value)"">Calculate</button><p>Result: <span id='res'></span></p>"
"एक कलर पिकर बनाओ जो h1 का टेक्स्ट कलर बदले","<h1 id='colorH1'>Change my color!</h1><label>Choose a color:</label><input type='color' oninput=""document.getElementById('colorH1').style.color=this.value"">"
"एक टेक्स्ट का फॉन्ट साइज़ बदलने के लिए स्लाइडर बनाओ","<p id='fontSliderText' style='font-size:16px;'>Adjust my font size</p><input type='range' min='10' max='50' value='16' oninput=""document.getElementById('fontSliderText').style.fontSize = this.value + 'px'"">"
"एक क्विज बनाओ जो सही या गलत जवाब का फीडबैक दे","<p>What is the capital of France?</p><button onclick=""alert('Wrong!')"">Berlin</button><button onclick=""alert('Correct!')"">Paris</button><button onclick=""alert('Wrong!')"">Rome</button>"
"एक स्टॉपवॉच का यूजर इंटरफ़ेस बनाओ","<h2 style='font-family:monospace;'>00:00:00</h2><button>Start</button><button>Stop</button><button>Reset</button>"
"एक इमेज हिंडोला (carousel) बनाओ जो हर 3 सेकंड में इमेज बदले","<img id='carousel' src='img1.jpg' width='200' alt='carousel'><script>const images=['img1.jpg','img2.jpg','img3.jpg']; let i=0; setInterval(()=>{ i=(i+1)%images.length; document.getElementById('carousel').src=images[i]; }, 3000);</script>"
"एक इनपुट फील्ड बनाओ जो टाइप करते ही नीचे वेलकम मैसेज अपडेट करे","<label>Your Name:</label><input onkeyup=""document.getElementById('welcome_msg').innerText = 'Welcome, ' + this.value""><h3 id='welcome_msg'></h3>"
"पेज पर माउस की X और Y पोजीशन ट्रैक करो","<p id='mousePos' style='border:1px solid; padding:10px;'>Mouse Position:</p><script>document.onmousemove = function(event){ document.getElementById('mousePos').innerText = `X: ${event.clientX}, Y: ${event.clientY}`; };</script>"
"एक बटन बनाओ जो 1 से 6 के बीच एक रैंडम नंबर (जैसे डाइस रोल) दिखाए","<p>Dice Roll: <span id='dice' style='font-size:24px; font-weight:bold;'>0</span></p><button onclick=""document.getElementById('dice').innerText = Math.floor(Math.random() * 6) + 1"">Roll Dice</button>"
"एक टेक्स्टएरिया बनाओ जो शब्दों की गिनती लाइव दिखाए","<textarea oninput=""document.getElementById('wc').innerText = this.value.trim().split(/\s+/).filter(Boolean).length;"" rows='4'></textarea><p>Word Count: <span id='wc'>0</span></p>"
"एक इनपुट फील्ड बनाओ जो टाइप किए गए टेक्स्ट को तुरंत अपरकेस में बदले","<label>Type here to convert to uppercase:</label><input oninput=""this.value=this.value.toUpperCase()"">"
"10 से 0 तक का एक सिंपल काउंटडाउन टाइमर बनाओ","<h2 id='countdown'>10</h2><button onclick=""var c=10; var t=setInterval(()=>{ c--; document.getElementById('countdown').innerText=c; if(c<=0) clearInterval(t); }, 1000);"">Start Countdown</button>"
"एक टेक्स्टएरिया बनाओ जो टेक्स्ट को ब्राउज़र की लोकल मेमोरी में सेव करे","<h3>My Sticky Note:</h3><textarea oninput=""localStorage.setItem('myNote', this.value);"" style='width:200px; height:100px;'></textarea><script>document.querySelector('textarea').value = localStorage.getItem('myNote');</script>"
"जन्म का साल डालकर उम्र कैलकुलेट करने वाला ऐप बनाओ","<input id='birthYear' type='number' placeholder='Year of Birth (e.g., 1990)'><button onclick=""document.getElementById('age').innerText = new Date().getFullYear() - document.getElementById('birthYear').value;"">Calculate Age</button><h3>Your age is: <span id='age'></span></h3>"
"एक ऑडियो के लिए प्ले और पॉज बटन बनाओ","<audio id='player' src='song.mp3'></audio><button onclick=""document.getElementById('player').play()"">Play</button><button onclick=""document.getElementById('player').pause()"">Pause</button>"
"एक बेसिक BMI कैलकुलेटर बनाओ","<input id='h' placeholder='Height (m)'><input id='w' placeholder='Weight (kg)'><button onclick=""var h=document.getElementById('h').value; var w=document.getElementById('w').value; document.getElementById('bmi').innerText = (w/(h*h)).toFixed(2);"">Calc BMI</button><p>Your BMI: <span id='bmi'></span></p>"
"सेल्सियस को फारेनहाइट में बदलने वाला कनवर्टर बनाओ","<input type='number' id='c' placeholder='Celsius' oninput=""document.getElementById('f').innerText = (this.value * 9/5) + 32;""><p>Fahrenheit: <span id='f'></span></p>"
"एक पासवर्ड फील्ड और एक बटन बनाओ जो पासवर्ड को दिखाए/छिपाए","<input id='pw' type='password' value='secret'><button onmousedown=""document.getElementById('pw').type='text'"" onmouseup=""document.getElementById('pw').type='password'"">Show/Hide</button>"
"एक बटन बनाओ जो क्लिक करने पर एक रैंडम कोट दिखाए","<p id='q_text' style='border-left: 3px solid #ccc; padding-left: 10px; font-style: italic;'>Your quote will appear here.</p><script>const quotes=['The only way to do great work is to love what you do.','That which does not kill us makes us stronger.','The journey of a thousand miles begins with a single step.'];</script><button onclick=""document.getElementById('q_text').innerText = quotes[Math.floor(Math.random() * quotes.length)];"">New Quote</button>"
"पेज के टॉप पर एक स्क्रॉल प्रोग्रेस बार बनाओ","<div style='position:fixed;top:0;left:0;height:5px;background:green;width:0%;' id='pBar'></div><script>window.onscroll=function(){var winScroll=document.body.scrollTop||document.documentElement.scrollTop;var height=document.documentElement.scrollHeight-document.documentElement.clientHeight;var scrolled=(winScroll/height)*100;document.getElementById('pBar').style.width=scrolled+'%';};</script><div style='height:2000px; padding:20px;'><h1>Scroll down this page to see the progress bar.</h1></div>"
"एक लाइट/डार्क मोड टॉगल बटन बनाओ","<style>body{transition: background-color 0.3s;}</style><button onclick=""document.body.style.backgroundColor = document.body.style.backgroundColor === 'black' ? 'white' : 'black'; document.body.style.color = document.body.style.backgroundColor === 'black' ? 'white' : 'black';"">Toggle Dark Mode</button>"
"एक काउंटर ऐप बनाओ जिसमें प्लस और माइनस बटन हों","<h3>Count: <span id='counterVal'>0</span></h3><button onclick=""document.getElementById('counterVal').innerText--;"">-1</button><button onclick=""document.getElementById('counterVal').innerText++;"">+1</button>"
"एक सिंपल लॉगइन फॉर्म बनाओ","<form style='border: 1px solid #ccc; padding: 20px; width: 200px; border-radius: 5px;'><label for='user'>Username:</label><br><input type='text' id='user' style='width: 95%;'><br><br><label for='pass'>Password:</label><br><input type='password' id='pass' style='width: 95%;'><br><br><button type='submit'>Login</button></form>"
"एक टेक्स्टएरिया बनाओ जो बताए कि कितने कैरेक्टर लिखे गए हैं","<textarea id='myTextarea' oninput=""document.getElementById('charCount').innerText = this.value.length;"" maxlength='100'></textarea><p>Characters: <span id='charCount'>0</span>/100</p>"
"एक अकॉर्डियन बनाओ जो क्लिक करने पर कंटेंट दिखाए/छिपाए","<style>.accordion-content{display:none; padding:10px; border:1px solid #ddd;}</style><h3 onclick=""this.nextElementSibling.style.display = this.nextElementSibling.style.display === 'block' ? 'none' : 'block';"" style='cursor:pointer; background:#eee; padding:10px; margin:0;'>Click to Toggle Section</h3><div class='accordion-content'><p>This is the hidden content.</p></div>"
"एक सिंपल इमेज गैलरी बनाओ जिसमें नेक्स्ट और प्रीवियस बटन हों","<img id='galleryImg' src='img1.jpg' width='200'><br><button onclick=""document.getElementById('galleryImg').src='img1.jpg'"">Image 1</button><button onclick=""document.getElementById('galleryImg').src='img2.jpg'"">Image 2</button><button onclick=""document.getElementById('galleryImg').src='img3.jpg'"">Image 3</button>"
"एक कांटेक्ट फॉर्म बनाओ जिसमें ईमेल फील्ड खाली होने पर एरर आए","<form onsubmit=""if(document.getElementById('email').value === ''){alert('Email field is required!'); return false;}""><label>Your Email:</label><input id='email' type='email'><input type='submit'></form>"
"एक सिंपल टू-डू लिस्ट बनाओ","<ul id='todoList'><li>First Item</li></ul><input id='todoInput' type='text' placeholder='New item...'><button onclick=""var li=document.createElement('li'); li.innerText=document.getElementById('todoInput').value; document.getElementById('todoList').appendChild(li); document.getElementById('todoInput').value='';"">Add</button>"
"एक बटन बनाओ जो क्लिक करने पर एक मोडल (popup) खोले","<style>.modal{display:none; position:fixed; z-index:1; left:0; top:0; width:100%; height:100%; background-color:rgba(0,0,0,0.5);}</style><button onclick=""document.getElementById('myModal').style.display='block'"">Open Modal</button><div id='myModal' class='modal'><div style='background-color: #fefefe; margin: 15% auto; padding: 20px; border: 1px solid #888; width: 80%;'><span onclick=""document.getElementById('myModal').style.display='none'"" style='float:right; cursor:pointer;'>&times;</span><p>This is a modal popup.</p></div></div>"
"एक टैब वाला इंटरफ़ेस बनाओ","<style>.tabcontent{display:none;}</style><button onclick=""openTab('Tab1')"">Tab 1</button><button onclick=""openTab('Tab2')"">Tab 2</button><div id='Tab1' class='tabcontent'><h3>Tab 1</h3><p>Content for Tab 1.</p></div><div id='Tab2' class='tabcontent'><h3>Tab 2</h3><p>Content for Tab 2.</p></div><script>function openTab(tabName){var i, tabs; tabs=document.getElementsByClassName('tabcontent'); for(i=0;i<tabs.length;i++){tabs[i].style.display='none';} document.getElementById(tabName).style.display='block';}</script>"
"एक 5-स्टार रेटिंग कॉम्पोनेन्ट बनाओ","<style>.star{cursor:pointer; font-size:24px; color:grey;}.star:hover{color:orange;}</style><span class='star' onclick=""alert('Rated 1 star')"">★</span><span class='star' onclick=""alert('Rated 2 stars')"">★</span><span class='star' onclick=""alert('Rated 3 stars')"">★</span><span class='star' onclick=""alert('Rated 4 stars')"">★</span><span class='star' onclick=""alert('Rated 5 stars')"">★</span>"
"एक पासवर्ड स्ट्रेंथ चेकर बनाओ","<label>Password:</label><input type='password' oninput=""document.getElementById('strength').innerText = this.value.length > 8 ? 'Strong' : 'Weak';""><p>Password Strength: <span id='strength'></span></p>"
"एक डिजिटल क्लॉक बनाओ जो हर सेकंड अपडेट हो","<div id='clockDiv' style='font-size:20px; font-family:monospace;'></div><script>setInterval(() => document.getElementById('clockDiv').innerText = new Date().toLocaleTimeString(), 1000);</script>"
"एक सर्च बार बनाओ जो एक लिस्ट को फ़िल्टर करे","<input id='searchInput' onkeyup='filterList()' placeholder='Search for names..'><ul id='namesList'><li>Amit</li><li>Ajay</li><li>Bhavna</li><li>Bharat</li></ul><script>function filterList(){var input = document.getElementById('searchInput'); var filter = input.value.toUpperCase(); var ul = document.getElementById('namesList'); var li = ul.getElementsByTagName('li'); for(var i=0; i<li.length; i++){if(li[i].innerHTML.toUpperCase().indexOf(filter) > -1){li[i].style.display='';}else{li[i].style.display='none';}}}</script>"
"एक रिस्पॉन्सिव नेविगेशन बार बनाओ जिसमें हैमबर्गर मेन्यू हो","<style>.nav-links{display:none;} .nav-links.show{display:block;}</style><nav style='background:#333; color:white; padding:10px;'><div class='hamburger' onclick=""document.querySelector('.nav-links').classList.toggle('show')"" style='cursor:pointer;'>☰ Menu</div><div class='nav-links' style='margin-top:10px;'><a href='#' style='color:white; display:block;'>Home</a><a href='#' style='color:white; display:block;'>About</a></div></nav>"
"एक 'Scroll to Top' बटन बनाओ","<button onclick=""window.scrollTo(0, 0)"" style='position:fixed; bottom:20px; right:20px;'>Go to Top</button>"
"एक डायनामिक प्रोग्रेस बार बनाओ","<div style='width:100%; background-color: #ddd;'><div id='myBar' style='width: 10%; height: 20px; background-color: #4CAF50;'></div></div><button onclick=""document.getElementById('myBar').style.width = '100%'"">Complete</button>"
"एक कस्टम अलर्ट बॉक्स बनाओ","<div id='customAlert' style='display:none; position:fixed; top:10px; left:10%; width:80%; background:lightyellow; border:1px solid gold; padding:10px;'>Custom Alert!</div><button onclick=""document.getElementById('customAlert').style.display='block'"">Show Custom Alert</button>"
"एक 'Copy to Clipboard' बटन बनाओ","<input id='copyText' value='Text to be copied' readonly><button onclick=""document.getElementById('copyText').select(); document.execCommand('copy'); alert('Copied!')"">Copy Text</button>"
"एक ड्रॉपडाउन मेन्यू बनाओ जो होवर करने पर खुले","<style>.dropdown-content{display:none; position:absolute; background:#f9f9f9;}.dropdown:hover .dropdown-content{display:block;}</style><div class='dropdown' style='position:relative; display:inline-block;'><button>Hover Me</button><div class='dropdown-content'><a href='#' style='display:block; padding:5px;'>Link 1</a><a href='#' style='display:block; padding:5px;'>Link 2</a></div></div>"
"एक फॉर्म बनाओ जो सबमिट करने पर चेक करे कि इनपुट फील्ड खाली है या नहीं","<form onsubmit=""if(document.getElementById('fname').value === ''){ alert('Name must be filled out'); return false; }""><label>Name:</label><input id='fname' type='text'><input type='submit'></form>"
"एक पासवर्ड फील्ड बनाओ जो 6 कैरेक्टर से कम होने पर एरर दे","<form onsubmit=""if(document.getElementById('pwd').value.length < 6){ alert('Password must be at least 6 characters'); return false; }""><label>Password:</label><input id='pwd' type='password'><input type='submit'></form>"
"`setTimeout` का उपयोग करके 2 सेकंड बाद एक फंक्शन कॉल करो","<script>function delayedAlert() { alert('This message appeared after 2 seconds.'); } setTimeout(delayedAlert, 2000);</script>"
"एक काउंटर शुरू करो जो हर सेकंड बढ़े और एक बटन से बंद हो जाए","<p id='counter'>0</p><button onclick=""clearInterval(myInterval)"">Stop Counter</button><script>var c=0; var myInterval = setInterval(function(){ c++; document.getElementById('counter').innerText = c; }, 1000);</script>"
"एक जावास्क्रिप्ट ऑब्जेक्ट को JSON स्ट्रिंग में बदलो","<script>var user = {name:'Amit', age:25}; var jsonString = JSON.stringify(user); console.log(jsonString);</script>"
"एक JSON स्ट्रिंग को वापस जावास्क्रिप्ट ऑब्जेक्ट में बदलो","<script>var jsonString = '{\""name\"":\""Amit\"", \""age\"":25}'; var userObject = JSON.parse(jsonString); console.log(userObject.name);</script>"
"`window.location.href` से वर्तमान पेज का URL पता करो","<script>alert('The current URL is: ' + window.location.href);</script>"
"एक बटन बनाओ जो क्लिक करने पर गूगल पर रीडायरेक्ट करे","<button onclick=""window.location.href='https://google.com'"">Go to Google</button>"
"जावास्क्रिप्ट से एक सिंपल कुकी (cookie) सेट करो","<script>document.cookie = 'username=Amit; expires=Fri, 31 Dec 2026 23:59:59 GMT; path=/'; alert('Cookie set!');</script>"
"जावास्क्रिप्ट से बनाई गई कुकी को पढ़ो","<script>alert('Cookies for this page: ' + document.cookie);</script>"
"`localStorage` में एक की-वैल्यू पेयर सेव करो","<script>localStorage.setItem('theme', 'dark');</script>"
"`localStorage` से एक वैल्यू प्राप्त करो","<script>var theme = localStorage.getItem('theme'); alert('Saved theme is: ' + theme);</script>"
"`sessionStorage` में डेटा सेव करो जो टैब बंद होने पर डिलीट हो जाए","<script>sessionStorage.setItem('session_status', 'active');</script>"
"एक एरो (arrow) फंक्शन बनाओ","<script>const greet = () => { return 'Hello from an arrow function!'; }; console.log(greet());</script>"
"टेम्पलेट लिटरल का उपयोग करके एक स्ट्रिंग बनाओ","<script>var name='Amit'; var str = `Hello, my name is ${name}!`; console.log(str);</script>"
"`for...of` लूप का उपयोग करके एक एरे के आइटम्स को प्रिंट करो","<script>const colors = ['red', 'green', 'blue']; for (const color of colors) { console.log(color); }</script>"
"`for...in` लूप का उपयोग करके एक ऑब्जेक्ट की प्रॉपर्टीज को प्रिंट करो","<script>const person = {fname:'Amit', lname:'Saka', age:25}; for (const key in person) { console.log(key + ': ' + person[key]); }</script>"
"`try...catch` ब्लॉक का उपयोग करके जावास्क्रिप्ट एरर को हैंडल करो","<script>try { nonExistentFunction(); } catch(err) { console.log('An error occurred: ' + err.message); }</script>"
"जावास्क्रिप्ट से एक CSS वेरिएबल का मान बदलो","<style>:root{--bg-color: lightblue;}</style><div id='varDiv' style='padding:10px; background-color: var(--bg-color);'>Click button to change my color.</div><button onclick=""document.documentElement.style.setProperty('--bg-color', 'lightgreen')"">Change Color</button>"
"`fetch` का उपयोग करके एक API से डेटा प्राप्त करो","<script>fetch('https://jsonplaceholder.typicode.com/todos/1').then(response => response.json()).then(data => console.log(data));</script>"
"जावास्क्रिप्ट से एक नया पैराग्राफ एलिमेंट बनाओ","<script>var newParagraph = document.createElement('p'); newParagraph.textContent = 'I was created by JS.'; document.body.appendChild(newParagraph);</script>"
"एक div के अंदर एक नया h3 एलिमेंट जोड़ो","<div id='parentDiv' style='border: 1px solid;'></div><script>var newHeading = document.createElement('h3'); newHeading.innerHTML = 'Appended Heading'; document.getElementById('parentDiv').appendChild(newHeading);</script>"
"एक div के अंदर से एक चाइल्ड एलिमेंट को हटाओ","<div id='parentDiv2'><p id='childPara'>Remove me</p></div><script>var child = document.getElementById('childPara'); document.getElementById('parentDiv2').removeChild(child);</script>"
"एक एलिमेंट को दूसरे एलिमेंट से बदलो","<div id='parentDiv3'><p id='oldChild'>I am old.</p></div><script>var newChild = document.createElement('h3'); newChild.innerHTML='I am new.'; document.getElementById('parentDiv3').replaceChild(newChild, document.getElementById('oldChild'));</script>"
"किसी एलिमेंट के पैरेंट नोड का टैग नाम पता करो","<div id='parent'><span id='child'>Child</span></div><script>var parentTag = document.getElementById('child').parentNode.tagName; alert(parentTag);</script>"
"किसी एलिमेंट के सभी चाइल्ड नोड्स को सिलेक्ट करो","<div id='parentWithChildren' style='border:1px solid'><p>Child 1</p><span>Child 2</span></div><script>var children = document.getElementById('parentWithChildren').childNodes;</script>"
"किसी एलिमेंट के पहले और आखिरी चाइल्ड को सिलेक्ट करो","<div id='p4'><p>First</p><p>Middle</p><p>Last</p></div><script>var first = document.getElementById('p4').firstElementChild; var last = document.getElementById('p4').lastElementChild;</script>"
"किसी एलिमेंट के अगले सिबलिंग (sibling) को सिलेक्ट करो","<ul><li id='item1'>One</li><li id='item2'>Two</li></ul><script>var nextElement = document.getElementById('item1').nextElementSibling;</script>"
"जावास्क्रिप्ट से एक एलिमेंट में 'blue' क्लास जोड़ो","<style>.blue { color: blue; }</style><p id='addClassP'>Add class to me.</p><script>document.getElementById('addClassP').classList.add('blue');</script>"
"जावास्क्रिप्ट से एक एलिमेंट से 'red' क्लास हटाओ","<style>.red { color: red; }</style><p id='removeClassP' class='red'>Remove class from me.</p><script>document.getElementById('removeClassP').classList.remove('red');</script>"
"चेक करो कि एक एलिमेंट में कोई खास CSS क्लास है या नहीं","<div id='hasClassDiv' class='box'></div><script>var hasBoxClass = document.getElementById('hasClassDiv').classList.contains('box'); alert('Has ""box"" class: ' + hasBoxClass);</script>"
"सभी पैराग्राफ का रंग एक साथ बदलने के लिए लूप चलाओ","<p>Paragraph 1</p><p>Paragraph 2</p><script>var allParas = document.getElementsByTagName('p'); for(var i=0; i<allParas.length; i++){ allParas[i].style.color='green'; }</script>"
"एक ड्रॉपडाउन से सिलेक्टेड वैल्यू को अलर्ट में दिखाओ","<select id='mySelect' onchange=""alert('You selected: ' + this.value)""><option value='A'>Option A</option><option value='B'>Option B</option></select>"
"कौन सा रेडियो बटन चेक्ड है, उसकी वैल्यू पता करो","<input type='radio' name='opt' value='One' checked>1 <input type='radio' name='opt' value='Two'>2 <button onclick=""alert(document.querySelector('input[name=\'opt\']:checked').value)"">Get Checked Value</button>"
"एक बटन बनाओ जो क्लिक करने पर एक 400x400 की नई विंडो खोले","<button onclick=""window.open('https://google.com', '_blank', 'width=400,height=400')"">Open Small Window</button>"
"एक बटन बनाओ जो वर्तमान विंडो को बंद कर दे","<button onclick='window.close()'>Close This Window</button>"
"यूज़र की स्क्रीन की चौड़ाई और ऊंचाई पता करो","<button onclick=""alert('Screen Width: ' + screen.width + ', Screen Height: ' + screen.height);"">Show Screen Size</button>"
"यूज़र का ब्राउज़र ऐप नाम पता करो","<button onclick=""alert('Browser AppName: ' + navigator.appName);"">Show Browser Name</button>"
"ब्राउज़र हिस्ट्री में एक पेज वापस जाने के लिए एक बटन बनाओ","<a href='javascript:history.back()'>Go Back</a>"
"पेज के टाइटल को जावास्क्रिप्ट से बदलो","<script>document.title = 'New Page Title';</script>"
"`addEventListener` का उपयोग करके एक क्लिक इवेंट लगाओ","<button id='btn1'>Click Me</button><script>document.getElementById('btn1').addEventListener('click', function() { alert('Event Listener Clicked!'); });</script>"
"`mouseover` इवेंट लगाओ जो माउस ले जाने पर टेक्स्ट बदले","<p id='p_mouse'>Hover over me.</p><script>document.getElementById('p_mouse').addEventListener('mouseover', function() { this.innerHTML = 'Mouse is over!'; });</script>"
"`mouseout` इवेंट लगाओ जो माउस हटाने पर टेक्स्ट वापस बदल दे","<p id='p_mouse_out' onmouseover=""this.style.color='red'"" onmouseout=""this.style.color='black'"">Hover to change my color.</p>"
"जावास्क्रिप्ट से सभी पैराग्राफ (`p`) एलिमेंट्स को सिलेक्ट करो","<p>Paragraph 1</p><p>Paragraph 2</p><script>var allParagraphs = document.getElementsByTagName('p'); console.log('Found ' + allParagraphs.length + ' paragraphs.');</script>"
"जावास्क्रिप्ट से 'test' क्लास वाले सभी एलिमेंट्स को सिलेक्ट करो","<div class='test'>Div 1</div><p class='test'>Para 1</p><script>var allTestElements = document.getElementsByClassName('test');</script>"
"`querySelector` का उपयोग करके पहले 'item' क्लास वाले एलिमेंट को सिलेक्ट करो","<div class='item'>First</div><div class='item'>Second</div><script>var firstItem = document.querySelector('.item'); firstItem.style.color = 'green';</script>"
"`querySelectorAll` का उपयोग करके सभी 'item' क्लास वाले एलिमेंट्स को सिलेक्ट करो","<ul><li class='item'>A</li><li class='item'>B</li></ul><script>var allItems = document.querySelectorAll('.item');</script>"
"एक बटन बनाओ जो चेक करे कि एक नंबर 10 से बड़ा है या नहीं","<script>function checkNumber() { var x = 15; if (x > 10) { alert('Greater than 10'); } else { alert('Not greater than 10'); } }</script><button onclick='checkNumber()'>Check Number</button>"
"एक div पर क्लिक करके 'active' क्लास को टॉगल (जोड़ें/हटाएँ) करो","<style>.active{background:yellow; font-weight:bold;}</style><div id='div_toggle' onclick=""this.classList.toggle('active')"">Click to toggle the 'active' class.</div>"
"एक इनपुट फील्ड बनाओ जो कोई भी की (key) दबाने पर अलर्ट दिखाए","<input type='text' onkeydown=""alert('You pressed a key inside the input!')"" placeholder='Type here'>"
"एक तस्वीर बनाओ जो होवर करने पर बदल जाए","<img src='pic1.jpg' width='100' onmouseover=""this.src='pic2.jpg'"" onmouseout=""this.src='pic1.jpg'"">"
"जावास्क्रिप्ट से एक लिंक का `href` एट्रिब्यूट सेट करो","<a id='myLink' href='#'>Old Link</a><script>document.getElementById('myLink').setAttribute('href', 'https://www.newlink.com');</script>"
"एक कन्फर्मेशन बॉक्स दिखाओ और यूज़र का जवाब अलर्ट करो","<button onclick=""var result = confirm('Are you sure?'); alert('You pressed: ' + result);"">Show Confirm Box</button>"
"एक प्रॉम्प्ट बॉक्स से यूज़र का नाम पूछो और उसे ग्रीट करो","<button onclick=""var name = prompt('Please enter your name', 'Harry'); if (name != null) { alert('Hello, ' + name); }"">Ask for Name</button>"
"तीन फलों का एक जावास्क्रिप्ट एरे (array) बनाओ","<script>var fruits = ['Apple', 'Banana', 'Mango']; console.log(fruits[0]);</script>"
"एक एरे के सभी आइटम्स को कंसोल में प्रिंट करने के लिए लूप चलाओ","<script>var colors = ['Red', 'Green', 'Blue']; for (var i = 0; i < colors.length; i++) { console.log(colors[i]); }</script>"
"`innerHTML` और `innerText` के बीच का अंतर दिखाओ","<p id='demo_p'></p><script>document.getElementById('demo_p').innerText = '<b>This is bold text.</b>'; /* innerText renders tags as text */</script>"
"3 सेकंड के बाद एक अलर्ट दिखाओ","<button onclick=""setTimeout(function(){ alert('Hello after 3 seconds!'); }, 3000)"">Click and wait 3 seconds</button>"
"हर 1 सेकंड में समय अपडेट करने वाला डिजिटल क्लॉक बनाओ","<p id='clock'></p><script>setInterval(function(){ document.getElementById('clock').innerHTML = new Date().toLocaleTimeString(); }, 1000);</script>"
"एक बटन बनाओ जो क्लिक करने पर एक लिस्ट में नया आइटम जोड़े","<ul id='myList'><li>First item</li></ul><button onclick=""var node = document.createElement('li'); node.appendChild(document.createTextNode('New item')); document.getElementById('myList').appendChild(node);"">Add New Item</button>"
"एक 'Hello, World!' का अलर्ट दिखाओ","<script>alert('Hello, World!');</script>"
"ब्राउज़र कंसोल में 'Test Message' लिखो","<script>console.log('Test Message');</script>"
"जावास्क्रिप्ट से 'demo' आईडी वाले एलिमेंट को सिलेक्ट करो","<p id='demo'></p><script>var element = document.getElementById('demo');</script>"
"एक पैराग्राफ का टेक्स्ट जावास्क्रिप्ट से बदलो","<p id='p1'>Old Text</p><script>document.getElementById('p1').innerHTML = 'New Text';</script>"
"एक बटन बनाओ जो क्लिक करने पर अलर्ट दिखाए","<button onclick=""alert('Button Clicked!')"">Click Me</button>"
"एक div बनाओ जिस पर क्लिक करने पर उसका टेक्स्ट बदल जाए","<div id='div1' onclick=""this.innerHTML='You clicked me!'"">Click this div.</div>"
"एक जावास्क्रिप्ट फंक्शन बनाओ जो 'hello' अलर्ट करे","<script>function sayHello() { alert('hello'); }</script>"
"एक बटन बनाओ जो क्लिक करने पर 'sayHello' फंक्शन को कॉल करे","<script>function sayHello() { alert('hello'); }</script><button onclick='sayHello()'>Call Function</button>"
"जावास्क्रिप्ट से एक इमेज का सोर्स (src) बदलो","<img id='myImage' src='image1.jpg' width='100'><script>document.getElementById('myImage').src = 'image2.jpg';</script>"
"जावास्क्रिप्ट से एक टेक्स्ट का रंग नीला करो","<p id='p2'>Change my color.</p><script>document.getElementById('p2').style.color = 'blue';</script>"
"जावास्क्रिप्ट से एक टेक्स्ट का फॉन्ट साइज़ 30px करो","<p id='p3'>Make me big.</p><script>document.getElementById('p3').style.fontSize = '30px';</script>"
"एक वेरिएबल 'x' बनाओ और उसका मान 5 रखो","<script>var x = 5; console.log(x);</script>"
"एक वेरिएबल की वैल्यू को एक पैराग्राफ में दिखाओ","<p id='p4'></p><script>var name = 'Amit'; document.getElementById('p4').innerHTML = name;</script>"
"दो नंबरों को जोड़कर उसका परिणाम एक पैराग्राफ में दिखाओ","<p id='p5'></p><script>var a = 5; var b = 10; document.getElementById('p5').innerHTML = a + b;</script>"
"जावास्क्रिप्ट से एक एलिमेंट को छिपाओ","<h1 id='h1_hide'>Hide Me</h1><script>document.getElementById('h1_hide').style.display = 'none';</script>"
"एक छिपे हुए एलिमेंट को जावास्क्रिप्ट से दिखाओ","<p id='p_show' style='display:none;'>I am hidden.</p><script>document.getElementById('p_show').style.display = 'block';</script>"
"`this` कीवर्ड का उपयोग करके क्लिक किए गए एलिमेंट का टेक्स्ट बदलो","<button onclick=""this.innerHTML='I was clicked!'"">Click me</button>"
"एक इनपुट फील्ड की वैल्यू को अलर्ट में दिखाओ","<input type='text' id='nameInput' value='Saka'><button onclick=""alert(document.getElementById('nameInput').value)"">Show Value</button>"
"आज की तारीख और समय को एक पैराग्राफ में दिखाओ","<p id='time'></p><script>document.getElementById('time').innerHTML = Date();</script>"
"`document.write()` का उपयोग करके पेज पर कुछ लिखो","<p>This is a paragraph.</p><script>document.write('<h1>This text overwrites the page content.</h1>');</script>"
"CSS में một 'main-color' नाम का वेरिएबल बनाओ","<style>:root { --main-color: #3498db; }</style><p>Variable is set.</p>"
"`main-color` CSS वेरिएबल का उपयोग करके टेक्स्ट का रंग सेट करो","<style>:root { --main-color: #3498db; } p { color: var(--main-color); }</style><p>This text uses the CSS variable for its color.</p>"
"एक मीडिया क्वेरी बनाओ जो 600px से बड़ी स्क्रीन पर बैकग्राउंड बदले","<style>body { background-color: lightblue; } @media (min-width: 600px) { body { background-color: lightgreen; } }</style><div>Resize the browser window to see the effect.</div>"
"फ्लेक्सबॉक्स में मीडिया क्वेरी का उपयोग करके मोबाइल पर आइटम्स का क्रम बदलो","<style>.container{display:flex;} .item1{order:1;} .item2{order:2;} @media (max-width: 600px){.item1{order:2;}.item2{order:1;}}</style><div class='container'><div class='item1'>First item</div><div class='item2'>Second item (will show first on mobile)</div></div>"
"ग्रिड लेआउट को मोबाइल पर एक कॉलम का बनाओ","<style>.grid{display:grid; grid-template-columns: 1fr 1fr 1fr; gap:10px;} @media (max-width: 600px){.grid{grid-template-columns: 1fr;}}</style><div class='grid'><div style='background:lightgrey'>1</div><div style='background:lightgrey'>2</div><div style='background:lightgrey'>3</div></div>"
"एक div बनाओ जिसकी चौड़ाई और ऊंचाई viewport के 50% हो","<div style='width: 50vw; height: 50vh; background: coral;'>This div is 50% of your viewport width and height.</div>"
"`rem` यूनिट का उपयोग करके फॉन्ट साइज़ सेट करो","<p style='font-size: 1.5rem;'>This font size is relative to the root element (1.5rem).</p>"
"`em` यूनिट का उपयोग करके नेस्टेड फॉन्ट साइज़ सेट करो","<div style='font-size: 20px;'><p style='font-size: 1.5em;'>This text's size (30px) is 1.5 times its parent's font size (20px).</p></div>"
"`display: inline-block` का उपयोग करके आइटम्स को एक लाइन में रखो","<div style='display: inline-block; width: 100px; height: 50px; border: 1px solid; background: lightblue;'>A</div><div style='display: inline-block; width: 100px; height: 50px; border: 1px solid; background: lightgreen;'>B</div><p>They are in a line but have width/height.</p>"
"`float: left` का उपयोग करके इमेज के चारों ओर टेक्स्ट को रैप करो","<div><img src='image.jpg' alt='float' style='width: 50px; float: left; margin-right: 10px;'>This text will wrap around the image on the right side. This is a classic layout technique.</div>"
"`float` को क्लियर करने के लिए clearfix हैक का उपयोग करो","<style>.clearfix::after { content: ''; display: block; clear: both; }</style><div class='clearfix' style='border:1px solid'><div style='float: left;'>Floating Box</div></div><p>This text is below the float, not next to it.</p>"
"`position: sticky` का उपयोग करके एक एलिमेंट बनाओ जो स्क्रॉल करने पर चिपका रहे","<div style='height: 300px; border: 1px solid'><div style='position: sticky; top: 0; padding: 5px; background: lightyellow; border-bottom: 1px solid #ccc;'>I am sticky!</div><p style='margin-top:20px'>Scroll down to see the sticky effect.</p></div>"
"एक इमेज पर ब्लर (blur) इफ़ेक्ट लगाओ","<img src='image.jpg' alt='blur' style='filter: blur(2px);'>"
"एक इमेज को ग्रेस्केल (grayscale) करो","<img src='image.jpg' alt='grayscale' style='filter: grayscale(100%);'>"
"एक div को 45 डिग्री घुमाओ","<div style='width: 50px; height: 50px; margin: 20px; background: coral; transform: rotate(45deg);'></div>"
"एक div को होवर करने पर उसका साइज़ दोगुना करो","<style>.scaler:hover{transform:scale(2);}</style><div class='scaler' style='width:50px; height:50px; background:lightblue; transition:transform 0.3s; margin:20px;'>Scale me on hover</div>"
"एक div को उसकी जगह से 20px दाईं ओर खिसकाओ","<div style='width: 50px; height: 50px; background: lightgreen; transform: translate(20px, 0);'></div>"
"एक div को 20 डिग्री तिरछा (skew) करो","<div style='width: 50px; height: 50px; background: violet; transform: skewX(20deg);'></div>"
"एक div को रोटेट और स्केल दोनों करो","<div style='width: 50px; height: 50px; background: orange; transform: rotate(20deg) scale(1.2);'></div>"
"`display: contents` का उपयोग करके एक कंटेनर को लेआउट से हटाओ","<div style='display:flex; border: 1px solid red;'><div style='display:contents;'><p style='flex:1; border: 1px solid blue;'>Child 1</p><p style='flex:1; border: 1px solid blue;'>Child 2</p></div></div>"
"फ्लेक्सबॉक्स का उपयोग करके एक इमेज, टाइटल और टेक्स्ट वाला कार्ड बनाओ","<div style='display: flex; flex-direction: column; width: 200px; border: 1px solid grey; border-radius: 5px; box-shadow: 2px 2px 5px #ccc;'><img src='image.jpg' alt='card image' style='width: 100%;'><div style='padding: 10px;'><h3>Card Title</h3><p>Some card text here to describe.</p></div></div>"
"ग्रिड का उपयोग करके तीन कॉलम वाला एक कार्ड लेआउट बनाओ","<div style='display: grid; grid-template-columns: repeat(3, 1fr); gap: 15px;'><div style='border: 1px solid #ddd; padding: 10px;'>Card 1</div><div style='border: 1px solid #ddd; padding: 10px;'>Card 2</div><div style='border: 1px solid #ddd; padding: 10px;'>Card 3</div></div>"
"ग्रिड से एक 'होली ग्रेल' लेआउट (हेडर, फुटर, साइडबार, मेन कंटेंट) बनाओ","<style>.hg-wrapper{display:grid; grid-template-areas: 'header header header' 'nav main aside' 'footer footer footer'; gap: 5px; height: 200px;}</style><div class='hg-wrapper'><header style='grid-area:header; background:lightgrey;'>Header</header><nav style='grid-area:nav; background:lightblue;'>Nav</nav><main style='grid-area:main; background:lightyellow;'>Main</main><aside style='grid-area:aside; background:lightgreen;'>Aside</aside><footer style='grid-area:footer; background:lightgrey;'>Footer</footer></div>"
"फ्लेक्सबॉक्स से एक लॉगइन फॉर्म को पेज के बीचों-बीच रखो","<div style='display: flex; justify-content: center; align-items: center; height: 200px; background: #f0f0f0;'><form style='padding: 20px; border: 1px solid black;'><h2>Login</h2><input type='text' placeholder='Username'><br><br><input type='password' placeholder='Password'><br><br><button>Submit</button></form></div>"
"एक फॉर्म को लेबल और इनपुट के लिए दो कॉलम वाले ग्रिड में व्यवस्थित करो","<form style='display: grid; grid-template-columns: auto 1fr; gap: 10px; align-items: center;'><label for='name'>Name:</label><input type='text' id='name'><label for='email'>Email:</label><input type='email' id='email'></form>"
"`auto-fit` का उपयोग करके एक रिस्पॉन्सिव ग्रिड बनाओ","<div style='display: grid; grid-template-columns: repeat(auto-fit, minmax(100px, 1fr)); gap: 10px;'><div style='background:lightblue; padding:10px;'>1</div><div style='background:lightblue; padding:10px;'>2</div><div style='background:lightblue; padding:10px;'>3</div><div style='background:lightblue; padding:10px;'>4</div></div>"
"`auto-fill` का उपयोग करके एक रिस्पॉन्सिव ग्रिड बनाओ","<div style='display: grid; grid-template-columns: repeat(auto-fill, minmax(100px, 1fr)); gap: 10px;'><div style='background:lightcoral; padding:10px;'>1</div><div style='background:lightcoral; padding:10px;'>2</div><div style='background:lightcoral; padding:10px;'>3</div><div style='background:lightcoral; padding:10px;'>4</div></div>"
"एक div में आइटम को दाईं ओर और वर्टिकली सेंटर में रखो","<div style='display: flex; justify-content: flex-end; align-items: center; height: 100px; border: 1px solid;'>Item at Right & Middle</div>"
"ग्रिड में रो और कॉलम के लिए अलग-अलग गैप सेट करो","<div style='display: grid; grid-template-columns: 1fr 1fr; row-gap: 20px; column-gap: 5px;'><div style='background:lightgrey;'>1</div><div style='background:lightgrey;'>2</div><div style='background:lightgrey;'>3</div><div style='background:lightgrey;'>4</div></div>"
"कई लाइनों वाले फ्लेक्स कंटेनर में कंटेंट को सेंटर करो","<div style='display: flex; flex-wrap: wrap; height: 150px; align-content: center; border: 1px solid;'><div style='width: 50px; height: 30px; background: lightblue; margin: 5px;'>1</div><div style='width: 50px; height: 30px; background: lightblue; margin: 5px;'>2</div><div style='width: 50px; height: 30px; background: lightblue; margin: 5px;'>3</div><div style='width: 50px; height: 30px; background: lightblue; margin: 5px;'>4</div></div>"
"ग्रिड कंटेनर में कंटेंट को 'space-between' से व्यवस्थित करो","<div style='display: grid; height: 200px; grid-template-columns: 1fr 1fr; align-content: space-between; border: 1px solid;'><div style='background:lightblue;'>1</div><div style='background:lightblue;'>2</div><div style='background:lightblue;'>3</div><div style='background:lightblue;'>4</div></div>"
"फ्लेक्सबॉक्स से एक वर्टिकल नेविगेशन मेन्यू बनाओ","<nav style='display: flex; flex-direction: column; width: 100px; border: 1px solid;'><a href='#' style='padding: 10px; border-bottom: 1px solid #ddd;'>Home</a><a href='#' style='padding: 10px; border-bottom: 1px solid #ddd;'>About</a><a href='#' style='padding: 10px;'>Contact</a></nav>"
"ग्रिड का उपयोग करके आइटम्स को एक दूसरे के ऊपर ओवरलैप करो","<div style='display: grid; grid-template-columns: repeat(2, 1fr); grid-template-rows: repeat(2, 50px);'><div style='grid-column: 1 / 3; grid-row: 1 / 3; background: lightblue; opacity: 0.7;'>Back Layer</div><div style='grid-column: 2 / 3; grid-row: 2 / 3; background: coral;'>Front Layer</div></div>"
"एक इमेज को बिना खींचे div में फिट करो","<div style='width: 150px; height: 100px; border: 1px solid;'><img src='image.jpg' alt='fit image' style='width: 100%; height: 100%; object-fit: cover;'></div>"
"फ्लेक्सबॉक्स से एक फुटर बनाओ जिसमें तीन कॉलम हों","<footer style='display: flex; justify-content: space-around; background: #333; color: white; padding: 20px;'><div><h3>Column 1</h3><p>Info 1</p></div><div><h3>Column 2</h3><p>Info 2</p></div><div><h3>Column 3</h3><p>Info 3</p></div></footer>"
"`calc()` का उपयोग करके एक फ्लेक्सिबल साइडबार लेआउट बनाओ","<div style='display: flex;'><div style='flex-basis: 150px; background: lightgrey;'>Sidebar</div><div style='flex-basis: calc(100% - 150px); background: lightyellow;'>Main Content</div></div>"
"`auto-flow: dense` का उपयोग करके ग्रिड के खाली स्थानों को भरो","<style>.dense-grid{display:grid; grid-template-columns: repeat(auto-fit, minmax(60px, 1fr)); grid-auto-rows: 40px; grid-auto-flow: dense; gap: 5px;}</style><div class='dense-grid'><div style='grid-column: span 2; background: lightblue;'>1</div><div style='background: lightblue;'>2</div><div style='background: lightblue;'>3</div><div style='grid-column: span 2; background: lightblue;'>4</div></div>"
"एक div बनाओ जिसका आस्पेक्ट रेश्यो 16/9 हो","<div style='width: 50%; aspect-ratio: 16 / 9; background: lightgrey;'><p style='text-align:center; padding-top: 20%;'>16:9 Aspect Ratio</p></div>"
"`clamp()` का उपयोग करके एक रिस्पॉन्सिव फॉन्ट साइज़ बनाओ","<h1 style='font-size: clamp(1.5rem, 5vw, 3rem);'>This is a Fluid Responsive Title</h1>"
"ग्रिड लेआउट के अंदर फ्लेक्सबॉक्स का उपयोग करो","<div style='display: grid; grid-template-columns: 1fr 1fr; gap:10px;'><div style='display: flex; justify-content: center; align-items: center; background: lightblue;'>Flexbox Inside Grid</div><div style='background: lightcoral;'>Grid Cell 2</div></div>"
"एक div को ग्रिड कंटेनर बनाओ","<div style='display: grid; border: 1px solid; min-height: 50px; padding: 5px;'>Grid Container</div>"
"तीन बराबर चौड़ाई वाले कॉलम का ग्रिड बनाओ","<div style='display: grid; grid-template-columns: 1fr 1fr 1fr; gap: 10px;'><div style='background: lightblue; padding: 5px;'>1</div><div style='background: lightblue; padding: 5px;'>2</div><div style='background: lightblue; padding: 5px;'>3</div></div>"
"दो कॉलम का ग्रिड बनाओ, पहला 100px और दूसरा 200px चौड़ा","<div style='display: grid; grid-template-columns: 100px 200px; gap: 10px;'><div style='background: lightcoral; padding: 5px;'>100px</div><div style='background: lightcoral; padding: 5px;'>200px</div></div>"
"दो रो का ग्रिड बनाओ, पहली 50px और दूसरी 100px ऊंची","<div style='display: grid; grid-template-rows: 50px 100px; gap: 10px;'><div style='background: lightgreen;'>50px tall</div><div style='background: lightgreen;'>100px tall</div></div>"
"ग्रिड आइटम्स के बीच 20px का गैप डालो","<div style='display: grid; grid-template-columns: 1fr 1fr; gap: 20px;'><div style='background: lightgrey;'>1</div><div style='background: lightgrey;'>2</div><div style='background: lightgrey;'>3</div><div style='background: lightgrey;'>4</div></div>"
"एक आइटम को पहले कॉलम से शुरू करके तीसरे कॉलम तक फैलाओ","<div style='display: grid; grid-template-columns: 1fr 1fr 1fr; gap: 10px;'><div style='grid-column-start: 1; grid-column-end: 3; background: lightblue;'>Spans first two columns</div><div style='background: lightgrey;'>3</div></div>"
"एक आइटम को पहली रो से शुरू करके तीसरी रो तक फैलाओ","<div style='display: grid; grid-template-columns: 1fr 1fr; grid-template-rows: 50px 50px 50px; gap: 10px;'><div style='grid-row-start: 1; grid-row-end: 3; background: lightcoral;'>Spans first two rows</div><div style='background: lightgrey;'>B</div><div style='background: lightgrey;'>C</div><div style='background: lightgrey;'>D</div></div>"
"ग्रिड कॉलम शॉर्टहैंड का उपयोग करके एक आइटम को 2 कॉलम तक फैलाओ","<div style='display: grid; grid-template-columns: repeat(3, 1fr); gap: 10px;'><div style='grid-column: 1 / 3; background: lightgreen;'>Spans from line 1 to 3</div><div style='background: lightgrey;'>3</div></div>"
"ग्रिड रो शॉर्टहैंड का उपयोग करके एक आइटम को 2 रो तक फैलाओ","<div style='display: grid; grid-template-columns: 1fr 1fr; grid-template-rows: repeat(3, 50px); gap: 10px;'><div style='grid-row: 1 / 3; background: lightgoldenrodyellow;'>Spans from row line 1 to 3</div><div style='background: lightgrey;'>B</div><div style='background: lightgrey;'>C</div><div style='background: lightgrey;'>D</div></div>"
"एक आइटम को दूसरी रो और तीसरे कॉलम में रखो","<div style='display: grid; grid-template-columns: repeat(3, 1fr); grid-template-rows: repeat(2, 50px); gap: 5px;'><div style='grid-row: 2; grid-column: 3; background: violet; color: white;'>Item at 2/3</div></div>"
"ग्रिड एरिया का उपयोग करके एक हेडर, मेन और फुटर लेआउट बनाओ","<style>.wrapper{display:grid; grid-template-areas: 'header' 'main' 'footer'; gap: 5px;}.h{grid-area:header; background:lightgrey;}.m{grid-area:main;}.f{grid-area:footer; background:lightgrey;}</style><div class='wrapper'><header class='h'>Header</header><main class='m'>Main Content</main><footer class='f'>Footer</footer></div>"
"ग्रिड में ऑटोमेटिकली बनने वाली रो की ऊंचाई 100px सेट करो","<div style='display: grid; grid-template-columns: 1fr 1fr; grid-auto-rows: 100px; gap: 10px;'><div style='background: lightblue;'>1</div><div style='background: lightblue;'>2</div><div style='background: lightblue;'>3 (new row, 100px tall)</div></div>"
"ग्रिड में ऑटोमेटिकली बनने वाले कॉलम की चौड़ाई 100px सेट करो","<div style='display: grid; grid-auto-flow: column; grid-auto-columns: 100px; gap: 10px;'><div style='background: lightcoral;'>1</div><div style='background: lightcoral;'>2</div></div>"
"repeat फंक्शन का उपयोग करके बराबर चौड़ाई वाले 4 कॉलम का ग्रिड बनाओ","<div style='display: grid; grid-template-columns: repeat(4, 1fr); gap: 10px;'><div style='background: lightgrey;'>1</div><div style='background: lightgrey;'>2</div><div style='background: lightgrey;'>3</div><div style='background: lightgrey;'>4</div></div>"
"minmax फंक्शन से एक फ्लेक्सिबल ग्रिड कॉलम बनाओ जो 100px से छोटा न हो","<div style='display: grid; grid-template-columns: minmax(100px, 25%) 1fr; gap: 10px;'><div style='background: lightgreen;'>At least 100px</div><div style='background: lightgrey;'>Flexible</div></div>"
"ग्रिड सेल के अंदर आइटम्स को हॉरिजॉन्टली सेंटर करो","<div style='display: grid; grid-template-columns: 150px; justify-items: center; border: 1px solid;'><div style='background: lightblue;'>Centered</div></div>"
"ग्रिड सेल के अंदर आइटम्स को वर्टिकली सेंटर करो","<div style='display: grid; grid-template-rows: 100px; align-items: center; border: 1px solid;'><div style='background: lightcoral;'>Middle</div></div>"
"ग्रिड सेल के अंदर आइटम्स को पूरी तरह से सेंटर करो","<div style='display: grid; grid-template-rows: 100px; place-items: center; border: 1px solid;'><div style='background: lightgreen;'>Center & Middle</div></div>"
"नाम वाली ग्रिड लाइन्स का उपयोग करके एक आइटम को रखो","<style>.grid-container{display:grid; grid-template-columns: [col1-start] 1fr [col2-start] 1fr [col2-end];}</style><div class='grid-container'><div style='grid-column: col1-start / col2-end;'>Spans across named lines</div></div>"
"एक ग्रिड के अंदर दूसरा ग्रिड बनाओ (नेस्टेड ग्रिड)","<div style='display: grid; grid-template-columns: 1fr 1fr; gap: 10px;'><div style='background: lightgrey; padding:5px;'>A</div><div style='display: grid; grid-template-columns: 1fr 1fr; gap: 5px; background: lightblue; padding:5px;'><div style='background: navy; color: white;'>B1</div><div style='background: navy; color: white;'>B2</div></div></div>"
"एक div को फ्लेक्स कंटेनर बनाओ","<div style='display: flex; border: 1px solid; min-height: 50px;'></div>"
"एक फ्लेक्स कंटेनर बनाओ जिसमें आइटम एक रो में हों","<div style='display: flex; border: 1px solid;'><div style='padding: 10px;'>One</div><div style='padding: 10px;'>Two</div><div style='padding: 10px;'>Three</div></div>"
"एक फ्लेक्स कंटेनर बनाओ जिसमें आइटम एक कॉलम में हों","<div style='display: flex; flex-direction: column; border: 1px solid;'><div style='padding: 10px;'>One</div><div style='padding: 10px;'>Two</div></div>"
"फ्लेक्स आइटम्स को हॉरिजॉन्टली सेंटर करो","<div style='display: flex; justify-content: center; border: 1px solid;'><div style='padding: 10px;'>Centered</div></div>"
"फ्लेक्स आइटम्स को हॉरिजॉन्टली दाईं ओर रखो","<div style='display: flex; justify-content: flex-end; border: 1px solid;'><div style='padding: 10px;'>Right Side</div></div>"
"फ्लेक्स आइटम्स के बीच में बराबर जगह डालो","<div style='display: flex; justify-content: space-between; border: 1px solid; padding: 5px;'><div style='background: lightblue;'>Left</div><div style='background: lightgreen;'>Right</div></div>"
"फ्लेक्स आइटम्स के चारों ओर बराबर जगह डालो","<div style='display: flex; justify-content: space-around; border: 1px solid; padding: 5px;'><div style='background: lightblue;'>One</div><div style='background: lightgreen;'>Two</div></div>"
"फ्लेक्स आइटम्स को वर्टिकली सेंटर करो","<div style='display: flex; align-items: center; height: 100px; border: 1px solid;'><div style='padding: 10px;'>Middle</div></div>"
"फ्लेक्स आइटम्स को वर्टिकली टॉप पर रखो","<div style='display: flex; align-items: flex-start; height: 100px; border: 1px solid;'><div style='padding: 10px;'>Top</div></div>"
"फ्लेक्स आइटम्स को वर्टिकली बॉटम पर रखो","<div style='display: flex; align-items: flex-end; height: 100px; border: 1px solid;'><div style='padding: 10px;'>Bottom</div></div>"
"एक आइटम को हॉरिजॉन्टली और वर्टिकली, दोनों तरह से सेंटर करो","<div style='display: flex; justify-content: center; align-items: center; height: 100px; border: 1px solid;'><div style='padding: 10px;'>Perfectly Centered</div></div>"
"फ्लेक्स आइटम्स को रैप (wrap) करो ताकि वे छोटी स्क्रीन पर अगली लाइन में चले जाएँ","<div style='display: flex; flex-wrap: wrap; border: 1px solid;'><div style='padding: 10px; width: 100px;'>Item 1</div><div style='padding: 10px; width: 100px;'>Item 2</div><div style='padding: 10px; width: 100px;'>Item 3</div></div>"
"फ्लेक्स आइटम्स के बीच 10px का गैप डालो","<div style='display: flex; gap: 10px; border: 1px solid;'><div style='background: lightblue; padding: 10px;'>One</div><div style='background: lightgreen; padding: 10px;'>Two</div></div>"
"एक फ्लेक्स आइटम बनाओ जो बची हुई सारी जगह ले ले","<div style='display: flex; border: 1px solid;'><div style='padding: 10px;'>Fixed</div><div style='padding: 10px; flex-grow: 1; background: lightgrey;'>This item grows to fill remaining space</div></div>"
"एक फ्लेक्स आइटम की शुरुआती चौड़ाई 150px सेट करो","<div style='display: flex; border: 1px solid;'><div style='flex-basis: 150px; background: lightblue;'>I am 150px wide</div><div style='flex-grow: 1; background: lightgrey;'>I take the rest</div></div>"
"फ्लेक्स शॉर्टहैंड का उपयोग करके एक फ्लेक्सिबल आइटम बनाओ","<div style='display: flex; border: 1px solid;'><div style='flex: 1 1 150px; padding: 10px;'>Flexible Item</div><div style='flex: 1 1 150px; padding: 10px;'>Another Flexible Item</div></div>"
"फ्लेक्स आइटम्स का क्रम बदलो, दूसरे को पहले दिखाओ","<div style='display: flex; border: 1px solid;'><div style='padding: 10px; order: 2;'>Item One (but shows second)</div><div style='padding: 10px; order: 1;'>Item Two (but shows first)</div></div>"
"सिर्फ एक आइटम को वर्टिकली बॉटम में रखो, बाकी को टॉप पर","<div style='display: flex; align-items: flex-start; height: 100px; border: 1px solid;'><div style='padding: 10px;'>Top 1</div><div style='padding: 10px; align-self: flex-end;'>Bottom</div><div style='padding: 10px;'>Top 2</div></div>"
"फ्लेक्सबॉक्स का उपयोग करके एक साधारण नेविगेशन बार बनाओ","<nav style='display: flex; justify-content: space-between; background: #333; padding: 10px;'><a href='#' style='color: white;'>Logo</a><div><a href='#' style='color: white; margin-left: 15px;'>Home</a><a href='#' style='color: white; margin-left: 15px;'>About</a></div></nav>"
"फ्लेक्स आइटम्स को उल्टे क्रम में (रो में) दिखाओ","<div style='display: flex; flex-direction: row-reverse; border: 1px solid;'><div style='padding: 10px;'>First</div><div style='padding: 10px;'>Second</div><div style='padding: 10px;'>Third</div></div>"

"CSS से एक div के अंदर सिर्फ पैराग्राफ को स्टाइल करो","<style>div > p { color: blue; }</style><div><p>This is blue.</p><span><p>This is not blue.</p></span></div>"
"एक लिंक बनाओ जो होवर करने पर लाल हो जाए","<style>a:hover { color: red; }</style><a href='#'>Hover over me</a>"
"एक बटन बनाओ जो क्लिक करते समय हरा हो जाए","<style>button:active { background-color: green; }</style><button>Click me</button>"
"एक div बनाओ जिसकी पोजीशन रिलेटिव हो","<div style='position: relative; left: 20px; border: 1px solid;'>Relative Position</div>"
"एक div के अंदर दूसरे div को टॉप-लेफ्ट कोने से 10px दूर रखो","<div style='position: relative; width: 100px; height: 100px; border: 1px solid;'><div style='position: absolute; top: 10px; left: 10px; background: red;'>Absolute</div></div>"
"एक हेडर बनाओ जो स्क्रॉल करने पर भी टॉप पर फिक्स रहे","<div style='position: fixed; top: 0; left: 0; width: 100%; padding: 5px; background: lightgrey;'>Fixed Header</div>"
"दो div बनाओ जिसमें लाल वाला div नीले वाले के ऊपर दिखे","<div style='position: absolute; top: 10px; left: 10px; width: 50px; height: 50px; background: blue; z-index: 1;'></div><div style='position: absolute; top: 20px; left: 20px; width: 50px; height: 50px; background: red; z-index: 2;'></div>"
"एक छोटे div के अंदर ज़्यादा टेक्स्ट डालो ताकि स्क्रॉलबार दिखे","<div style='width: 100px; height: 50px; overflow: scroll; border: 1px solid;'>This is a lot of text inside a small div that will cause a scrollbar to appear.</div>"
"एक छोटे div के अंदर ज़्यादा टेक्स्ट डालो और जो बाहर निकले उसे छिपा दो","<div style='width: 100px; height: 50px; overflow: hidden; border: 1px solid;'>This is a lot of text inside a small div but you will only see a part of it.</div>"
"!important का उपयोग करके एक स्टाइल को ओवरराइड करो","<style>.blue {color: blue !important;}</style><p class='blue' style='color: red;'>This text will be blue.</p>"
"h1 और h2 दोनों को एक साथ लाल रंग का करो","<style>h1, h2 { color: red; }</style><h1>Red H1</h1><h2>Red H2</h2><p>Normal text.</p>"
"एक div बनाओ जिस पर होवर करने पर 'help' कर्सर दिखे","<div style='cursor: help; border: 1px solid;'>Hover here to see the help cursor</div>"
"दो span एलिमेंट्स बनाओ जो एक ही लाइन में दिखें","<span style='border: 1px solid; padding: 2px;'>Hello</span> <span style='border: 1px solid; padding: 2px;'>World</span>"
"दो span एलिमेंट्स बनाओ जो अलग-अलग लाइन में दिखें","<span style='display: block; border: 1px solid;'>Hello</span><span style='display: block; border: 1px solid;'>World</span>"
"एक पैराग्राफ बनाओ जो दिखाई न दे","<p style='display: none;'>You cannot see me.</p>"
"एक पैराग्राफ बनाओ जो दिखाई न दे लेकिन अपनी जगह घेरे","<p style='visibility: hidden;'>I am hidden but still take up space.</p>"
"CSS कोड के अंदर एक कमेंट लिखो","<style>/* This is a single-line CSS comment */ p { color: green; }</style>"
"एक लिंक बनाओ जो visit करने के बाद हरा हो जाए","<style>a:visited { color: green; }</style><a href='#'>Click this link and I will turn green</a>"
"एक 50px का लाल स्क्वायर बनाओ जो स्क्रीन के बॉटम-राइट कोने में हो","<div style='position: fixed; bottom: 10px; right: 10px; width: 50px; height: 50px; background: red;'></div>"
"एक इनपुट फील्ड बनाओ जिस पर फोकस करने पर उसका बॉर्डर पीला हो जाए","<style>input:focus { border: 2px solid yellow; }</style><input type='text' placeholder='Click on me'>"
"एक div बनाओ जिसमें चारों तरफ से 20px की पैडिंग हो","<div style='padding: 20px; border: 1px solid;'>Content with 20px padding.</div>"
"एक div बनाओ जिसमें ऊपर-नीचे 10px और दाएं-बाएं 30px की पैडिंग हो","<div style='padding: 10px 30px; border: 1px solid;'>Padding top/bottom 10px, left/right 30px.</div>"
"एक div बनाओ जिसमें सिर्फ टॉप से 25px की पैडिंग हो","<div style='padding-top: 25px; border: 1px solid;'>Content with only top padding.</div>"
"एक div बनाओ जिसके चारों तरफ 20px का मार्जिन हो","<div style='margin: 20px; border: 1px solid; background: lightgrey;'>This div has 20px margin around it.</div>"
"एक 50% चौड़ाई वाले div को पेज के सेंटर में करो","<div style='width: 50%; margin: auto; border: 1px solid;'>This div is centered.</div>"
"एक div बनाओ जिसके सिर्फ बाईं ओर 40px का मार्जिन हो","<div style='margin-left: 40px; border: 1px solid;'>This div has a left margin of 40px.</div>"
"एक 3px मोटा, सॉलिड, नीला बॉर्डर बनाओ","<div style='border: 3px solid blue; padding: 10px;'>This div has a solid blue border.</div>"
"एक div बनाओ जिसके सभी कोने 10px तक गोल हों","<div style='border: 1px solid black; border-radius: 10px; padding: 10px;'>Rounded Corners</div>"
"एक 100px का स्क्वायर div बनाओ जो पूरी तरह से गोल दिखे","<div style='width: 100px; height: 100px; border-radius: 50%; background-color: coral;'></div>"
"एक 100px चौड़ा div बनाओ जिसमें 20px की पैडिंग और 5px का बॉर्डर शामिल हो","<div style='width: 100px; padding: 20px; border: 5px solid black; box-sizing: border-box;'>Box Sizing Example</div>"
"एक CSS क्लास '.highlight' बनाओ जिसका बैकग्राउंड पीला हो","<style>.highlight { background-color: yellow; }</style>"
"एक पैराग्राफ बनाओ जिस पर 'highlight' क्लास लगी हो","<style>.highlight { background-color: yellow; }</style><p class='highlight'>This paragraph is highlighted using a class.</p>"
"एक div बनाओ जिस पर 'box' और 'blue-text' दो क्लास लगी हों","<style>.box { border: 1px solid; } .blue-text { color: blue; }</style><div class='box blue-text'>Multiple classes example</div>"
"एक div बनाओ जो स्क्रीन की 80% चौड़ाई ले","<div style='width: 80%; border: 1px solid; margin:auto;'>This div has 80% width.</div>"
"एक div बनाओ जिसकी अधिकतम चौड़ाई 500px हो","<div style='max-width: 500px; margin: auto; border: 1px solid;'>This div's max-width is 500px.</div>"
"एक div बनाओ जिसकी न्यूनतम ऊंचाई 100px हो","<div style='min-height: 100px; border: 1px solid;'>This div's min-height is 100px.</div>"
"एक बटन बनाओ जिसके चारों ओर 2px की नीली आउटलाइन हो","<button style='outline: 2px dotted blue; border: 1px solid;'>Button with Outline</button>"
"एक div बनाओ जिसके नीचे परछाई (box shadow) हो","<div style='padding: 10px; box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2); border: 1px solid #ddd;'>Box with Shadow</div>"
"एक 200px चौड़ा div बनाओ जिसमें 15px पैडिंग और 10px मार्जिन हो","<div style='width: 200px; padding: 15px; margin: 10px; border: 1px solid red; box-sizing: border-box;'>All in one box</div>"
"एक h1 बनाओ जिसकी आईडी 'main-title' हो और CSS से उसका रंग मैजेंटा करो","<style>#main-title { color: magenta; }</style><h1 id='main-title'>Main Title Styled with ID</h1>"
"एक पैराग्राफ बनाओ जिसका टेक्स्ट लाल रंग का हो","<p style='color: red;'>This is red text.</p>"
"एक h1 बनाओ जिसका बैकग्राउंड पीला हो","<h1 style='background-color: yellow;'>Yellow Background Heading</h1>"
"एक पैराग्राफ बनाओ जिसका फॉन्ट साइज़ 20 पिक्सल हो","<p style='font-size: 20px;'>This text is 20 pixels high.</p>"
"एक पैराग्राफ बनाओ जिसका फॉन्ट 'Arial' हो","<p style='font-family: Arial, sans-serif;'>This paragraph is in Arial font.</p>"
"एक h2 हेडिंग बनाओ जो सेंटर में अलाइन हो","<h2 style='text-align: center;'>Centered Heading</h2>"
"एक पैराग्राफ बनाओ जो दाईं ओर अलाइन हो","<p style='text-align: right;'>This text is right-aligned.</p>"
"एक टेक्स्ट बनाओ जिसे CSS से अंडरलाइन किया गया हो","<p style='text-decoration: underline;'>Underlined with CSS.</p>"
"एक टेक्स्ट बनाओ जिसे बीच से काटा गया हो (line-through)","<p style='text-decoration: line-through;'>Strikethrough text.</p>"
"एक पैराग्राफ बनाओ जो नीला हो और सेंटर में हो","<p style='color: blue; text-align: center;'>Blue and centered text.</p>"
"CSS का उपयोग करके टेक्स्ट को बोल्ड करो","<p style='font-weight: bold;'>This text is bold using CSS.</p>"
"CSS का उपयोग करके टेक्स्ट को इटैलिक करो","<p style='font-style: italic;'>This text is italic using CSS.</p>"
"एक 100 पिक्सल चौड़ा और 50 पिक्सल ऊँचा div बनाओ","<div style='width: 100px; height: 50px; border: 1px solid black;'></div>"
"एक टेक्स्ट बनाओ जिसके अक्षरों के बीच में ज़्यादा जगह हो","<p style='letter-spacing: 3px;'>Wide letter spacing.</p>"
"एक टेक्स्ट बनाओ जिसके शब्दों के बीच में ज़्यादा जगह हो","<p style='word-spacing: 10px;'>Wide word spacing.</p>"
"एक टेक्स्ट बनाओ जो पूरा अपरकेस में हो","<p style='text-transform: uppercase;'>this will be uppercase.</p>"
"एक टेक्स्ट बनाओ जिसका हर शब्द कैपिटल हो","<p style='text-transform: capitalize;'>each word is capitalized.</p>"
"एक div बनाओ जिसका बैकग्राउंड हल्का नीला हो और अंदर 15px की पैडिंग हो","<div style='background-color: lightblue; padding: 15px;'>This div has padding.</div>"
"एक div बनाओ जिसका बॉर्डर डॉटेड (dotted) हो","<div style='border: 2px dotted red; padding: 5px;'>Dotted Border</div>"
"एक div बनाओ जिसका बॉर्डर डैशेड (dashed) हो","<div style='border: 2px dashed blue; padding: 5px;'>Dashed Border</div>"
"एक h1 बनाओ जो 50% पारदर्शी (transparent) हो","<h1 style='opacity: 0.5;'>Faded Heading</h1>"
"एक नीला बटन बनाओ जिस पर 'Click Here' लिखा हो","<button style='background-color: blue; color: white;'>Click Here</button>"
"एक पैराग्राफ जिसमें 'Hello World' लिखा हो","<p>Hello World</p>"
"एक तस्वीर लगाओ जो 'cat.jpg' दिखाती हो","<img src='cat.jpg' alt='A cat picture'>"
"एक h2 हेडिंग जिसका रंग हरा हो","<h2 style='color: green;'>Green Heading</h2>"
"तीन आइटम वाली एक नंबर वाली लिस्ट बनाओ","<ol><li>First</li><li>Second</li><li>Third</li></ol>"
"एक बड़ा पैराग्राफ बनाओ जिसका फॉन्ट साइज़ 18px हो","<p style='font-size: 18px;'>This is a larger paragraph.</p>"
"एक टेक्स्ट इनपुट फील्ड बनाओ जिसमें पहले से 'Enter your name' लिखा हो","<input type='text' placeholder='Enter your name'>"
"एक चेकबॉक्स बनाओ जो पहले से चेक्ड हो","<input type='checkbox' checked>"
"एक लाल रंग का डिवाइडर (horizontal line) बनाओ","<hr style='border-color: red;'>"
"एक टेबल बनाओ जिसमें दो हेडिंग 'Name' और 'Age' हों","<table><tr><th>Name</th><th>Age</th></tr></table>"
"एक ड्रॉपडाउन मेन्यू बनाओ जिसमें 'Car', 'Bike', 'Bus' के ऑप्शन हों","<select><option>Car</option><option>Bike</option><option>Bus</option></select>"
"एक पासवर्ड इनपुट फील्ड बनाओ","<input type='password' placeholder='Enter password'>"
"एक div बनाओ जिसका बैकग्राउंड हल्का ग्रे हो","<div style='background-color: #f0f0f0; padding: 10px;'>This is a grey div.</div>"
"एक बटन बनाओ जिस पर क्लिक करने पर एक अलर्ट आए","<button onclick=""alert('Hello!')"">Click for Alert</button>"
"टेक्स्ट को इटैलिक (तिरछा) करो","<i>This text is italic.</i>"
"एक नंबर इनपुट फील्ड बनाओ","<input type='number'>"
"एक ईमेल इनपुट फील्ड बनाओ","<input type='email' placeholder='your@email.com'>"
"एक div बनाओ जिसके कोने गोल (rounded corners) हों","<div style='border: 1px solid black; border-radius: 8px; padding: 10px;'>Rounded corners</div>"
"एक पैराग्राफ बनाओ जिसका टेक्स्ट सेंटर में हो","<p style='text-align: center;'>This text is centered.</p>"
"एक सबमिट बटन बनाओ जिसका बैकग्राउंड हरा हो","<input type='submit' style='background-color: green; color: white;'>"
"एक बड़ा टेक्स्ट एरिया बनाओ जिसमें यूज़र कई लाइनें लिख सके","<textarea rows='4' cols='50'></textarea>"
"एक लिंक बनाओ जो एक नए टैब में खुले","<a href='https://google.com' target='_blank'>Open Google in New Tab</a>"
"टेक्स्ट को अंडरलाइन करो","<u>This is underlined text.</u>"
"एक जावास्क्रिप्ट कोड लिखो जो आज की तारीख दिखाए","<p id='date'></p><script>document.getElementById('date').innerHTML = new Date();</script>"
"एक div बनाओ जिस पर माउस ले जाने पर उसका रंग लाल हो जाए","<style>#hoverDiv:hover { color: red; }</style><div id='hoverDiv'>Hover over me!</div>"
"तीन ऑप्शन वाले रेडियो बटन बनाओ","<input type='radio' name='gender' value='male'> Male <input type='radio' name='gender' value='female'> Female <input type='radio' name='gender' value='other'> Other"
"एक तारीख चुनने वाला इनपुट फील्ड बनाओ","<input type='date'>"
"एक नेविगेशन सेक्शन के लिए HTML टैग बनाओ","<nav><ul><li>Home</li><li>About</li><li>Contact</li></ul></nav>"
"वेबसाइट के लिए एक फुटर बनाओ","<footer><p>Copyright © 2025 My Website</p></footer>"
"एक div बनाओ जिसके चारों ओर बॉक्स-शैडो हो","<div style='padding: 15px; box-shadow: 5px 5px 10px #888888;'>This is a shadow box.</div>"
"एक div बनाओ जिसका बैकग्राउंड लाल से पीले रंग का ग्रेडिएंट हो","<div style='height: 100px; background-image: linear-gradient(red, yellow);'></div>"
"एक बटन बनाओ जो होवर करने पर धीरे-धीरे बड़ा हो","<style>.g-btn:hover { transform: scale(1.1); } .g-btn { transition: transform 0.2s; }</style><button class='g-btn'>Grow Button</button>"
"एक इनपुट और बटन बनाओ जो इनपुट की वैल्यू का अलर्ट दिखाए","<input id='myText' type='text' value='Hello'><button onclick=""alert(document.getElementById('myText').value)"">Show Value</button>"
"एक पैराग्राफ और बटन बनाओ जो पैराग्राफ का रंग बदल दे","<p id='myPara'>Some text here.</p><button onclick=""document.getElementById('myPara').style.color='blue'"">Change Color</button>"
"एक 'Details' टैग बनाओ जिसे खोला और बंद किया जा सके","<details><summary>Show More</summary><p>This is the hidden information.</p></details>"
"एक आधी पारदर्शी (semi-transparent) तस्वीर बनाओ","<img src='my_image.png' alt='transparent image' style='opacity: 0.5;'>"
"एक वीडियो प्लेयर बनाओ जिसके कंट्रोल दिखें","<video width='320' height='240' controls><source src='movie.mp4' type='video/mp4'></video>"
"CSS का इस्तेमाल करके टेक्स्ट को मोटा (bold) करो","<p style='font-weight: bold;'>This text is bold.</p>"
"एक h1 और बटन बनाओ जो h1 को छिपा दे","<h1 id='textToHide'>Hide this text</h1><button onclick=""document.getElementById('textToHide').style.display='none'"">Hide</button>"
"एक छिपा हुआ टेक्स्ट और बटन बनाओ जो टेक्स्ट को दिखाए","<p id='textToShow' style='display:none;'>Hidden text.</p><button onclick=""document.getElementById('textToShow').style.display='block'"">Show</button>"
"एक कोटेशन के लिए blockquote टैग का इस्तेमाल करो","<blockquote>This is a long quotation block. It is often indented.</blockquote>"
"एक div बनाओ जिस पर माउस ले जाने पर कर्सर पॉइंटर बन जाए","<div style='cursor: pointer; border: 1px solid black;'>Hover here to see pointer</div>"
"एक फॉर्म के लिए 'रीसेट' बटन बनाओ","<form><input type='text' value='some text'><input type='reset'></form>"
"जावास्क्रिप्ट में एक फंक्शन बनाओ जो एक नाम लेकर ग्रीटिंग मैसेज लौटाए","<script>function greet(name) { return 'Hello, ' + name; }</script>"
"एक पैराग्राफ बनाओ जिसके सभी अक्षर बड़े (UPPERCASE) हों","<p style='text-transform: uppercase;'>This text will be in uppercase.</p>"
"एक टेबल बनाओ जिसमें एक हेडर दो कॉलम तक फैला हो","<table><tr><th colspan='2'>Name</th></tr><tr><td>Amit</td><td>Saka</td></tr></table>"
"एक रेंज स्लाइडर बनाओ जो 0 से 100 तक जाए","<input type='range' min='0' max='100'>"
"CSS से उन सभी इनपुट को स्टाइल करो जिनका type 'text' हो","<style>input[type='text'] { border: 2px solid blue; }</style><input type='text'><input type='password'>"
"एक बटन बनाओ जो हर क्लिक पर एक नंबर बढ़ाए","<p>Count: <span id='count'>0</span></p><button onclick=""document.getElementById('count').innerText = parseInt(document.getElementById('count').innerText) + 1"">Add 1</button>"
"एक ब्लॉग पोस्ट के लिए article टैग बनाओ","<article><h2>Blog Title</h2><p>This is the content of the blog post.</p></article>"
"एक h1 बनाओ जिसमें टेक्स्ट के नीचे परछाई (shadow) हो","<h1 style='text-shadow: 2px 2px 4px #000000;'>Shadow Text</h1>"
"एक तस्वीर और बटन बनाओ जो क्लिक करने पर तस्वीर बदल दे","<img id='myImage' src='pic_a.jpg' width='100'><button onclick=""document.getElementById('myImage').src='pic_b.jpg'"">Change Image</button>"
"एक साइडबार के लिए aside टैग का इस्तेमाल करो","<aside><h4>Related Articles</h4><p>An interesting article.</p></aside>"
"एक Flexbox कंटेनर बनाओ जिसमें आइटम्स के बीच में बराबर जगह हो","<div style='display: flex; justify-content: space-between; border: 1px solid;'><p>Left</p><p>Center</p><p>Right</p></div>"
"एक टेक्स्ट इनपुट बनाओ जिसे भरना ज़रूरी (required) हो","<form><input type='text' required><input type='submit'></form>"
"एक ऑडियो प्लेयर बनाओ जो 'song.mp3' चलाए","<audio controls><source src='song.mp3' type='audio/mpeg'></audio>"
"एक बटन बनाओ जो एक टेक्स्ट को दिखाए और छिपाए (toggle)","<p id='toggleText'>Click the button to toggle me.</p><button onclick=""var x = document.getElementById('toggleText'); x.style.display = (x.style.display === 'none' ? 'block' : 'none');"">Toggle Text</button>"
"एक div के अंदर दूसरे div को टॉप-राइट कोने में रखो","<div style='position: relative; width: 200px; height: 100px; border: 1px solid;'><div style='position: absolute; top: 5px; right: 5px; background: red;'>Corner</div></div>"
"एक डिसेबल्ड बटन बनाओ जिस पर क्लिक न किया जा सके","<button disabled>You can't click me</button>"
"एक बटन बनाओ जो क्लिक करने पर वर्तमान पेज का URL बताए","<button onclick=""alert(window.location.href)"">Show Page URL</button>"
"एक लिस्ट बनाओ जिसके बुलेट्स स्क्वायर (square) हों","<ul style='list-style-type: square;'><li>Apple</li><li>Banana</li></ul>"
"मोबाइल responsive वेबसाइट के लिए viewport meta टैग","<meta name='viewport' content='width=device-width, initial-scale=1.0'>"
"जावास्क्रिप्ट से किसी एलिमेंट की CSS क्लास बदलो","<style>.blue{color:blue;}.red{color:red;}</style><p id='p_class' class='blue'>Hello</p><button onclick=""document.getElementById('p_class').className = 'red'"">Make Red</button>"
"ऑटो-सजेशन के लिए एक datalist इनपुट बनाओ","<label for='browser'>Choose a browser:</label><input list='browsers' id='browser' name='browser'><datalist id='browsers'><option value='Edge'><option value='Firefox'><option value='Chrome'></datalist>"
"CSS एनीमेशन से एक टेक्स्ट बनाओ जो धीरे-धीरे fade in हो","<style>@keyframes fadeIn { from { opacity: 0; } to { opacity: 1; } } .fade-in { animation: fadeIn 2s; }</style><h1 class='fade-in'>I faded in!</h1>"
"वेबसाइट के लिए सबसे बड़ी हेडिंग बनाओ","<h1>This is a Main Heading</h1>"
"एक h2 सब-हेडिंग बनाओ","<h2>This is a Sub-heading</h2>"
"सबसे छोटी हेडिंग के लिए टैग","<h6>This is the smallest heading</h6>"
"एक छोटा सा पैराग्राफ लिखो","<p>This is a simple paragraph of text.</p>"
"टेक्स्ट को बोल्ड करने के लिए टैग","<b>Bold Text</b>"
"टेक्स्ट को इटैलिक करने के लिए टैग","<i>Italic Text</i>"
"टेक्स्ट को अंडरलाइन करने के लिए टैग","<u>Underlined Text</u>"
"महत्वपूर्ण टेक्स्ट के लिए strong टैग का उपयोग करो","<strong>This text is important.</strong>"
"जोर देने वाले टेक्स्ट के लिए em टैग का उपयोग करो","<em>This text is emphasized.</em>"
"गूगल की वेबसाइट का लिंक बनाओ","<a href='https://www.google.com'>Go to Google</a>"
"एक लिंक बनाओ जो नए टैब में खुले","<a href='https://www.google.com' target='_blank'>Google in New Tab</a>"
"एक तस्वीर दिखाने के लिए img टैग बनाओ","<img src='image.png' alt='An example image'>"
"एक 100 पिक्सल चौड़ी तस्वीर लगाओ","<img src='photo.jpg' alt='photo' width='100'>"
"एक हॉरिजॉन्टल लाइन या डिवाइडर बनाओ","<hr>"
"टेक्स्ट के बीच में एक लाइन ब्रेक डालो","Hello<br>World"
"तीन फलों वाली एक बुलेट लिस्ट बनाओ","<ul><li>Apple</li><li>Banana</li><li>Mango</li></ul>"
"तीन शहरों वाली एक नंबर वाली लिस्ट बनाओ","<ol><li>Lucknow</li><li>Delhi</li><li>Mumbai</li></ol>"
"कंटेंट के लिए एक div कंटेनर बनाओ","<div>This is content inside a div.</div>"
"एक वाक्य के अंदर टेक्स्ट को स्टाइल करने के लिए span टैग","<p>This is a <span style='color:red;'>red</span> word.</p>"
"कोड दिखाने के लिए pre टैग का इस्तेमाल करो","<pre><code>function hello() {\n  console.log('Hello, World!');\n}</code></pre>"
"एक साधारण फॉर्म बनाओ","<form action='/submit_page.php'></form>"
"नाम के लिए एक लेबल बनाओ","<label for='name'>Name:</label>"
"फर्स्ट नेम के लिए एक लेबल और टेक्स्ट इनपुट बनाओ","<label for='fname'>First name:</label><br><input type='text' id='fname' name='fname'>"
"एक सबमिट बटन बनाओ जिसका टेक्स्ट 'Register' हो","<input type='submit' value='Register'>"
"एक साधारण टेबल का टैग बनाओ","<table></table>"
"टेबल में एक रो बनाने के लिए टैग","<tr></tr>"
"टेबल में एक हेडर सेल बनाने के लिए टैग","<th>Header Cell</th>"
"टेबल में एक डेटा सेल बनाने के लिए टैग","<td>Data Cell</td>"
"नाम और शहर के हेडर वाली एक साधारण टेबल बनाओ","<table><tr><th>Name</th><th>City</th></tr><tr><td>Amit</td><td>Lucknow</td></tr></table>"
"एक तस्वीर बनाओ जो क्लिक करने पर गूगल पर ले जाए","<a href='https://google.com'><img src='photo.jpg' alt='Google link' style='width:42px;height:42px;'></a>"
"HTML में एक कमेंट लिखो",""
"एक कोटेशन के लिए blockquote टैग बनाओ","<blockquote>This is a long quotation. It helps to show that this text is quoted from another source.</blockquote>"
"एक पैराग्राफ बनाओ जिस पर होवर करने पर 'Tooltip text' दिखे","<p title='This is the tooltip text'>Hover over this paragraph.</p>"
"एक डिसेबल्ड इनपुट फील्ड बनाओ","<input type='text' value='Cannot change this' disabled>"
"एक सिर्फ-पढ़ने-लायक (read-only) इनपुट फील्ड बनाओ","<input type='text' value='You can only read this' readonly>"
"एक नेस्टेड लिस्ट बनाओ (लिस्ट के अंदर लिस्ट)","<ul><li>Coffee</li><li>Tea<ul><li>Black Tea</li><li>Green Tea</li></ul></li></ul>"
"एक पैराग्राफ को 'intro-para' की आईडी दो","<p id='intro-para'>This is the introduction paragraph.</p>"
"दो पैराग्राफ को 'highlight' क्लास दो","<p class='highlight'>This is the first highlighted paragraph.</p><p class='highlight'>This is the second one.</p>"
"कॉपीराइट सिंबल © बनाने के लिए कोड","<p>Copyright &copy; 2025</p>"
"less-than सिंबल (<) को टेक्स्ट में दिखाने के लिए कोड","<p>The less-than sign is written as &lt;</p>"
"लिंग चुनने के लिए रेडियो बटन बनाओ","<form><input type='radio' id='male' name='gender' value='Male'><label for='male'>Male</label><br><input type='radio' id='female' name='gender' value='Female'><label for='female'>Female</label></form>"
"हॉबी चुनने के लिए चेकबॉक्स बनाओ","<input type='checkbox' id='hobby1' name='hobby1' value='Music'><label for='hobby1'>Music</label><br><input type='checkbox' id='hobby2' name='hobby2' value='Sports'><label for='hobby2'>Sports</label>"
"कमेंट लिखने के लिए एक बड़ा टेक्स्ट एरिया बनाओ","<textarea name='comment' rows='5' cols='30' placeholder='Write your comment here...'></textarea>"
"शहर चुनने के लिए एक ड्रॉपडाउन लिस्ट बनाओ","<label for='city'>Choose a city:</label><select id='city' name='city'><option value='delhi'>Delhi</option><option value='mumbai'>Mumbai</option></select>"
"जन्मदिन चुनने के लिए एक डेट इनपुट बनाओ","<label for='birthday'>Birthday:</label><input type='date' id='birthday' name='birthday'>"
"रंग चुनने के लिए एक कलर पिकर बनाओ","<label for='favcolor'>Select your favorite color:</label><input type='color' id='favcolor' name='favcolor'>"
"1 से 10 के बीच एक नंबर चुनने के लिए इनपुट बनाओ","<label for='quantity'>Quantity (between 1 and 10):</label><input type='number' id='quantity' name='quantity' min='1' max='10'>"
"फाइल अपलोड करने के लिए एक बटन बनाओ","<label for='myfile'>Select a file:</label><input type='file' id='myfile' name='myfile'>"
"एक सामान्य क्लिक करने वाला बटन बनाओ","<button type='button'>Click Me</button>"
"फॉर्म को रीसेट करने के लिए एक बटन बनाओ","<button type='reset'>Reset Form</button>"
"वेबसाइट के लिए एक हेडर सेक्शन बनाओ","<header><h1>Main Website Title</h1><p>Welcome to our website!</p></header>"
"वेबसाइट के लिए एक फुटर सेक्शन बनाओ","<footer><p>Author: Amit Saka<br><a href='mailto:email@example.com'>email@example.com</a></p></footer>"
"पेज के मुख्य कंटेंट के लिए main टैग का उपयोग करो","<main><h2>Main Content Heading</h2><p>This is the main content of the page where the primary information resides.</p></main>"
"एक 'About Us' सेक्शन बनाओ","<section><h2>About Us</h2><p>Information about our company and history.</p></section>"
"एक ब्लॉग पोस्ट के लिए article टैग का उपयोग करो","<article><h3>Blog Post Title</h3><p>This is the first paragraph of the blog post. It contains the main story.</p></article>"
"एक नेविगेशन मेन्यू के लिए nav टैग बनाओ","<nav><a href='/home'>Home</a> | <a href='/about'>About</a> | <a href='/contact'>Contact</a></nav>"
"कैप्शन के साथ एक तस्वीर दिखाने के लिए figure और figcaption टैग का उपयोग करो","<figure><img src='pic.jpg' alt='My Picture' style='width:100%'><figcaption>Fig.1 - A caption for the picture above.</figcaption></figure>"
"समय दिखाने के लिए time टैग का उपयोग करो","<p>The event starts at <time>10:00</time> in the morning.</p>"
"टेक्स्ट को हाईलाइट करने के लिए mark टैग का उपयोग करो","<p>Do not forget to buy <mark>milk</mark> today.</p>"
"एक क्लिक करके खुलने और बंद होने वाला सेक्शन बनाओ","<details><summary>Click for details</summary><p>This is the hidden detail text that appears on click.</p></details>"
